"use strict";
const obsidian = require("obsidian");
function noop() {
}
function assign$1(tar, src) {
  for (const k2 in src)
    tar[k2] = src[k2];
  return tar;
}
function run(fn2) {
  return fn2();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a3, b2) {
  return a3 != a3 ? b2 == b2 : a3 !== b2 || (a3 && typeof a3 === "object" || typeof a3 === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn2) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn2);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn2) {
  return definition[1] && fn2 ? assign$1($$scope.ctx.slice(), definition[1](fn2(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn2) {
  if (definition[2] && fn2) {
    const lets = definition[2](fn2(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i2 = 0; i2 < len; i2 += 1) {
        merged[i2] = $$scope.dirty[i2] | lets[i2];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i2 = 0; i2 < length; i2++) {
      dirty[i2] = -1;
    }
    return dirty;
  }
  return -1;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i2 = 0; i2 < iterations.length; i2 += 1) {
    if (iterations[i2])
      iterations[i2].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  const e2 = document.createEvent("CustomEvent");
  e2.initCustomEvent(type, bubbles, cancelable, detail);
  return e2;
}
let current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn2) {
  get_current_component().$$.on_mount.push(fn2);
}
function onDestroy(fn2) {
  get_current_component().$$.on_destroy.push(fn2);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail, { cancelable });
      callbacks.slice().forEach((fn2) => {
        fn2.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn2) => fn2.call(this, event));
  }
}
const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn2) {
  render_callbacks.push(fn2);
}
const seen_callbacks = /* @__PURE__ */ new Set();
let flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i2 = 0; i2 < render_callbacks.length; i2 += 1) {
      const callback = render_callbacks[i2];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
const outroing = /* @__PURE__ */ new Set();
let outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block2, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i2 = o;
  const old_indexes = {};
  while (i2--)
    old_indexes[old_blocks[i2].key] = i2;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  i2 = n;
  while (i2--) {
    const child_ctx = get_context(ctx, list, i2);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block2(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i2] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i2 - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i2) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i2 / 31 | 0] |= 1 << i2 % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i2, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i2], $$.ctx[i2] = value)) {
      if (!$$.skip_bound && $$.bound[i2])
        $$.bound[i2](value);
      if (ready)
        make_dirty(component, i2);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    flush();
  }
  set_current_component(parent_component);
}
class SvelteComponent {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
}
const subscriber_queue = [];
function writable(value, start2 = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i2 = 0; i2 < subscriber_queue.length; i2 += 2) {
            subscriber_queue[i2][0](subscriber_queue[i2 + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn2) {
    set(fn2(value));
  }
  function subscribe(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start2(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe };
}
const allTasksCache = writable([]);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var dist = {};
var en = {};
var ENTimeUnitWithinFormatParser = {};
var constants$8 = {};
var pattern = {};
Object.defineProperty(pattern, "__esModule", { value: true });
pattern.matchAnyPattern = pattern.extractTerms = pattern.repeatedTimeunitPattern = void 0;
function repeatedTimeunitPattern(prefix, singleTimeunitPattern) {
  const singleTimeunitPatternNoCapture = singleTimeunitPattern.replace(/\((?!\?)/g, "(?:");
  return `${prefix}${singleTimeunitPatternNoCapture}\\s{0,5}(?:,?\\s{0,5}${singleTimeunitPatternNoCapture}){0,10}`;
}
pattern.repeatedTimeunitPattern = repeatedTimeunitPattern;
function extractTerms(dictionary) {
  let keys;
  if (dictionary instanceof Array) {
    keys = [...dictionary];
  } else if (dictionary instanceof Map) {
    keys = Array.from(dictionary.keys());
  } else {
    keys = Object.keys(dictionary);
  }
  return keys;
}
pattern.extractTerms = extractTerms;
function matchAnyPattern(dictionary) {
  const joinedTerms = extractTerms(dictionary).sort((a3, b2) => b2.length - a3.length).join("|").replace(/\./g, "\\.");
  return `(?:${joinedTerms})`;
}
pattern.matchAnyPattern = matchAnyPattern;
var years = {};
var dayjs_min = { exports: {} };
(function(module2, exports2) {
  !function(t2, e2) {
    module2.exports = e2();
  }(commonjsGlobal, function() {
    var t2 = 1e3, e2 = 6e4, n = 36e5, r = "millisecond", i2 = "second", s3 = "minute", u2 = "hour", a3 = "day", o = "week", f = "month", h3 = "quarter", c2 = "year", d3 = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y3 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M3 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
      var e3 = ["th", "st", "nd", "rd"], n2 = t3 % 100;
      return "[" + t3 + (e3[(n2 - 20) % 10] || e3[n2] || e3[0]) + "]";
    } }, m3 = function(t3, e3, n2) {
      var r2 = String(t3);
      return !r2 || r2.length >= e3 ? t3 : "" + Array(e3 + 1 - r2.length).join(n2) + t3;
    }, v = { s: m3, z: function(t3) {
      var e3 = -t3.utcOffset(), n2 = Math.abs(e3), r2 = Math.floor(n2 / 60), i3 = n2 % 60;
      return (e3 <= 0 ? "+" : "-") + m3(r2, 2, "0") + ":" + m3(i3, 2, "0");
    }, m: function t3(e3, n2) {
      if (e3.date() < n2.date())
        return -t3(n2, e3);
      var r2 = 12 * (n2.year() - e3.year()) + (n2.month() - e3.month()), i3 = e3.clone().add(r2, f), s4 = n2 - i3 < 0, u3 = e3.clone().add(r2 + (s4 ? -1 : 1), f);
      return +(-(r2 + (n2 - i3) / (s4 ? i3 - u3 : u3 - i3)) || 0);
    }, a: function(t3) {
      return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
    }, p: function(t3) {
      return { M: f, y: c2, w: o, d: a3, D: d3, h: u2, m: s3, s: i2, ms: r, Q: h3 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t3) {
      return void 0 === t3;
    } }, g = "en", D2 = {};
    D2[g] = M3;
    var p = function(t3) {
      return t3 instanceof _;
    }, S3 = function t3(e3, n2, r2) {
      var i3;
      if (!e3)
        return g;
      if ("string" == typeof e3) {
        var s4 = e3.toLowerCase();
        D2[s4] && (i3 = s4), n2 && (D2[s4] = n2, i3 = s4);
        var u3 = e3.split("-");
        if (!i3 && u3.length > 1)
          return t3(u3[0]);
      } else {
        var a4 = e3.name;
        D2[a4] = e3, i3 = a4;
      }
      return !r2 && i3 && (g = i3), i3 || !r2 && g;
    }, w2 = function(t3, e3) {
      if (p(t3))
        return t3.clone();
      var n2 = "object" == typeof e3 ? e3 : {};
      return n2.date = t3, n2.args = arguments, new _(n2);
    }, O2 = v;
    O2.l = S3, O2.i = p, O2.w = function(t3, e3) {
      return w2(t3, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
    };
    var _ = function() {
      function M4(t3) {
        this.$L = S3(t3.locale, null, true), this.parse(t3);
      }
      var m4 = M4.prototype;
      return m4.parse = function(t3) {
        this.$d = function(t4) {
          var e3 = t4.date, n2 = t4.utc;
          if (null === e3)
            return new Date(NaN);
          if (O2.u(e3))
            return new Date();
          if (e3 instanceof Date)
            return new Date(e3);
          if ("string" == typeof e3 && !/Z$/i.test(e3)) {
            var r2 = e3.match($);
            if (r2) {
              var i3 = r2[2] - 1 || 0, s4 = (r2[7] || "0").substring(0, 3);
              return n2 ? new Date(Date.UTC(r2[1], i3, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s4)) : new Date(r2[1], i3, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s4);
            }
          }
          return new Date(e3);
        }(t3), this.$x = t3.x || {}, this.init();
      }, m4.init = function() {
        var t3 = this.$d;
        this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
      }, m4.$utils = function() {
        return O2;
      }, m4.isValid = function() {
        return !(this.$d.toString() === l);
      }, m4.isSame = function(t3, e3) {
        var n2 = w2(t3);
        return this.startOf(e3) <= n2 && n2 <= this.endOf(e3);
      }, m4.isAfter = function(t3, e3) {
        return w2(t3) < this.startOf(e3);
      }, m4.isBefore = function(t3, e3) {
        return this.endOf(e3) < w2(t3);
      }, m4.$g = function(t3, e3, n2) {
        return O2.u(t3) ? this[e3] : this.set(n2, t3);
      }, m4.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, m4.valueOf = function() {
        return this.$d.getTime();
      }, m4.startOf = function(t3, e3) {
        var n2 = this, r2 = !!O2.u(e3) || e3, h4 = O2.p(t3), l2 = function(t4, e4) {
          var i3 = O2.w(n2.$u ? Date.UTC(n2.$y, e4, t4) : new Date(n2.$y, e4, t4), n2);
          return r2 ? i3 : i3.endOf(a3);
        }, $2 = function(t4, e4) {
          return O2.w(n2.toDate()[t4].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n2);
        }, y4 = this.$W, M5 = this.$M, m5 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
        switch (h4) {
          case c2:
            return r2 ? l2(1, 0) : l2(31, 11);
          case f:
            return r2 ? l2(1, M5) : l2(0, M5 + 1);
          case o:
            var g2 = this.$locale().weekStart || 0, D3 = (y4 < g2 ? y4 + 7 : y4) - g2;
            return l2(r2 ? m5 - D3 : m5 + (6 - D3), M5);
          case a3:
          case d3:
            return $2(v2 + "Hours", 0);
          case u2:
            return $2(v2 + "Minutes", 1);
          case s3:
            return $2(v2 + "Seconds", 2);
          case i2:
            return $2(v2 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m4.endOf = function(t3) {
        return this.startOf(t3, false);
      }, m4.$set = function(t3, e3) {
        var n2, o2 = O2.p(t3), h4 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a3] = h4 + "Date", n2[d3] = h4 + "Date", n2[f] = h4 + "Month", n2[c2] = h4 + "FullYear", n2[u2] = h4 + "Hours", n2[s3] = h4 + "Minutes", n2[i2] = h4 + "Seconds", n2[r] = h4 + "Milliseconds", n2)[o2], $2 = o2 === a3 ? this.$D + (e3 - this.$W) : e3;
        if (o2 === f || o2 === c2) {
          var y4 = this.clone().set(d3, 1);
          y4.$d[l2]($2), y4.init(), this.$d = y4.set(d3, Math.min(this.$D, y4.daysInMonth())).$d;
        } else
          l2 && this.$d[l2]($2);
        return this.init(), this;
      }, m4.set = function(t3, e3) {
        return this.clone().$set(t3, e3);
      }, m4.get = function(t3) {
        return this[O2.p(t3)]();
      }, m4.add = function(r2, h4) {
        var d4, l2 = this;
        r2 = Number(r2);
        var $2 = O2.p(h4), y4 = function(t3) {
          var e3 = w2(l2);
          return O2.w(e3.date(e3.date() + Math.round(t3 * r2)), l2);
        };
        if ($2 === f)
          return this.set(f, this.$M + r2);
        if ($2 === c2)
          return this.set(c2, this.$y + r2);
        if ($2 === a3)
          return y4(1);
        if ($2 === o)
          return y4(7);
        var M5 = (d4 = {}, d4[s3] = e2, d4[u2] = n, d4[i2] = t2, d4)[$2] || 1, m5 = this.$d.getTime() + r2 * M5;
        return O2.w(m5, this);
      }, m4.subtract = function(t3, e3) {
        return this.add(-1 * t3, e3);
      }, m4.format = function(t3) {
        var e3 = this, n2 = this.$locale();
        if (!this.isValid())
          return n2.invalidDate || l;
        var r2 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i3 = O2.z(this), s4 = this.$H, u3 = this.$m, a4 = this.$M, o2 = n2.weekdays, f2 = n2.months, h4 = function(t4, n3, i4, s5) {
          return t4 && (t4[n3] || t4(e3, r2)) || i4[n3].slice(0, s5);
        }, c3 = function(t4) {
          return O2.s(s4 % 12 || 12, t4, "0");
        }, d4 = n2.meridiem || function(t4, e4, n3) {
          var r3 = t4 < 12 ? "AM" : "PM";
          return n3 ? r3.toLowerCase() : r3;
        }, $2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a4 + 1, MM: O2.s(a4 + 1, 2, "0"), MMM: h4(n2.monthsShort, a4, f2, 3), MMMM: h4(f2, a4), D: this.$D, DD: O2.s(this.$D, 2, "0"), d: String(this.$W), dd: h4(n2.weekdaysMin, this.$W, o2, 2), ddd: h4(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s4), HH: O2.s(s4, 2, "0"), h: c3(1), hh: c3(2), a: d4(s4, u3, true), A: d4(s4, u3, false), m: String(u3), mm: O2.s(u3, 2, "0"), s: String(this.$s), ss: O2.s(this.$s, 2, "0"), SSS: O2.s(this.$ms, 3, "0"), Z: i3 };
        return r2.replace(y3, function(t4, e4) {
          return e4 || $2[t4] || i3.replace(":", "");
        });
      }, m4.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m4.diff = function(r2, d4, l2) {
        var $2, y4 = O2.p(d4), M5 = w2(r2), m5 = (M5.utcOffset() - this.utcOffset()) * e2, v2 = this - M5, g2 = O2.m(this, M5);
        return g2 = ($2 = {}, $2[c2] = g2 / 12, $2[f] = g2, $2[h3] = g2 / 3, $2[o] = (v2 - m5) / 6048e5, $2[a3] = (v2 - m5) / 864e5, $2[u2] = v2 / n, $2[s3] = v2 / e2, $2[i2] = v2 / t2, $2)[y4] || v2, l2 ? g2 : O2.a(g2);
      }, m4.daysInMonth = function() {
        return this.endOf(f).$D;
      }, m4.$locale = function() {
        return D2[this.$L];
      }, m4.locale = function(t3, e3) {
        if (!t3)
          return this.$L;
        var n2 = this.clone(), r2 = S3(t3, e3, true);
        return r2 && (n2.$L = r2), n2;
      }, m4.clone = function() {
        return O2.w(this.$d, this);
      }, m4.toDate = function() {
        return new Date(this.valueOf());
      }, m4.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m4.toISOString = function() {
        return this.$d.toISOString();
      }, m4.toString = function() {
        return this.$d.toUTCString();
      }, M4;
    }(), T2 = _.prototype;
    return w2.prototype = T2, [["$ms", r], ["$s", i2], ["$m", s3], ["$H", u2], ["$W", a3], ["$M", f], ["$y", c2], ["$D", d3]].forEach(function(t3) {
      T2[t3[1]] = function(e3) {
        return this.$g(e3, t3[0], t3[1]);
      };
    }), w2.extend = function(t3, e3) {
      return t3.$i || (t3(e3, _, w2), t3.$i = true), w2;
    }, w2.locale = S3, w2.isDayjs = p, w2.unix = function(t3) {
      return w2(1e3 * t3);
    }, w2.en = D2[g], w2.Ls = D2, w2.p = {}, w2;
  });
})(dayjs_min);
var __importDefault$m = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(years, "__esModule", { value: true });
years.findYearClosestToRef = years.findMostLikelyADYear = void 0;
const dayjs_1$d = __importDefault$m(dayjs_min.exports);
function findMostLikelyADYear(yearNumber) {
  if (yearNumber < 100) {
    if (yearNumber > 50) {
      yearNumber = yearNumber + 1900;
    } else {
      yearNumber = yearNumber + 2e3;
    }
  }
  return yearNumber;
}
years.findMostLikelyADYear = findMostLikelyADYear;
function findYearClosestToRef(refDate, day, month) {
  const refMoment = dayjs_1$d.default(refDate);
  let dateMoment = refMoment;
  dateMoment = dateMoment.month(month - 1);
  dateMoment = dateMoment.date(day);
  dateMoment = dateMoment.year(refMoment.year());
  const nextYear = dateMoment.add(1, "y");
  const lastYear = dateMoment.add(-1, "y");
  if (Math.abs(nextYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {
    dateMoment = nextYear;
  } else if (Math.abs(lastYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {
    dateMoment = lastYear;
  }
  return dateMoment.year();
}
years.findYearClosestToRef = findYearClosestToRef;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.parseTimeUnits = exports2.TIME_UNITS_PATTERN = exports2.parseYear = exports2.YEAR_PATTERN = exports2.parseOrdinalNumberPattern = exports2.ORDINAL_NUMBER_PATTERN = exports2.parseNumberPattern = exports2.NUMBER_PATTERN = exports2.TIME_UNIT_DICTIONARY = exports2.ORDINAL_WORD_DICTIONARY = exports2.INTEGER_WORD_DICTIONARY = exports2.MONTH_DICTIONARY = exports2.FULL_MONTH_NAME_DICTIONARY = exports2.WEEKDAY_DICTIONARY = void 0;
  const pattern_12 = pattern;
  const years_12 = years;
  exports2.WEEKDAY_DICTIONARY = {
    sunday: 0,
    sun: 0,
    "sun.": 0,
    monday: 1,
    mon: 1,
    "mon.": 1,
    tuesday: 2,
    tue: 2,
    "tue.": 2,
    wednesday: 3,
    wed: 3,
    "wed.": 3,
    thursday: 4,
    thurs: 4,
    "thurs.": 4,
    thur: 4,
    "thur.": 4,
    thu: 4,
    "thu.": 4,
    friday: 5,
    fri: 5,
    "fri.": 5,
    saturday: 6,
    sat: 6,
    "sat.": 6
  };
  exports2.FULL_MONTH_NAME_DICTIONARY = {
    january: 1,
    february: 2,
    march: 3,
    april: 4,
    may: 5,
    june: 6,
    july: 7,
    august: 8,
    september: 9,
    october: 10,
    november: 11,
    december: 12
  };
  exports2.MONTH_DICTIONARY = Object.assign(Object.assign({}, exports2.FULL_MONTH_NAME_DICTIONARY), { jan: 1, "jan.": 1, feb: 2, "feb.": 2, mar: 3, "mar.": 3, apr: 4, "apr.": 4, jun: 6, "jun.": 6, jul: 7, "jul.": 7, aug: 8, "aug.": 8, sep: 9, "sep.": 9, sept: 9, "sept.": 9, oct: 10, "oct.": 10, nov: 11, "nov.": 11, dec: 12, "dec.": 12 });
  exports2.INTEGER_WORD_DICTIONARY = {
    one: 1,
    two: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6,
    seven: 7,
    eight: 8,
    nine: 9,
    ten: 10,
    eleven: 11,
    twelve: 12
  };
  exports2.ORDINAL_WORD_DICTIONARY = {
    first: 1,
    second: 2,
    third: 3,
    fourth: 4,
    fifth: 5,
    sixth: 6,
    seventh: 7,
    eighth: 8,
    ninth: 9,
    tenth: 10,
    eleventh: 11,
    twelfth: 12,
    thirteenth: 13,
    fourteenth: 14,
    fifteenth: 15,
    sixteenth: 16,
    seventeenth: 17,
    eighteenth: 18,
    nineteenth: 19,
    twentieth: 20,
    "twenty first": 21,
    "twenty-first": 21,
    "twenty second": 22,
    "twenty-second": 22,
    "twenty third": 23,
    "twenty-third": 23,
    "twenty fourth": 24,
    "twenty-fourth": 24,
    "twenty fifth": 25,
    "twenty-fifth": 25,
    "twenty sixth": 26,
    "twenty-sixth": 26,
    "twenty seventh": 27,
    "twenty-seventh": 27,
    "twenty eighth": 28,
    "twenty-eighth": 28,
    "twenty ninth": 29,
    "twenty-ninth": 29,
    "thirtieth": 30,
    "thirty first": 31,
    "thirty-first": 31
  };
  exports2.TIME_UNIT_DICTIONARY = {
    sec: "second",
    second: "second",
    seconds: "second",
    min: "minute",
    mins: "minute",
    minute: "minute",
    minutes: "minute",
    h: "hour",
    hr: "hour",
    hrs: "hour",
    hour: "hour",
    hours: "hour",
    day: "d",
    days: "d",
    week: "week",
    weeks: "week",
    month: "month",
    months: "month",
    qtr: "quarter",
    quarter: "quarter",
    quarters: "quarter",
    y: "year",
    yr: "year",
    year: "year",
    years: "year"
  };
  exports2.NUMBER_PATTERN = `(?:${pattern_12.matchAnyPattern(exports2.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s{0,2}an?)?|an?\\b(?:\\s{0,2}few)?|few|several|a?\\s{0,2}couple\\s{0,2}(?:of)?)`;
  function parseNumberPattern(match2) {
    const num = match2.toLowerCase();
    if (exports2.INTEGER_WORD_DICTIONARY[num] !== void 0) {
      return exports2.INTEGER_WORD_DICTIONARY[num];
    } else if (num === "a" || num === "an") {
      return 1;
    } else if (num.match(/few/)) {
      return 3;
    } else if (num.match(/half/)) {
      return 0.5;
    } else if (num.match(/couple/)) {
      return 2;
    } else if (num.match(/several/)) {
      return 7;
    }
    return parseFloat(num);
  }
  exports2.parseNumberPattern = parseNumberPattern;
  exports2.ORDINAL_NUMBER_PATTERN = `(?:${pattern_12.matchAnyPattern(exports2.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;
  function parseOrdinalNumberPattern2(match2) {
    let num = match2.toLowerCase();
    if (exports2.ORDINAL_WORD_DICTIONARY[num] !== void 0) {
      return exports2.ORDINAL_WORD_DICTIONARY[num];
    }
    num = num.replace(/(?:st|nd|rd|th)$/i, "");
    return parseInt(num);
  }
  exports2.parseOrdinalNumberPattern = parseOrdinalNumberPattern2;
  exports2.YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9])`;
  function parseYear2(match2) {
    if (/BE/i.test(match2)) {
      match2 = match2.replace(/BE/i, "");
      return parseInt(match2) - 543;
    }
    if (/BCE?/i.test(match2)) {
      match2 = match2.replace(/BCE?/i, "");
      return -parseInt(match2);
    }
    if (/(AD|CE)/i.test(match2)) {
      match2 = match2.replace(/(AD|CE)/i, "");
      return parseInt(match2);
    }
    const rawYearNumber = parseInt(match2);
    return years_12.findMostLikelyADYear(rawYearNumber);
  }
  exports2.parseYear = parseYear2;
  const SINGLE_TIME_UNIT_PATTERN = `(${exports2.NUMBER_PATTERN})\\s{0,3}(${pattern_12.matchAnyPattern(exports2.TIME_UNIT_DICTIONARY)})`;
  const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
  exports2.TIME_UNITS_PATTERN = pattern_12.repeatedTimeunitPattern(`(?:(?:about|around)\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);
  function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match2) {
      collectDateTimeFragment(fragments, match2);
      remainingText = remainingText.substring(match2[0].length).trim();
      match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
  }
  exports2.parseTimeUnits = parseTimeUnits;
  function collectDateTimeFragment(fragments, match2) {
    const num = parseNumberPattern(match2[1]);
    const unit = exports2.TIME_UNIT_DICTIONARY[match2[2].toLowerCase()];
    fragments[unit] = num;
  }
})(constants$8);
var results = {};
var quarterOfYear = { exports: {} };
(function(module2, exports2) {
  !function(t2, n) {
    module2.exports = n();
  }(commonjsGlobal, function() {
    var t2 = "month", n = "quarter";
    return function(e2, i2) {
      var r = i2.prototype;
      r.quarter = function(t3) {
        return this.$utils().u(t3) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t3 - 1));
      };
      var s3 = r.add;
      r.add = function(e3, i3) {
        return e3 = Number(e3), this.$utils().p(i3) === n ? this.add(3 * e3, t2) : s3.bind(this)(e3, i3);
      };
      var u2 = r.startOf;
      r.startOf = function(e3, i3) {
        var r2 = this.$utils(), s4 = !!r2.u(i3) || i3;
        if (r2.p(e3) === n) {
          var o = this.quarter() - 1;
          return s4 ? this.month(3 * o).startOf(t2).startOf("day") : this.month(3 * o + 2).endOf(t2).endOf("day");
        }
        return u2.bind(this)(e3, i3);
      };
    };
  });
})(quarterOfYear);
var dayjs = {};
var hasRequiredDayjs;
function requireDayjs() {
  if (hasRequiredDayjs)
    return dayjs;
  hasRequiredDayjs = 1;
  Object.defineProperty(dayjs, "__esModule", { value: true });
  dayjs.implySimilarTime = dayjs.implySimilarDate = dayjs.assignSimilarTime = dayjs.assignSimilarDate = dayjs.implyTheNextDay = dayjs.assignTheNextDay = void 0;
  const index_1 = requireDist();
  function assignTheNextDay(component, targetDayJs) {
    targetDayJs = targetDayJs.add(1, "day");
    assignSimilarDate(component, targetDayJs);
    implySimilarTime(component, targetDayJs);
  }
  dayjs.assignTheNextDay = assignTheNextDay;
  function implyTheNextDay(component, targetDayJs) {
    targetDayJs = targetDayJs.add(1, "day");
    implySimilarDate(component, targetDayJs);
    implySimilarTime(component, targetDayJs);
  }
  dayjs.implyTheNextDay = implyTheNextDay;
  function assignSimilarDate(component, targetDayJs) {
    component.assign("day", targetDayJs.date());
    component.assign("month", targetDayJs.month() + 1);
    component.assign("year", targetDayJs.year());
  }
  dayjs.assignSimilarDate = assignSimilarDate;
  function assignSimilarTime(component, targetDayJs) {
    component.assign("hour", targetDayJs.hour());
    component.assign("minute", targetDayJs.minute());
    component.assign("second", targetDayJs.second());
    component.assign("millisecond", targetDayJs.millisecond());
    if (component.get("hour") < 12) {
      component.assign("meridiem", index_1.Meridiem.AM);
    } else {
      component.assign("meridiem", index_1.Meridiem.PM);
    }
  }
  dayjs.assignSimilarTime = assignSimilarTime;
  function implySimilarDate(component, targetDayJs) {
    component.imply("day", targetDayJs.date());
    component.imply("month", targetDayJs.month() + 1);
    component.imply("year", targetDayJs.year());
  }
  dayjs.implySimilarDate = implySimilarDate;
  function implySimilarTime(component, targetDayJs) {
    component.imply("hour", targetDayJs.hour());
    component.imply("minute", targetDayJs.minute());
    component.imply("second", targetDayJs.second());
    component.imply("millisecond", targetDayJs.millisecond());
  }
  dayjs.implySimilarTime = implySimilarTime;
  return dayjs;
}
var timezone = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.toTimezoneOffset = exports2.TIMEZONE_ABBR_MAP = void 0;
  exports2.TIMEZONE_ABBR_MAP = {
    ACDT: 630,
    ACST: 570,
    ADT: -180,
    AEDT: 660,
    AEST: 600,
    AFT: 270,
    AKDT: -480,
    AKST: -540,
    ALMT: 360,
    AMST: -180,
    AMT: -240,
    ANAST: 720,
    ANAT: 720,
    AQTT: 300,
    ART: -180,
    AST: -240,
    AWDT: 540,
    AWST: 480,
    AZOST: 0,
    AZOT: -60,
    AZST: 300,
    AZT: 240,
    BNT: 480,
    BOT: -240,
    BRST: -120,
    BRT: -180,
    BST: 60,
    BTT: 360,
    CAST: 480,
    CAT: 120,
    CCT: 390,
    CDT: -300,
    CEST: 120,
    CET: 60,
    CHADT: 825,
    CHAST: 765,
    CKT: -600,
    CLST: -180,
    CLT: -240,
    COT: -300,
    CST: -360,
    CVT: -60,
    CXT: 420,
    ChST: 600,
    DAVT: 420,
    EASST: -300,
    EAST: -360,
    EAT: 180,
    ECT: -300,
    EDT: -240,
    EEST: 180,
    EET: 120,
    EGST: 0,
    EGT: -60,
    EST: -300,
    ET: -300,
    FJST: 780,
    FJT: 720,
    FKST: -180,
    FKT: -240,
    FNT: -120,
    GALT: -360,
    GAMT: -540,
    GET: 240,
    GFT: -180,
    GILT: 720,
    GMT: 0,
    GST: 240,
    GYT: -240,
    HAA: -180,
    HAC: -300,
    HADT: -540,
    HAE: -240,
    HAP: -420,
    HAR: -360,
    HAST: -600,
    HAT: -90,
    HAY: -480,
    HKT: 480,
    HLV: -210,
    HNA: -240,
    HNC: -360,
    HNE: -300,
    HNP: -480,
    HNR: -420,
    HNT: -150,
    HNY: -540,
    HOVT: 420,
    ICT: 420,
    IDT: 180,
    IOT: 360,
    IRDT: 270,
    IRKST: 540,
    IRKT: 540,
    IRST: 210,
    IST: 330,
    JST: 540,
    KGT: 360,
    KRAST: 480,
    KRAT: 480,
    KST: 540,
    KUYT: 240,
    LHDT: 660,
    LHST: 630,
    LINT: 840,
    MAGST: 720,
    MAGT: 720,
    MART: -510,
    MAWT: 300,
    MDT: -360,
    MESZ: 120,
    MEZ: 60,
    MHT: 720,
    MMT: 390,
    MSD: 240,
    MSK: 180,
    MST: -420,
    MUT: 240,
    MVT: 300,
    MYT: 480,
    NCT: 660,
    NDT: -90,
    NFT: 690,
    NOVST: 420,
    NOVT: 360,
    NPT: 345,
    NST: -150,
    NUT: -660,
    NZDT: 780,
    NZST: 720,
    OMSST: 420,
    OMST: 420,
    PDT: -420,
    PET: -300,
    PETST: 720,
    PETT: 720,
    PGT: 600,
    PHOT: 780,
    PHT: 480,
    PKT: 300,
    PMDT: -120,
    PMST: -180,
    PONT: 660,
    PST: -480,
    PT: -480,
    PWT: 540,
    PYST: -180,
    PYT: -240,
    RET: 240,
    SAMT: 240,
    SAST: 120,
    SBT: 660,
    SCT: 240,
    SGT: 480,
    SRT: -180,
    SST: -660,
    TAHT: -600,
    TFT: 300,
    TJT: 300,
    TKT: 780,
    TLT: 540,
    TMT: 300,
    TVT: 720,
    ULAT: 480,
    UTC: 0,
    UYST: -120,
    UYT: -180,
    UZT: 300,
    VET: -210,
    VLAST: 660,
    VLAT: 660,
    VUT: 660,
    WAST: 120,
    WAT: 60,
    WEST: 60,
    WESZ: 60,
    WET: 0,
    WEZ: 0,
    WFT: 720,
    WGST: -120,
    WGT: -180,
    WIB: 420,
    WIT: 540,
    WITA: 480,
    WST: 780,
    WT: 0,
    YAKST: 600,
    YAKT: 600,
    YAPT: 600,
    YEKST: 360,
    YEKT: 360
  };
  function toTimezoneOffset(timezoneInput) {
    var _a;
    if (timezoneInput === null || timezoneInput === void 0) {
      return null;
    }
    if (typeof timezoneInput === "number") {
      return timezoneInput;
    }
    return (_a = exports2.TIMEZONE_ABBR_MAP[timezoneInput]) !== null && _a !== void 0 ? _a : null;
  }
  exports2.toTimezoneOffset = toTimezoneOffset;
})(timezone);
var hasRequiredResults;
function requireResults() {
  if (hasRequiredResults)
    return results;
  hasRequiredResults = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(results, "__esModule", { value: true });
  results.ParsingResult = results.ParsingComponents = results.ReferenceWithTimezone = void 0;
  const quarterOfYear_1 = __importDefault2(quarterOfYear.exports);
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const dayjs_2 = requireDayjs();
  const timezone_1 = timezone;
  dayjs_12.default.extend(quarterOfYear_1.default);
  class ReferenceWithTimezone {
    constructor(input) {
      var _a;
      input = input !== null && input !== void 0 ? input : new Date();
      if (input instanceof Date) {
        this.instant = input;
      } else {
        this.instant = (_a = input.instant) !== null && _a !== void 0 ? _a : new Date();
        this.timezoneOffset = timezone_1.toTimezoneOffset(input.timezone);
      }
    }
    getDateWithAdjustedTimezone() {
      return new Date(this.instant.getTime() + this.getSystemTimezoneAdjustmentMinute(this.instant) * 6e4);
    }
    getSystemTimezoneAdjustmentMinute(date, overrideTimezoneOffset) {
      var _a;
      if (!date || date.getTime() < 0) {
        date = new Date();
      }
      const currentTimezoneOffset = -date.getTimezoneOffset();
      const targetTimezoneOffset = (_a = overrideTimezoneOffset !== null && overrideTimezoneOffset !== void 0 ? overrideTimezoneOffset : this.timezoneOffset) !== null && _a !== void 0 ? _a : currentTimezoneOffset;
      return currentTimezoneOffset - targetTimezoneOffset;
    }
  }
  results.ReferenceWithTimezone = ReferenceWithTimezone;
  class ParsingComponents {
    constructor(reference2, knownComponents) {
      this.reference = reference2;
      this.knownValues = {};
      this.impliedValues = {};
      if (knownComponents) {
        for (const key in knownComponents) {
          this.knownValues[key] = knownComponents[key];
        }
      }
      const refDayJs = dayjs_12.default(reference2.instant);
      this.imply("day", refDayJs.date());
      this.imply("month", refDayJs.month() + 1);
      this.imply("year", refDayJs.year());
      this.imply("hour", 12);
      this.imply("minute", 0);
      this.imply("second", 0);
      this.imply("millisecond", 0);
    }
    get(component) {
      if (component in this.knownValues) {
        return this.knownValues[component];
      }
      if (component in this.impliedValues) {
        return this.impliedValues[component];
      }
      return null;
    }
    isCertain(component) {
      return component in this.knownValues;
    }
    getCertainComponents() {
      return Object.keys(this.knownValues);
    }
    imply(component, value) {
      if (component in this.knownValues) {
        return this;
      }
      this.impliedValues[component] = value;
      return this;
    }
    assign(component, value) {
      this.knownValues[component] = value;
      delete this.impliedValues[component];
      return this;
    }
    delete(component) {
      delete this.knownValues[component];
      delete this.impliedValues[component];
    }
    clone() {
      const component = new ParsingComponents(this.reference);
      component.knownValues = {};
      component.impliedValues = {};
      for (const key in this.knownValues) {
        component.knownValues[key] = this.knownValues[key];
      }
      for (const key in this.impliedValues) {
        component.impliedValues[key] = this.impliedValues[key];
      }
      return component;
    }
    isOnlyDate() {
      return !this.isCertain("hour") && !this.isCertain("minute") && !this.isCertain("second");
    }
    isOnlyTime() {
      return !this.isCertain("weekday") && !this.isCertain("day") && !this.isCertain("month");
    }
    isOnlyWeekdayComponent() {
      return this.isCertain("weekday") && !this.isCertain("day") && !this.isCertain("month");
    }
    isOnlyDayMonthComponent() {
      return this.isCertain("day") && this.isCertain("month") && !this.isCertain("year");
    }
    isValidDate() {
      const date = this.dateWithoutTimezoneAdjustment();
      if (date.getFullYear() !== this.get("year"))
        return false;
      if (date.getMonth() !== this.get("month") - 1)
        return false;
      if (date.getDate() !== this.get("day"))
        return false;
      if (this.get("hour") != null && date.getHours() != this.get("hour"))
        return false;
      if (this.get("minute") != null && date.getMinutes() != this.get("minute"))
        return false;
      return true;
    }
    toString() {
      return `[ParsingComponents {knownValues: ${JSON.stringify(this.knownValues)}, impliedValues: ${JSON.stringify(this.impliedValues)}}, reference: ${JSON.stringify(this.reference)}]`;
    }
    dayjs() {
      return dayjs_12.default(this.date());
    }
    date() {
      const date = this.dateWithoutTimezoneAdjustment();
      const timezoneAdjustment = this.reference.getSystemTimezoneAdjustmentMinute(date, this.get("timezoneOffset"));
      return new Date(date.getTime() + timezoneAdjustment * 6e4);
    }
    dateWithoutTimezoneAdjustment() {
      const date = new Date(this.get("year"), this.get("month") - 1, this.get("day"), this.get("hour"), this.get("minute"), this.get("second"), this.get("millisecond"));
      date.setFullYear(this.get("year"));
      return date;
    }
    static createRelativeFromReference(reference2, fragments) {
      let date = dayjs_12.default(reference2.instant);
      for (const key in fragments) {
        date = date.add(fragments[key], key);
      }
      const components = new ParsingComponents(reference2);
      if (fragments["hour"] || fragments["minute"] || fragments["second"]) {
        dayjs_2.assignSimilarTime(components, date);
        dayjs_2.assignSimilarDate(components, date);
        if (reference2.timezoneOffset !== null) {
          components.assign("timezoneOffset", -reference2.instant.getTimezoneOffset());
        }
      } else {
        dayjs_2.implySimilarTime(components, date);
        if (reference2.timezoneOffset !== null) {
          components.imply("timezoneOffset", -reference2.instant.getTimezoneOffset());
        }
        if (fragments["d"]) {
          components.assign("day", date.date());
          components.assign("month", date.month() + 1);
          components.assign("year", date.year());
        } else {
          if (fragments["week"]) {
            components.imply("weekday", date.day());
          }
          components.imply("day", date.date());
          if (fragments["month"]) {
            components.assign("month", date.month() + 1);
            components.assign("year", date.year());
          } else {
            components.imply("month", date.month() + 1);
            if (fragments["year"]) {
              components.assign("year", date.year());
            } else {
              components.imply("year", date.year());
            }
          }
        }
      }
      return components;
    }
  }
  results.ParsingComponents = ParsingComponents;
  class ParsingResult {
    constructor(reference2, index, text2, start2, end2) {
      this.reference = reference2;
      this.refDate = reference2.instant;
      this.index = index;
      this.text = text2;
      this.start = start2 || new ParsingComponents(reference2);
      this.end = end2;
    }
    clone() {
      const result = new ParsingResult(this.reference, this.index, this.text);
      result.start = this.start ? this.start.clone() : null;
      result.end = this.end ? this.end.clone() : null;
      return result;
    }
    date() {
      return this.start.date();
    }
    toString() {
      return `[ParsingResult {index: ${this.index}, text: '${this.text}', ...}]`;
    }
  }
  results.ParsingResult = ParsingResult;
  return results;
}
var AbstractParserWithWordBoundary = {};
Object.defineProperty(AbstractParserWithWordBoundary, "__esModule", { value: true });
AbstractParserWithWordBoundary.AbstractParserWithWordBoundaryChecking = void 0;
class AbstractParserWithWordBoundaryChecking {
  constructor() {
    this.cachedInnerPattern = null;
    this.cachedPattern = null;
  }
  patternLeftBoundary() {
    return `(\\W|^)`;
  }
  pattern(context) {
    const innerPattern = this.innerPattern(context);
    if (innerPattern == this.cachedInnerPattern) {
      return this.cachedPattern;
    }
    this.cachedPattern = new RegExp(`${this.patternLeftBoundary()}${innerPattern.source}`, innerPattern.flags);
    this.cachedInnerPattern = innerPattern;
    return this.cachedPattern;
  }
  extract(context, match2) {
    var _a;
    const header = (_a = match2[1]) !== null && _a !== void 0 ? _a : "";
    match2.index = match2.index + header.length;
    match2[0] = match2[0].substring(header.length);
    for (let i2 = 2; i2 < match2.length; i2++) {
      match2[i2 - 1] = match2[i2];
    }
    return this.innerExtract(context, match2);
  }
}
AbstractParserWithWordBoundary.AbstractParserWithWordBoundaryChecking = AbstractParserWithWordBoundaryChecking;
var hasRequiredENTimeUnitWithinFormatParser;
function requireENTimeUnitWithinFormatParser() {
  if (hasRequiredENTimeUnitWithinFormatParser)
    return ENTimeUnitWithinFormatParser;
  hasRequiredENTimeUnitWithinFormatParser = 1;
  Object.defineProperty(ENTimeUnitWithinFormatParser, "__esModule", { value: true });
  const constants_12 = constants$8;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const PATTERN_WITH_PREFIX = new RegExp(`(?:within|in|for)\\s*(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${constants_12.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
  const PATTERN_WITHOUT_PREFIX = new RegExp(`(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${constants_12.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
  class ENTimeUnitWithinFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return context.option.forwardDate ? PATTERN_WITHOUT_PREFIX : PATTERN_WITH_PREFIX;
    }
    innerExtract(context, match2) {
      const timeUnits = constants_12.parseTimeUnits(match2[1]);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  ENTimeUnitWithinFormatParser.default = ENTimeUnitWithinFormatParser$1;
  return ENTimeUnitWithinFormatParser;
}
var ENMonthNameLittleEndianParser$1 = {};
Object.defineProperty(ENMonthNameLittleEndianParser$1, "__esModule", { value: true });
const years_1$b = years;
const constants_1$m = constants$8;
const constants_2$9 = constants$8;
const constants_3$4 = constants$8;
const pattern_1$b = pattern;
const AbstractParserWithWordBoundary_1$q = AbstractParserWithWordBoundary;
const PATTERN$m = new RegExp(`(?:on\\s{0,3})?(${constants_3$4.ORDINAL_NUMBER_PATTERN})(?:\\s{0,3}(?:to|\\-|\\\u2013|until|through|till)?\\s{0,3}(${constants_3$4.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s{0,3}(?:of)?\\s{0,3})(${pattern_1$b.matchAnyPattern(constants_1$m.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s{0,3})(${constants_2$9.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`, "i");
const DATE_GROUP$6 = 1;
const DATE_TO_GROUP$6 = 2;
const MONTH_NAME_GROUP$b = 3;
const YEAR_GROUP$e = 4;
class ENMonthNameLittleEndianParser extends AbstractParserWithWordBoundary_1$q.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$m;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const month = constants_1$m.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$b].toLowerCase()];
    const day = constants_3$4.parseOrdinalNumberPattern(match2[DATE_GROUP$6]);
    if (day > 31) {
      match2.index = match2.index + match2[DATE_GROUP$6].length;
      return null;
    }
    result.start.assign("month", month);
    result.start.assign("day", day);
    if (match2[YEAR_GROUP$e]) {
      const yearNumber = constants_2$9.parseYear(match2[YEAR_GROUP$e]);
      result.start.assign("year", yearNumber);
    } else {
      const year = years_1$b.findYearClosestToRef(context.refDate, day, month);
      result.start.imply("year", year);
    }
    if (match2[DATE_TO_GROUP$6]) {
      const endDate = constants_3$4.parseOrdinalNumberPattern(match2[DATE_TO_GROUP$6]);
      result.end = result.start.clone();
      result.end.assign("day", endDate);
    }
    return result;
  }
}
ENMonthNameLittleEndianParser$1.default = ENMonthNameLittleEndianParser;
var ENMonthNameMiddleEndianParser$1 = {};
Object.defineProperty(ENMonthNameMiddleEndianParser$1, "__esModule", { value: true });
const years_1$a = years;
const constants_1$l = constants$8;
const constants_2$8 = constants$8;
const constants_3$3 = constants$8;
const pattern_1$a = pattern;
const AbstractParserWithWordBoundary_1$p = AbstractParserWithWordBoundary;
const PATTERN$l = new RegExp(`(${pattern_1$a.matchAnyPattern(constants_1$l.MONTH_DICTIONARY)})(?:-|/|\\s*,?\\s*)(${constants_2$8.ORDINAL_NUMBER_PATTERN})(?!\\s*(?:am|pm))\\s*(?:(?:to|\\-)\\s*(${constants_2$8.ORDINAL_NUMBER_PATTERN})\\s*)?(?:(?:-|/|\\s*,?\\s*)(${constants_3$3.YEAR_PATTERN}))?(?=\\W|$)(?!\\:\\d)`, "i");
const MONTH_NAME_GROUP$a = 1;
const DATE_GROUP$5 = 2;
const DATE_TO_GROUP$5 = 3;
const YEAR_GROUP$d = 4;
class ENMonthNameMiddleEndianParser extends AbstractParserWithWordBoundary_1$p.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$l;
  }
  innerExtract(context, match2) {
    const month = constants_1$l.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$a].toLowerCase()];
    const day = constants_2$8.parseOrdinalNumberPattern(match2[DATE_GROUP$5]);
    if (day > 31) {
      return null;
    }
    const components = context.createParsingComponents({
      day,
      month
    });
    if (match2[YEAR_GROUP$d]) {
      const year = constants_3$3.parseYear(match2[YEAR_GROUP$d]);
      components.assign("year", year);
    } else {
      const year = years_1$a.findYearClosestToRef(context.refDate, day, month);
      components.imply("year", year);
    }
    if (!match2[DATE_TO_GROUP$5]) {
      return components;
    }
    const endDate = constants_2$8.parseOrdinalNumberPattern(match2[DATE_TO_GROUP$5]);
    const result = context.createParsingResult(match2.index, match2[0]);
    result.start = components;
    result.end = components.clone();
    result.end.assign("day", endDate);
    return result;
  }
}
ENMonthNameMiddleEndianParser$1.default = ENMonthNameMiddleEndianParser;
var ENMonthNameParser$1 = {};
Object.defineProperty(ENMonthNameParser$1, "__esModule", { value: true });
const constants_1$k = constants$8;
const years_1$9 = years;
const pattern_1$9 = pattern;
const constants_2$7 = constants$8;
const AbstractParserWithWordBoundary_1$o = AbstractParserWithWordBoundary;
const PATTERN$k = new RegExp(`((?:in)\\s*)?(${pattern_1$9.matchAnyPattern(constants_1$k.MONTH_DICTIONARY)})\\s*(?:[,-]?\\s*(${constants_2$7.YEAR_PATTERN})?)?(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`, "i");
const PREFIX_GROUP = 1;
const MONTH_NAME_GROUP$9 = 2;
const YEAR_GROUP$c = 3;
class ENMonthNameParser extends AbstractParserWithWordBoundary_1$o.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$k;
  }
  innerExtract(context, match2) {
    const monthName = match2[MONTH_NAME_GROUP$9].toLowerCase();
    if (match2[0].length <= 3 && !constants_1$k.FULL_MONTH_NAME_DICTIONARY[monthName]) {
      return null;
    }
    const result = context.createParsingResult(match2.index + (match2[PREFIX_GROUP] || "").length, match2.index + match2[0].length);
    result.start.imply("day", 1);
    const month = constants_1$k.MONTH_DICTIONARY[monthName];
    result.start.assign("month", month);
    if (match2[YEAR_GROUP$c]) {
      const year = constants_2$7.parseYear(match2[YEAR_GROUP$c]);
      result.start.assign("year", year);
    } else {
      const year = years_1$9.findYearClosestToRef(context.refDate, 1, month);
      result.start.imply("year", year);
    }
    return result;
  }
}
ENMonthNameParser$1.default = ENMonthNameParser;
var ENCasualYearMonthDayParser$1 = {};
Object.defineProperty(ENCasualYearMonthDayParser$1, "__esModule", { value: true });
const constants_1$j = constants$8;
const pattern_1$8 = pattern;
const AbstractParserWithWordBoundary_1$n = AbstractParserWithWordBoundary;
const PATTERN$j = new RegExp(`([0-9]{4})[\\.\\/\\s](?:(${pattern_1$8.matchAnyPattern(constants_1$j.MONTH_DICTIONARY)})|([0-9]{1,2}))[\\.\\/\\s]([0-9]{1,2})(?=\\W|$)`, "i");
const YEAR_NUMBER_GROUP$3 = 1;
const MONTH_NAME_GROUP$8 = 2;
const MONTH_NUMBER_GROUP$2 = 3;
const DATE_NUMBER_GROUP$2 = 4;
class ENCasualYearMonthDayParser extends AbstractParserWithWordBoundary_1$n.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$j;
  }
  innerExtract(context, match2) {
    const month = match2[MONTH_NUMBER_GROUP$2] ? parseInt(match2[MONTH_NUMBER_GROUP$2]) : constants_1$j.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$8].toLowerCase()];
    if (month < 1 || month > 12) {
      return null;
    }
    const year = parseInt(match2[YEAR_NUMBER_GROUP$3]);
    const day = parseInt(match2[DATE_NUMBER_GROUP$2]);
    return {
      day,
      month,
      year
    };
  }
}
ENCasualYearMonthDayParser$1.default = ENCasualYearMonthDayParser;
var ENSlashMonthFormatParser$1 = {};
Object.defineProperty(ENSlashMonthFormatParser$1, "__esModule", { value: true });
const AbstractParserWithWordBoundary_1$m = AbstractParserWithWordBoundary;
const PATTERN$i = new RegExp("([0-9]|0[1-9]|1[012])/([0-9]{4})", "i");
const MONTH_GROUP$4 = 1;
const YEAR_GROUP$b = 2;
class ENSlashMonthFormatParser extends AbstractParserWithWordBoundary_1$m.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$i;
  }
  innerExtract(context, match2) {
    const year = parseInt(match2[YEAR_GROUP$b]);
    const month = parseInt(match2[MONTH_GROUP$4]);
    return context.createParsingComponents().imply("day", 1).assign("month", month).assign("year", year);
  }
}
ENSlashMonthFormatParser$1.default = ENSlashMonthFormatParser;
var ENTimeExpressionParser = {};
var AbstractTimeExpressionParser = {};
var hasRequiredAbstractTimeExpressionParser;
function requireAbstractTimeExpressionParser() {
  if (hasRequiredAbstractTimeExpressionParser)
    return AbstractTimeExpressionParser;
  hasRequiredAbstractTimeExpressionParser = 1;
  Object.defineProperty(AbstractTimeExpressionParser, "__esModule", { value: true });
  AbstractTimeExpressionParser.AbstractTimeExpressionParser = void 0;
  const index_1 = requireDist();
  function primaryTimePattern(leftBoundary, primaryPrefix, primarySuffix, flags) {
    return new RegExp(`${leftBoundary}${primaryPrefix}(\\d{1,4})(?:(?:\\.|:|\uFF1A)(\\d{1,2})(?:(?::|\uFF1A)(\\d{2})(?:\\.(\\d{1,6}))?)?)?(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?))?${primarySuffix}`, flags);
  }
  function followingTimePatten(followingPhase, followingSuffix) {
    return new RegExp(`^(${followingPhase})(\\d{1,4})(?:(?:\\.|\\:|\\\uFF1A)(\\d{1,2})(?:(?:\\.|\\:|\\\uFF1A)(\\d{1,2})(?:\\.(\\d{1,6}))?)?)?(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?))?${followingSuffix}`, "i");
  }
  const HOUR_GROUP2 = 2;
  const MINUTE_GROUP2 = 3;
  const SECOND_GROUP2 = 4;
  const MILLI_SECOND_GROUP = 5;
  const AM_PM_HOUR_GROUP2 = 6;
  class AbstractTimeExpressionParser$1 {
    constructor(strictMode = false) {
      this.cachedPrimaryPrefix = null;
      this.cachedPrimarySuffix = null;
      this.cachedPrimaryTimePattern = null;
      this.cachedFollowingPhase = null;
      this.cachedFollowingSuffix = null;
      this.cachedFollowingTimePatten = null;
      this.strictMode = strictMode;
    }
    patternFlags() {
      return "i";
    }
    primaryPatternLeftBoundary() {
      return `(^|\\s|T|\\b)`;
    }
    primarySuffix() {
      return `(?=\\W|$)`;
    }
    followingSuffix() {
      return `(?=\\W|$)`;
    }
    pattern(context) {
      return this.getPrimaryTimePatternThroughCache();
    }
    extract(context, match2) {
      const startComponents = this.extractPrimaryTimeComponents(context, match2);
      if (!startComponents) {
        match2.index += match2[0].length;
        return null;
      }
      const index = match2.index + match2[1].length;
      const text2 = match2[0].substring(match2[1].length);
      const result = context.createParsingResult(index, text2, startComponents);
      match2.index += match2[0].length;
      const remainingText = context.text.substring(match2.index);
      const followingPattern = this.getFollowingTimePatternThroughCache();
      const followingMatch = followingPattern.exec(remainingText);
      if (text2.match(/^\d{3,4}/) && followingMatch && followingMatch[0].match(/^\s*([+-])\s*\d{2,4}$/)) {
        return null;
      }
      if (!followingMatch || followingMatch[0].match(/^\s*([+-])\s*\d{3,4}$/)) {
        return this.checkAndReturnWithoutFollowingPattern(result);
      }
      result.end = this.extractFollowingTimeComponents(context, followingMatch, result);
      if (result.end) {
        result.text += followingMatch[0];
      }
      return this.checkAndReturnWithFollowingPattern(result);
    }
    extractPrimaryTimeComponents(context, match2, strict = false) {
      const components = context.createParsingComponents();
      let minute = 0;
      let meridiem = null;
      let hour = parseInt(match2[HOUR_GROUP2]);
      if (hour > 100) {
        if (this.strictMode || match2[MINUTE_GROUP2] != null) {
          return null;
        }
        minute = hour % 100;
        hour = Math.floor(hour / 100);
      }
      if (hour > 24) {
        return null;
      }
      if (match2[MINUTE_GROUP2] != null) {
        if (match2[MINUTE_GROUP2].length == 1 && !match2[AM_PM_HOUR_GROUP2]) {
          return null;
        }
        minute = parseInt(match2[MINUTE_GROUP2]);
      }
      if (minute >= 60) {
        return null;
      }
      if (hour > 12) {
        meridiem = index_1.Meridiem.PM;
      }
      if (match2[AM_PM_HOUR_GROUP2] != null) {
        if (hour > 12)
          return null;
        const ampm = match2[AM_PM_HOUR_GROUP2][0].toLowerCase();
        if (ampm == "a") {
          meridiem = index_1.Meridiem.AM;
          if (hour == 12) {
            hour = 0;
          }
        }
        if (ampm == "p") {
          meridiem = index_1.Meridiem.PM;
          if (hour != 12) {
            hour += 12;
          }
        }
      }
      components.assign("hour", hour);
      components.assign("minute", minute);
      if (meridiem !== null) {
        components.assign("meridiem", meridiem);
      } else {
        if (hour < 12) {
          components.imply("meridiem", index_1.Meridiem.AM);
        } else {
          components.imply("meridiem", index_1.Meridiem.PM);
        }
      }
      if (match2[MILLI_SECOND_GROUP] != null) {
        const millisecond = parseInt(match2[MILLI_SECOND_GROUP].substring(0, 3));
        if (millisecond >= 1e3)
          return null;
        components.assign("millisecond", millisecond);
      }
      if (match2[SECOND_GROUP2] != null) {
        const second = parseInt(match2[SECOND_GROUP2]);
        if (second >= 60)
          return null;
        components.assign("second", second);
      }
      return components;
    }
    extractFollowingTimeComponents(context, match2, result) {
      const components = context.createParsingComponents();
      if (match2[MILLI_SECOND_GROUP] != null) {
        const millisecond = parseInt(match2[MILLI_SECOND_GROUP].substring(0, 3));
        if (millisecond >= 1e3)
          return null;
        components.assign("millisecond", millisecond);
      }
      if (match2[SECOND_GROUP2] != null) {
        const second = parseInt(match2[SECOND_GROUP2]);
        if (second >= 60)
          return null;
        components.assign("second", second);
      }
      let hour = parseInt(match2[HOUR_GROUP2]);
      let minute = 0;
      let meridiem = -1;
      if (match2[MINUTE_GROUP2] != null) {
        minute = parseInt(match2[MINUTE_GROUP2]);
      } else if (hour > 100) {
        minute = hour % 100;
        hour = Math.floor(hour / 100);
      }
      if (minute >= 60 || hour > 24) {
        return null;
      }
      if (hour >= 12) {
        meridiem = index_1.Meridiem.PM;
      }
      if (match2[AM_PM_HOUR_GROUP2] != null) {
        if (hour > 12) {
          return null;
        }
        const ampm = match2[AM_PM_HOUR_GROUP2][0].toLowerCase();
        if (ampm == "a") {
          meridiem = index_1.Meridiem.AM;
          if (hour == 12) {
            hour = 0;
            if (!components.isCertain("day")) {
              components.imply("day", components.get("day") + 1);
            }
          }
        }
        if (ampm == "p") {
          meridiem = index_1.Meridiem.PM;
          if (hour != 12)
            hour += 12;
        }
        if (!result.start.isCertain("meridiem")) {
          if (meridiem == index_1.Meridiem.AM) {
            result.start.imply("meridiem", index_1.Meridiem.AM);
            if (result.start.get("hour") == 12) {
              result.start.assign("hour", 0);
            }
          } else {
            result.start.imply("meridiem", index_1.Meridiem.PM);
            if (result.start.get("hour") != 12) {
              result.start.assign("hour", result.start.get("hour") + 12);
            }
          }
        }
      }
      components.assign("hour", hour);
      components.assign("minute", minute);
      if (meridiem >= 0) {
        components.assign("meridiem", meridiem);
      } else {
        const startAtPM = result.start.isCertain("meridiem") && result.start.get("hour") > 12;
        if (startAtPM) {
          if (result.start.get("hour") - 12 > hour) {
            components.imply("meridiem", index_1.Meridiem.AM);
          } else if (hour <= 12) {
            components.assign("hour", hour + 12);
            components.assign("meridiem", index_1.Meridiem.PM);
          }
        } else if (hour > 12) {
          components.imply("meridiem", index_1.Meridiem.PM);
        } else if (hour <= 12) {
          components.imply("meridiem", index_1.Meridiem.AM);
        }
      }
      if (components.date().getTime() < result.start.date().getTime()) {
        components.imply("day", components.get("day") + 1);
      }
      return components;
    }
    checkAndReturnWithoutFollowingPattern(result) {
      if (result.text.match(/^\d$/)) {
        return null;
      }
      if (result.text.match(/^\d\d\d+$/)) {
        return null;
      }
      if (result.text.match(/\d[apAP]$/)) {
        return null;
      }
      const endingWithNumbers = result.text.match(/[^\d:.](\d[\d.]+)$/);
      if (endingWithNumbers) {
        const endingNumbers = endingWithNumbers[1];
        if (this.strictMode) {
          return null;
        }
        if (endingNumbers.includes(".") && !endingNumbers.match(/\d(\.\d{2})+$/)) {
          return null;
        }
        const endingNumberVal = parseInt(endingNumbers);
        if (endingNumberVal > 24) {
          return null;
        }
      }
      return result;
    }
    checkAndReturnWithFollowingPattern(result) {
      if (result.text.match(/^\d+-\d+$/)) {
        return null;
      }
      const endingWithNumbers = result.text.match(/[^\d:.](\d[\d.]+)\s*-\s*(\d[\d.]+)$/);
      if (endingWithNumbers) {
        if (this.strictMode) {
          return null;
        }
        const startingNumbers = endingWithNumbers[1];
        const endingNumbers = endingWithNumbers[2];
        if (endingNumbers.includes(".") && !endingNumbers.match(/\d(\.\d{2})+$/)) {
          return null;
        }
        const endingNumberVal = parseInt(endingNumbers);
        const startingNumberVal = parseInt(startingNumbers);
        if (endingNumberVal > 24 || startingNumberVal > 24) {
          return null;
        }
      }
      return result;
    }
    getPrimaryTimePatternThroughCache() {
      const primaryPrefix = this.primaryPrefix();
      const primarySuffix = this.primarySuffix();
      if (this.cachedPrimaryPrefix === primaryPrefix && this.cachedPrimarySuffix === primarySuffix) {
        return this.cachedPrimaryTimePattern;
      }
      this.cachedPrimaryTimePattern = primaryTimePattern(this.primaryPatternLeftBoundary(), primaryPrefix, primarySuffix, this.patternFlags());
      this.cachedPrimaryPrefix = primaryPrefix;
      this.cachedPrimarySuffix = primarySuffix;
      return this.cachedPrimaryTimePattern;
    }
    getFollowingTimePatternThroughCache() {
      const followingPhase = this.followingPhase();
      const followingSuffix = this.followingSuffix();
      if (this.cachedFollowingPhase === followingPhase && this.cachedFollowingSuffix === followingSuffix) {
        return this.cachedFollowingTimePatten;
      }
      this.cachedFollowingTimePatten = followingTimePatten(followingPhase, followingSuffix);
      this.cachedFollowingPhase = followingPhase;
      this.cachedFollowingSuffix = followingSuffix;
      return this.cachedFollowingTimePatten;
    }
  }
  AbstractTimeExpressionParser.AbstractTimeExpressionParser = AbstractTimeExpressionParser$1;
  return AbstractTimeExpressionParser;
}
var hasRequiredENTimeExpressionParser;
function requireENTimeExpressionParser() {
  if (hasRequiredENTimeExpressionParser)
    return ENTimeExpressionParser;
  hasRequiredENTimeExpressionParser = 1;
  Object.defineProperty(ENTimeExpressionParser, "__esModule", { value: true });
  const index_1 = requireDist();
  const AbstractTimeExpressionParser_1 = requireAbstractTimeExpressionParser();
  class ENTimeExpressionParser$1 extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
    constructor(strictMode) {
      super(strictMode);
    }
    followingPhase() {
      return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|to|\\?)\\s*";
    }
    primaryPrefix() {
      return "(?:(?:at|from)\\s*)??";
    }
    primarySuffix() {
      return "(?:\\s*(?:o\\W*clock|at\\s*night|in\\s*the\\s*(?:morning|afternoon)))?(?!/)(?=\\W|$)";
    }
    extractPrimaryTimeComponents(context, match2) {
      const components = super.extractPrimaryTimeComponents(context, match2);
      if (components) {
        if (match2[0].endsWith("night")) {
          const hour = components.get("hour");
          if (hour >= 6 && hour < 12) {
            components.assign("hour", components.get("hour") + 12);
            components.assign("meridiem", index_1.Meridiem.PM);
          } else if (hour < 6) {
            components.assign("meridiem", index_1.Meridiem.AM);
          }
        }
        if (match2[0].endsWith("afternoon")) {
          components.assign("meridiem", index_1.Meridiem.PM);
          const hour = components.get("hour");
          if (hour >= 0 && hour <= 6) {
            components.assign("hour", components.get("hour") + 12);
          }
        }
        if (match2[0].endsWith("morning")) {
          components.assign("meridiem", index_1.Meridiem.AM);
          const hour = components.get("hour");
          if (hour < 12) {
            components.assign("hour", components.get("hour"));
          }
        }
      }
      return components;
    }
  }
  ENTimeExpressionParser.default = ENTimeExpressionParser$1;
  return ENTimeExpressionParser;
}
var ENTimeUnitAgoFormatParser = {};
var timeunits = {};
Object.defineProperty(timeunits, "__esModule", { value: true });
timeunits.addImpliedTimeUnits = timeunits.reverseTimeUnits = void 0;
function reverseTimeUnits(timeUnits) {
  const reversed = {};
  for (const key in timeUnits) {
    reversed[key] = -timeUnits[key];
  }
  return reversed;
}
timeunits.reverseTimeUnits = reverseTimeUnits;
function addImpliedTimeUnits(components, timeUnits) {
  const output = components.clone();
  let date = components.dayjs();
  for (const key in timeUnits) {
    date = date.add(timeUnits[key], key);
  }
  if ("day" in timeUnits || "d" in timeUnits || "week" in timeUnits || "month" in timeUnits || "year" in timeUnits) {
    output.imply("day", date.date());
    output.imply("month", date.month() + 1);
    output.imply("year", date.year());
  }
  if ("second" in timeUnits || "minute" in timeUnits || "hour" in timeUnits) {
    output.imply("second", date.second());
    output.imply("minute", date.minute());
    output.imply("hour", date.hour());
  }
  return output;
}
timeunits.addImpliedTimeUnits = addImpliedTimeUnits;
var hasRequiredENTimeUnitAgoFormatParser;
function requireENTimeUnitAgoFormatParser() {
  if (hasRequiredENTimeUnitAgoFormatParser)
    return ENTimeUnitAgoFormatParser;
  hasRequiredENTimeUnitAgoFormatParser = 1;
  Object.defineProperty(ENTimeUnitAgoFormatParser, "__esModule", { value: true });
  const constants_12 = constants$8;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  const PATTERN2 = new RegExp(`(${constants_12.TIME_UNITS_PATTERN})\\s{0,5}(?:ago|before|earlier)(?=(?:\\W|$))`, "i");
  const STRICT_PATTERN = new RegExp(`(${constants_12.TIME_UNITS_PATTERN})\\s{0,5}ago(?=(?:\\W|$))`, "i");
  class ENTimeUnitAgoFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
      super();
      this.strictMode = strictMode;
    }
    innerPattern() {
      return this.strictMode ? STRICT_PATTERN : PATTERN2;
    }
    innerExtract(context, match2) {
      const timeUnits = constants_12.parseTimeUnits(match2[1]);
      const outputTimeUnits = timeunits_1.reverseTimeUnits(timeUnits);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
  }
  ENTimeUnitAgoFormatParser.default = ENTimeUnitAgoFormatParser$1;
  return ENTimeUnitAgoFormatParser;
}
var ENTimeUnitLaterFormatParser = {};
var hasRequiredENTimeUnitLaterFormatParser;
function requireENTimeUnitLaterFormatParser() {
  if (hasRequiredENTimeUnitLaterFormatParser)
    return ENTimeUnitLaterFormatParser;
  hasRequiredENTimeUnitLaterFormatParser = 1;
  Object.defineProperty(ENTimeUnitLaterFormatParser, "__esModule", { value: true });
  const constants_12 = constants$8;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const PATTERN2 = new RegExp(`(${constants_12.TIME_UNITS_PATTERN})\\s{0,5}(?:later|after|from now|henceforth|forward|out)(?=(?:\\W|$))`, "i");
  const STRICT_PATTERN = new RegExp("(" + constants_12.TIME_UNITS_PATTERN + ")(later|from now)(?=(?:\\W|$))", "i");
  const GROUP_NUM_TIMEUNITS = 1;
  class ENTimeUnitLaterFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
      super();
      this.strictMode = strictMode;
    }
    innerPattern() {
      return this.strictMode ? STRICT_PATTERN : PATTERN2;
    }
    innerExtract(context, match2) {
      const fragments = constants_12.parseTimeUnits(match2[GROUP_NUM_TIMEUNITS]);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, fragments);
    }
  }
  ENTimeUnitLaterFormatParser.default = ENTimeUnitLaterFormatParser$1;
  return ENTimeUnitLaterFormatParser;
}
var ENMergeDateRangeRefiner$1 = {};
var AbstractMergeDateRangeRefiner$1 = {};
var abstractRefiners = {};
Object.defineProperty(abstractRefiners, "__esModule", { value: true });
abstractRefiners.MergingRefiner = abstractRefiners.Filter = void 0;
class Filter {
  refine(context, results2) {
    return results2.filter((r) => this.isValid(context, r));
  }
}
abstractRefiners.Filter = Filter;
class MergingRefiner {
  refine(context, results2) {
    if (results2.length < 2) {
      return results2;
    }
    const mergedResults = [];
    let curResult = results2[0];
    let nextResult = null;
    for (let i2 = 1; i2 < results2.length; i2++) {
      nextResult = results2[i2];
      const textBetween = context.text.substring(curResult.index + curResult.text.length, nextResult.index);
      if (!this.shouldMergeResults(textBetween, curResult, nextResult, context)) {
        mergedResults.push(curResult);
        curResult = nextResult;
      } else {
        const left2 = curResult;
        const right2 = nextResult;
        const mergedResult = this.mergeResults(textBetween, left2, right2, context);
        context.debug(() => {
          console.log(`${this.constructor.name} merged ${left2} and ${right2} into ${mergedResult}`);
        });
        curResult = mergedResult;
      }
    }
    if (curResult != null) {
      mergedResults.push(curResult);
    }
    return mergedResults;
  }
}
abstractRefiners.MergingRefiner = MergingRefiner;
Object.defineProperty(AbstractMergeDateRangeRefiner$1, "__esModule", { value: true });
const abstractRefiners_1$2 = abstractRefiners;
class AbstractMergeDateRangeRefiner extends abstractRefiners_1$2.MergingRefiner {
  shouldMergeResults(textBetween, currentResult, nextResult) {
    return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;
  }
  mergeResults(textBetween, fromResult, toResult) {
    if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {
      toResult.start.getCertainComponents().forEach((key) => {
        if (!fromResult.start.isCertain(key)) {
          fromResult.start.assign(key, toResult.start.get(key));
        }
      });
      fromResult.start.getCertainComponents().forEach((key) => {
        if (!toResult.start.isCertain(key)) {
          toResult.start.assign(key, fromResult.start.get(key));
        }
      });
    }
    if (fromResult.start.date().getTime() > toResult.start.date().getTime()) {
      let fromMoment = fromResult.start.dayjs();
      let toMoment = toResult.start.dayjs();
      if (fromResult.start.isOnlyWeekdayComponent() && fromMoment.add(-7, "days").isBefore(toMoment)) {
        fromMoment = fromMoment.add(-7, "days");
        fromResult.start.imply("day", fromMoment.date());
        fromResult.start.imply("month", fromMoment.month() + 1);
        fromResult.start.imply("year", fromMoment.year());
      } else if (toResult.start.isOnlyWeekdayComponent() && toMoment.add(7, "days").isAfter(fromMoment)) {
        toMoment = toMoment.add(7, "days");
        toResult.start.imply("day", toMoment.date());
        toResult.start.imply("month", toMoment.month() + 1);
        toResult.start.imply("year", toMoment.year());
      } else {
        [toResult, fromResult] = [fromResult, toResult];
      }
    }
    const result = fromResult.clone();
    result.start = fromResult.start;
    result.end = toResult.start;
    result.index = Math.min(fromResult.index, toResult.index);
    if (fromResult.index < toResult.index) {
      result.text = fromResult.text + textBetween + toResult.text;
    } else {
      result.text = toResult.text + textBetween + fromResult.text;
    }
    return result;
  }
}
AbstractMergeDateRangeRefiner$1.default = AbstractMergeDateRangeRefiner;
var __importDefault$l = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ENMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1$8 = __importDefault$l(AbstractMergeDateRangeRefiner$1);
class ENMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1$8.default {
  patternBetween() {
    return /^\s*(to|-)\s*$/i;
  }
}
ENMergeDateRangeRefiner$1.default = ENMergeDateRangeRefiner;
var ENMergeDateTimeRefiner = {};
var AbstractMergeDateTimeRefiner = {};
var mergingCalculation = {};
var hasRequiredMergingCalculation;
function requireMergingCalculation() {
  if (hasRequiredMergingCalculation)
    return mergingCalculation;
  hasRequiredMergingCalculation = 1;
  Object.defineProperty(mergingCalculation, "__esModule", { value: true });
  mergingCalculation.mergeDateTimeComponent = mergingCalculation.mergeDateTimeResult = void 0;
  const index_1 = requireDist();
  function mergeDateTimeResult(dateResult, timeResult) {
    const result = dateResult.clone();
    const beginDate = dateResult.start;
    const beginTime = timeResult.start;
    result.start = mergeDateTimeComponent(beginDate, beginTime);
    if (dateResult.end != null || timeResult.end != null) {
      const endDate = dateResult.end == null ? dateResult.start : dateResult.end;
      const endTime = timeResult.end == null ? timeResult.start : timeResult.end;
      const endDateTime = mergeDateTimeComponent(endDate, endTime);
      if (dateResult.end == null && endDateTime.date().getTime() < result.start.date().getTime()) {
        if (endDateTime.isCertain("day")) {
          endDateTime.assign("day", endDateTime.get("day") + 1);
        } else {
          endDateTime.imply("day", endDateTime.get("day") + 1);
        }
      }
      result.end = endDateTime;
    }
    return result;
  }
  mergingCalculation.mergeDateTimeResult = mergeDateTimeResult;
  function mergeDateTimeComponent(dateComponent, timeComponent) {
    const dateTimeComponent = dateComponent.clone();
    if (timeComponent.isCertain("hour")) {
      dateTimeComponent.assign("hour", timeComponent.get("hour"));
      dateTimeComponent.assign("minute", timeComponent.get("minute"));
      if (timeComponent.isCertain("second")) {
        dateTimeComponent.assign("second", timeComponent.get("second"));
        if (timeComponent.isCertain("millisecond")) {
          dateTimeComponent.assign("millisecond", timeComponent.get("millisecond"));
        } else {
          dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
        }
      } else {
        dateTimeComponent.imply("second", timeComponent.get("second"));
        dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
      }
    } else {
      dateTimeComponent.imply("hour", timeComponent.get("hour"));
      dateTimeComponent.imply("minute", timeComponent.get("minute"));
      dateTimeComponent.imply("second", timeComponent.get("second"));
      dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
    }
    if (timeComponent.isCertain("timezoneOffset")) {
      dateTimeComponent.assign("timezoneOffset", timeComponent.get("timezoneOffset"));
    }
    if (timeComponent.isCertain("meridiem")) {
      dateTimeComponent.assign("meridiem", timeComponent.get("meridiem"));
    } else if (timeComponent.get("meridiem") != null && dateTimeComponent.get("meridiem") == null) {
      dateTimeComponent.imply("meridiem", timeComponent.get("meridiem"));
    }
    if (dateTimeComponent.get("meridiem") == index_1.Meridiem.PM && dateTimeComponent.get("hour") < 12) {
      if (timeComponent.isCertain("hour")) {
        dateTimeComponent.assign("hour", dateTimeComponent.get("hour") + 12);
      } else {
        dateTimeComponent.imply("hour", dateTimeComponent.get("hour") + 12);
      }
    }
    return dateTimeComponent;
  }
  mergingCalculation.mergeDateTimeComponent = mergeDateTimeComponent;
  return mergingCalculation;
}
var hasRequiredAbstractMergeDateTimeRefiner;
function requireAbstractMergeDateTimeRefiner() {
  if (hasRequiredAbstractMergeDateTimeRefiner)
    return AbstractMergeDateTimeRefiner;
  hasRequiredAbstractMergeDateTimeRefiner = 1;
  Object.defineProperty(AbstractMergeDateTimeRefiner, "__esModule", { value: true });
  const abstractRefiners_12 = abstractRefiners;
  const mergingCalculation_1 = requireMergingCalculation();
  class AbstractMergeDateTimeRefiner$1 extends abstractRefiners_12.MergingRefiner {
    shouldMergeResults(textBetween, currentResult, nextResult) {
      return (currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime() || nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime()) && textBetween.match(this.patternBetween()) != null;
    }
    mergeResults(textBetween, currentResult, nextResult) {
      const result = currentResult.start.isOnlyDate() ? mergingCalculation_1.mergeDateTimeResult(currentResult, nextResult) : mergingCalculation_1.mergeDateTimeResult(nextResult, currentResult);
      result.index = currentResult.index;
      result.text = currentResult.text + textBetween + nextResult.text;
      return result;
    }
  }
  AbstractMergeDateTimeRefiner.default = AbstractMergeDateTimeRefiner$1;
  return AbstractMergeDateTimeRefiner;
}
var hasRequiredENMergeDateTimeRefiner;
function requireENMergeDateTimeRefiner() {
  if (hasRequiredENMergeDateTimeRefiner)
    return ENMergeDateTimeRefiner;
  hasRequiredENMergeDateTimeRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(ENMergeDateTimeRefiner, "__esModule", { value: true });
  const AbstractMergeDateTimeRefiner_1 = __importDefault2(requireAbstractMergeDateTimeRefiner());
  class ENMergeDateTimeRefiner$1 extends AbstractMergeDateTimeRefiner_1.default {
    patternBetween() {
      return new RegExp("^\\s*(T|at|after|before|on|of|,|-)?\\s*$");
    }
  }
  ENMergeDateTimeRefiner.default = ENMergeDateTimeRefiner$1;
  return ENMergeDateTimeRefiner;
}
var configurations = {};
var ExtractTimezoneAbbrRefiner$1 = {};
Object.defineProperty(ExtractTimezoneAbbrRefiner$1, "__esModule", { value: true });
const TIMEZONE_NAME_PATTERN = new RegExp("^\\s*,?\\s*\\(?([A-Z]{2,4})\\)?(?=\\W|$)", "i");
const DEFAULT_TIMEZONE_ABBR_MAP = {
  ACDT: 630,
  ACST: 570,
  ADT: -180,
  AEDT: 660,
  AEST: 600,
  AFT: 270,
  AKDT: -480,
  AKST: -540,
  ALMT: 360,
  AMST: -180,
  AMT: -240,
  ANAST: 720,
  ANAT: 720,
  AQTT: 300,
  ART: -180,
  AST: -240,
  AWDT: 540,
  AWST: 480,
  AZOST: 0,
  AZOT: -60,
  AZST: 300,
  AZT: 240,
  BNT: 480,
  BOT: -240,
  BRST: -120,
  BRT: -180,
  BST: 60,
  BTT: 360,
  CAST: 480,
  CAT: 120,
  CCT: 390,
  CDT: -300,
  CEST: 120,
  CET: 60,
  CHADT: 825,
  CHAST: 765,
  CKT: -600,
  CLST: -180,
  CLT: -240,
  COT: -300,
  CST: -360,
  CVT: -60,
  CXT: 420,
  ChST: 600,
  DAVT: 420,
  EASST: -300,
  EAST: -360,
  EAT: 180,
  ECT: -300,
  EDT: -240,
  EEST: 180,
  EET: 120,
  EGST: 0,
  EGT: -60,
  EST: -300,
  ET: -300,
  FJST: 780,
  FJT: 720,
  FKST: -180,
  FKT: -240,
  FNT: -120,
  GALT: -360,
  GAMT: -540,
  GET: 240,
  GFT: -180,
  GILT: 720,
  GMT: 0,
  GST: 240,
  GYT: -240,
  HAA: -180,
  HAC: -300,
  HADT: -540,
  HAE: -240,
  HAP: -420,
  HAR: -360,
  HAST: -600,
  HAT: -90,
  HAY: -480,
  HKT: 480,
  HLV: -210,
  HNA: -240,
  HNC: -360,
  HNE: -300,
  HNP: -480,
  HNR: -420,
  HNT: -150,
  HNY: -540,
  HOVT: 420,
  ICT: 420,
  IDT: 180,
  IOT: 360,
  IRDT: 270,
  IRKST: 540,
  IRKT: 540,
  IRST: 210,
  IST: 330,
  JST: 540,
  KGT: 360,
  KRAST: 480,
  KRAT: 480,
  KST: 540,
  KUYT: 240,
  LHDT: 660,
  LHST: 630,
  LINT: 840,
  MAGST: 720,
  MAGT: 720,
  MART: -510,
  MAWT: 300,
  MDT: -360,
  MESZ: 120,
  MEZ: 60,
  MHT: 720,
  MMT: 390,
  MSD: 240,
  MSK: 240,
  MST: -420,
  MUT: 240,
  MVT: 300,
  MYT: 480,
  NCT: 660,
  NDT: -90,
  NFT: 690,
  NOVST: 420,
  NOVT: 360,
  NPT: 345,
  NST: -150,
  NUT: -660,
  NZDT: 780,
  NZST: 720,
  OMSST: 420,
  OMST: 420,
  PDT: -420,
  PET: -300,
  PETST: 720,
  PETT: 720,
  PGT: 600,
  PHOT: 780,
  PHT: 480,
  PKT: 300,
  PMDT: -120,
  PMST: -180,
  PONT: 660,
  PST: -480,
  PT: -480,
  PWT: 540,
  PYST: -180,
  PYT: -240,
  RET: 240,
  SAMT: 240,
  SAST: 120,
  SBT: 660,
  SCT: 240,
  SGT: 480,
  SRT: -180,
  SST: -660,
  TAHT: -600,
  TFT: 300,
  TJT: 300,
  TKT: 780,
  TLT: 540,
  TMT: 300,
  TVT: 720,
  ULAT: 480,
  UTC: 0,
  UYST: -120,
  UYT: -180,
  UZT: 300,
  VET: -210,
  VLAST: 660,
  VLAT: 660,
  VUT: 660,
  WAST: 120,
  WAT: 60,
  WEST: 60,
  WESZ: 60,
  WET: 0,
  WEZ: 0,
  WFT: 720,
  WGST: -120,
  WGT: -180,
  WIB: 420,
  WIT: 540,
  WITA: 480,
  WST: 780,
  WT: 0,
  YAKST: 600,
  YAKT: 600,
  YAPT: 600,
  YEKST: 360,
  YEKT: 360
};
class ExtractTimezoneAbbrRefiner {
  constructor(timezoneOverrides) {
    this.timezone = Object.assign(Object.assign({}, DEFAULT_TIMEZONE_ABBR_MAP), timezoneOverrides);
  }
  refine(context, results2) {
    var _a;
    const timezoneOverrides = (_a = context.option.timezones) !== null && _a !== void 0 ? _a : {};
    results2.forEach((result) => {
      var _a2, _b;
      const suffix = context.text.substring(result.index + result.text.length);
      const match2 = TIMEZONE_NAME_PATTERN.exec(suffix);
      if (!match2) {
        return;
      }
      const timezoneAbbr = match2[1].toUpperCase();
      const extractedTimezoneOffset = (_b = (_a2 = timezoneOverrides[timezoneAbbr]) !== null && _a2 !== void 0 ? _a2 : this.timezone[timezoneAbbr]) !== null && _b !== void 0 ? _b : null;
      if (extractedTimezoneOffset === null) {
        return;
      }
      context.debug(() => {
        console.log(`Extracting timezone: '${timezoneAbbr}' into: ${extractedTimezoneOffset} for: ${result.start}`);
      });
      const currentTimezoneOffset = result.start.get("timezoneOffset");
      if (currentTimezoneOffset !== null && extractedTimezoneOffset != currentTimezoneOffset) {
        if (result.start.isCertain("timezoneOffset")) {
          return;
        }
        if (timezoneAbbr != match2[1]) {
          return;
        }
      }
      if (result.start.isOnlyDate()) {
        if (timezoneAbbr != match2[1]) {
          return;
        }
      }
      result.text += match2[0];
      if (!result.start.isCertain("timezoneOffset")) {
        result.start.assign("timezoneOffset", extractedTimezoneOffset);
      }
      if (result.end != null && !result.end.isCertain("timezoneOffset")) {
        result.end.assign("timezoneOffset", extractedTimezoneOffset);
      }
    });
    return results2;
  }
}
ExtractTimezoneAbbrRefiner$1.default = ExtractTimezoneAbbrRefiner;
var ExtractTimezoneOffsetRefiner$1 = {};
Object.defineProperty(ExtractTimezoneOffsetRefiner$1, "__esModule", { value: true });
const TIMEZONE_OFFSET_PATTERN = new RegExp("^\\s*(?:\\(?(?:GMT|UTC)\\s?)?([+-])(\\d{1,2})(?::?(\\d{2}))?\\)?", "i");
const TIMEZONE_OFFSET_SIGN_GROUP = 1;
const TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 2;
const TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 3;
class ExtractTimezoneOffsetRefiner {
  refine(context, results2) {
    results2.forEach(function(result) {
      if (result.start.isCertain("timezoneOffset")) {
        return;
      }
      const suffix = context.text.substring(result.index + result.text.length);
      const match2 = TIMEZONE_OFFSET_PATTERN.exec(suffix);
      if (!match2) {
        return;
      }
      context.debug(() => {
        console.log(`Extracting timezone: '${match2[0]}' into : ${result}`);
      });
      const hourOffset = parseInt(match2[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);
      const minuteOffset = parseInt(match2[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP] || "0");
      let timezoneOffset = hourOffset * 60 + minuteOffset;
      if (timezoneOffset > 14 * 60) {
        return;
      }
      if (match2[TIMEZONE_OFFSET_SIGN_GROUP] === "-") {
        timezoneOffset = -timezoneOffset;
      }
      if (result.end != null) {
        result.end.assign("timezoneOffset", timezoneOffset);
      }
      result.start.assign("timezoneOffset", timezoneOffset);
      result.text += match2[0];
    });
    return results2;
  }
}
ExtractTimezoneOffsetRefiner$1.default = ExtractTimezoneOffsetRefiner;
var OverlapRemovalRefiner$1 = {};
Object.defineProperty(OverlapRemovalRefiner$1, "__esModule", { value: true });
class OverlapRemovalRefiner {
  refine(context, results2) {
    if (results2.length < 2) {
      return results2;
    }
    const filteredResults = [];
    let prevResult = results2[0];
    for (let i2 = 1; i2 < results2.length; i2++) {
      const result = results2[i2];
      if (result.index < prevResult.index + prevResult.text.length) {
        if (result.text.length > prevResult.text.length) {
          prevResult = result;
        }
      } else {
        filteredResults.push(prevResult);
        prevResult = result;
      }
    }
    if (prevResult != null) {
      filteredResults.push(prevResult);
    }
    return filteredResults;
  }
}
OverlapRemovalRefiner$1.default = OverlapRemovalRefiner;
var ForwardDateRefiner = {};
var hasRequiredForwardDateRefiner;
function requireForwardDateRefiner() {
  if (hasRequiredForwardDateRefiner)
    return ForwardDateRefiner;
  hasRequiredForwardDateRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(ForwardDateRefiner, "__esModule", { value: true });
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const dayjs_2 = requireDayjs();
  class ForwardDateRefiner$1 {
    refine(context, results2) {
      if (!context.option.forwardDate) {
        return results2;
      }
      results2.forEach(function(result) {
        let refMoment = dayjs_12.default(context.refDate);
        if (result.start.isOnlyTime() && refMoment.isAfter(result.start.dayjs())) {
          refMoment = refMoment.add(1, "day");
          dayjs_2.implySimilarDate(result.start, refMoment);
          if (result.end && result.end.isOnlyTime()) {
            dayjs_2.implySimilarDate(result.end, refMoment);
            if (result.start.dayjs().isAfter(result.end.dayjs())) {
              refMoment = refMoment.add(1, "day");
              dayjs_2.implySimilarDate(result.end, refMoment);
            }
          }
        }
        if (result.start.isOnlyDayMonthComponent() && refMoment.isAfter(result.start.dayjs())) {
          for (let i2 = 0; i2 < 3 && refMoment.isAfter(result.start.dayjs()); i2++) {
            result.start.imply("year", result.start.get("year") + 1);
            context.debug(() => {
              console.log(`Forward yearly adjusted for ${result} (${result.start})`);
            });
            if (result.end && !result.end.isCertain("year")) {
              result.end.imply("year", result.end.get("year") + 1);
              context.debug(() => {
                console.log(`Forward yearly adjusted for ${result} (${result.end})`);
              });
            }
          }
        }
        if (result.start.isOnlyWeekdayComponent() && refMoment.isAfter(result.start.dayjs())) {
          if (refMoment.day() >= result.start.get("weekday")) {
            refMoment = refMoment.day(result.start.get("weekday") + 7);
          } else {
            refMoment = refMoment.day(result.start.get("weekday"));
          }
          result.start.imply("day", refMoment.date());
          result.start.imply("month", refMoment.month() + 1);
          result.start.imply("year", refMoment.year());
          context.debug(() => {
            console.log(`Forward weekly adjusted for ${result} (${result.start})`);
          });
          if (result.end && result.end.isOnlyWeekdayComponent()) {
            if (refMoment.day() > result.end.get("weekday")) {
              refMoment = refMoment.day(result.end.get("weekday") + 7);
            } else {
              refMoment = refMoment.day(result.end.get("weekday"));
            }
            result.end.imply("day", refMoment.date());
            result.end.imply("month", refMoment.month() + 1);
            result.end.imply("year", refMoment.year());
            context.debug(() => {
              console.log(`Forward weekly adjusted for ${result} (${result.end})`);
            });
          }
        }
      });
      return results2;
    }
  }
  ForwardDateRefiner.default = ForwardDateRefiner$1;
  return ForwardDateRefiner;
}
var UnlikelyFormatFilter$1 = {};
Object.defineProperty(UnlikelyFormatFilter$1, "__esModule", { value: true });
const abstractRefiners_1$1 = abstractRefiners;
class UnlikelyFormatFilter extends abstractRefiners_1$1.Filter {
  constructor(strictMode) {
    super();
    this.strictMode = strictMode;
  }
  isValid(context, result) {
    if (result.text.replace(" ", "").match(/^\d*(\.\d*)?$/)) {
      context.debug(() => {
        console.log(`Removing unlikely result '${result.text}'`);
      });
      return false;
    }
    if (!result.start.isValidDate()) {
      context.debug(() => {
        console.log(`Removing invalid result: ${result} (${result.start})`);
      });
      return false;
    }
    if (result.end && !result.end.isValidDate()) {
      context.debug(() => {
        console.log(`Removing invalid result: ${result} (${result.end})`);
      });
      return false;
    }
    if (this.strictMode) {
      return this.isStrictModeValid(context, result);
    }
    return true;
  }
  isStrictModeValid(context, result) {
    if (result.start.isOnlyWeekdayComponent()) {
      context.debug(() => {
        console.log(`(Strict) Removing weekday only component: ${result} (${result.end})`);
      });
      return false;
    }
    if (result.start.isOnlyTime() && (!result.start.isCertain("hour") || !result.start.isCertain("minute"))) {
      context.debug(() => {
        console.log(`(Strict) Removing uncertain time component: ${result} (${result.end})`);
      });
      return false;
    }
    return true;
  }
}
UnlikelyFormatFilter$1.default = UnlikelyFormatFilter;
var ISOFormatParser$1 = {};
Object.defineProperty(ISOFormatParser$1, "__esModule", { value: true });
const AbstractParserWithWordBoundary_1$l = AbstractParserWithWordBoundary;
const PATTERN$h = new RegExp("([0-9]{4})\\-([0-9]{1,2})\\-([0-9]{1,2})(?:T([0-9]{1,2}):([0-9]{1,2})(?::([0-9]{1,2})(?:\\.(\\d{1,4}))?)?(?:Z|([+-]\\d{2}):?(\\d{2})?)?)?(?=\\W|$)", "i");
const YEAR_NUMBER_GROUP$2 = 1;
const MONTH_NUMBER_GROUP$1 = 2;
const DATE_NUMBER_GROUP$1 = 3;
const HOUR_NUMBER_GROUP = 4;
const MINUTE_NUMBER_GROUP = 5;
const SECOND_NUMBER_GROUP = 6;
const MILLISECOND_NUMBER_GROUP = 7;
const TZD_HOUR_OFFSET_GROUP = 8;
const TZD_MINUTE_OFFSET_GROUP = 9;
class ISOFormatParser extends AbstractParserWithWordBoundary_1$l.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$h;
  }
  innerExtract(context, match2) {
    const components = {};
    components["year"] = parseInt(match2[YEAR_NUMBER_GROUP$2]);
    components["month"] = parseInt(match2[MONTH_NUMBER_GROUP$1]);
    components["day"] = parseInt(match2[DATE_NUMBER_GROUP$1]);
    if (match2[HOUR_NUMBER_GROUP] != null) {
      components["hour"] = parseInt(match2[HOUR_NUMBER_GROUP]);
      components["minute"] = parseInt(match2[MINUTE_NUMBER_GROUP]);
      if (match2[SECOND_NUMBER_GROUP] != null) {
        components["second"] = parseInt(match2[SECOND_NUMBER_GROUP]);
      }
      if (match2[MILLISECOND_NUMBER_GROUP] != null) {
        components["millisecond"] = parseInt(match2[MILLISECOND_NUMBER_GROUP]);
      }
      if (match2[TZD_HOUR_OFFSET_GROUP] == null) {
        components["timezoneOffset"] = 0;
      } else {
        const hourOffset = parseInt(match2[TZD_HOUR_OFFSET_GROUP]);
        let minuteOffset = 0;
        if (match2[TZD_MINUTE_OFFSET_GROUP] != null) {
          minuteOffset = parseInt(match2[TZD_MINUTE_OFFSET_GROUP]);
        }
        let offset2 = hourOffset * 60;
        if (offset2 < 0) {
          offset2 -= minuteOffset;
        } else {
          offset2 += minuteOffset;
        }
        components["timezoneOffset"] = offset2;
      }
    }
    return components;
  }
}
ISOFormatParser$1.default = ISOFormatParser;
var MergeWeekdayComponentRefiner$1 = {};
Object.defineProperty(MergeWeekdayComponentRefiner$1, "__esModule", { value: true });
const abstractRefiners_1 = abstractRefiners;
class MergeWeekdayComponentRefiner extends abstractRefiners_1.MergingRefiner {
  mergeResults(textBetween, currentResult, nextResult) {
    const newResult = nextResult.clone();
    newResult.index = currentResult.index;
    newResult.text = currentResult.text + textBetween + newResult.text;
    newResult.start.assign("weekday", currentResult.start.get("weekday"));
    if (newResult.end) {
      newResult.end.assign("weekday", currentResult.start.get("weekday"));
    }
    return newResult;
  }
  shouldMergeResults(textBetween, currentResult, nextResult) {
    const weekdayThenNormalDate = currentResult.start.isOnlyWeekdayComponent() && !currentResult.start.isCertain("hour") && nextResult.start.isCertain("day");
    return weekdayThenNormalDate && textBetween.match(/^,?\s*$/) != null;
  }
}
MergeWeekdayComponentRefiner$1.default = MergeWeekdayComponentRefiner;
var hasRequiredConfigurations;
function requireConfigurations() {
  if (hasRequiredConfigurations)
    return configurations;
  hasRequiredConfigurations = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(configurations, "__esModule", { value: true });
  configurations.includeCommonConfiguration = void 0;
  const ExtractTimezoneAbbrRefiner_1 = __importDefault2(ExtractTimezoneAbbrRefiner$1);
  const ExtractTimezoneOffsetRefiner_1 = __importDefault2(ExtractTimezoneOffsetRefiner$1);
  const OverlapRemovalRefiner_1 = __importDefault2(OverlapRemovalRefiner$1);
  const ForwardDateRefiner_1 = __importDefault2(requireForwardDateRefiner());
  const UnlikelyFormatFilter_1 = __importDefault2(UnlikelyFormatFilter$1);
  const ISOFormatParser_1 = __importDefault2(ISOFormatParser$1);
  const MergeWeekdayComponentRefiner_1 = __importDefault2(MergeWeekdayComponentRefiner$1);
  function includeCommonConfiguration(configuration, strictMode = false) {
    configuration.parsers.unshift(new ISOFormatParser_1.default());
    configuration.refiners.unshift(new MergeWeekdayComponentRefiner_1.default());
    configuration.refiners.unshift(new ExtractTimezoneAbbrRefiner_1.default());
    configuration.refiners.unshift(new ExtractTimezoneOffsetRefiner_1.default());
    configuration.refiners.unshift(new OverlapRemovalRefiner_1.default());
    configuration.refiners.push(new OverlapRemovalRefiner_1.default());
    configuration.refiners.push(new ForwardDateRefiner_1.default());
    configuration.refiners.push(new UnlikelyFormatFilter_1.default(strictMode));
    return configuration;
  }
  configurations.includeCommonConfiguration = includeCommonConfiguration;
  return configurations;
}
var ENCasualDateParser = {};
var casualReferences = {};
var hasRequiredCasualReferences;
function requireCasualReferences() {
  if (hasRequiredCasualReferences)
    return casualReferences;
  hasRequiredCasualReferences = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(casualReferences, "__esModule", { value: true });
  casualReferences.noon = casualReferences.morning = casualReferences.midnight = casualReferences.yesterdayEvening = casualReferences.evening = casualReferences.lastNight = casualReferences.tonight = casualReferences.theDayAfter = casualReferences.tomorrow = casualReferences.theDayBefore = casualReferences.yesterday = casualReferences.today = casualReferences.now = void 0;
  const results_1 = requireResults();
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const dayjs_2 = requireDayjs();
  const index_1 = requireDist();
  function now(reference2) {
    const targetDate = dayjs_12.default(reference2.instant);
    const component = new results_1.ParsingComponents(reference2, {});
    dayjs_2.assignSimilarDate(component, targetDate);
    dayjs_2.assignSimilarTime(component, targetDate);
    if (reference2.timezoneOffset !== null) {
      component.assign("timezoneOffset", targetDate.utcOffset());
    }
    return component;
  }
  casualReferences.now = now;
  function today(reference2) {
    const targetDate = dayjs_12.default(reference2.instant);
    const component = new results_1.ParsingComponents(reference2, {});
    dayjs_2.assignSimilarDate(component, targetDate);
    dayjs_2.implySimilarTime(component, targetDate);
    return component;
  }
  casualReferences.today = today;
  function yesterday(reference2) {
    return theDayBefore(reference2, 1);
  }
  casualReferences.yesterday = yesterday;
  function theDayBefore(reference2, numDay) {
    return theDayAfter(reference2, -numDay);
  }
  casualReferences.theDayBefore = theDayBefore;
  function tomorrow(reference2) {
    return theDayAfter(reference2, 1);
  }
  casualReferences.tomorrow = tomorrow;
  function theDayAfter(reference2, nDays) {
    let targetDate = dayjs_12.default(reference2.instant);
    const component = new results_1.ParsingComponents(reference2, {});
    targetDate = targetDate.add(nDays, "day");
    dayjs_2.assignSimilarDate(component, targetDate);
    dayjs_2.implySimilarTime(component, targetDate);
    return component;
  }
  casualReferences.theDayAfter = theDayAfter;
  function tonight(reference2, implyHour = 22) {
    const targetDate = dayjs_12.default(reference2.instant);
    const component = new results_1.ParsingComponents(reference2, {});
    component.imply("hour", implyHour);
    component.imply("meridiem", index_1.Meridiem.PM);
    dayjs_2.assignSimilarDate(component, targetDate);
    return component;
  }
  casualReferences.tonight = tonight;
  function lastNight(reference2, implyHour = 0) {
    let targetDate = dayjs_12.default(reference2.instant);
    const component = new results_1.ParsingComponents(reference2, {});
    if (targetDate.hour() < 6) {
      targetDate = targetDate.add(-1, "day");
    }
    dayjs_2.assignSimilarDate(component, targetDate);
    component.imply("hour", implyHour);
    return component;
  }
  casualReferences.lastNight = lastNight;
  function evening(reference2, implyHour = 20) {
    const component = new results_1.ParsingComponents(reference2, {});
    component.imply("meridiem", index_1.Meridiem.PM);
    component.imply("hour", implyHour);
    return component;
  }
  casualReferences.evening = evening;
  function yesterdayEvening(reference2, implyHour = 20) {
    let targetDate = dayjs_12.default(reference2.instant);
    const component = new results_1.ParsingComponents(reference2, {});
    targetDate = targetDate.add(-1, "day");
    dayjs_2.assignSimilarDate(component, targetDate);
    component.imply("hour", implyHour);
    component.imply("meridiem", index_1.Meridiem.PM);
    return component;
  }
  casualReferences.yesterdayEvening = yesterdayEvening;
  function midnight(reference2) {
    const component = new results_1.ParsingComponents(reference2, {});
    component.imply("hour", 0);
    component.imply("minute", 0);
    component.imply("second", 0);
    return component;
  }
  casualReferences.midnight = midnight;
  function morning(reference2, implyHour = 6) {
    const component = new results_1.ParsingComponents(reference2, {});
    component.imply("meridiem", index_1.Meridiem.AM);
    component.imply("hour", implyHour);
    return component;
  }
  casualReferences.morning = morning;
  function noon(reference2) {
    const component = new results_1.ParsingComponents(reference2, {});
    component.imply("meridiem", index_1.Meridiem.AM);
    component.imply("hour", 12);
    return component;
  }
  casualReferences.noon = noon;
  return casualReferences;
}
var hasRequiredENCasualDateParser;
function requireENCasualDateParser() {
  if (hasRequiredENCasualDateParser)
    return ENCasualDateParser;
  hasRequiredENCasualDateParser = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o, k22, { enumerable: true, get: function() {
      return m3[k2];
    } });
  } : function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o[k22] = m3[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(ENCasualDateParser, "__esModule", { value: true });
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const dayjs_2 = requireDayjs();
  const references = __importStar(requireCasualReferences());
  const PATTERN2 = /(now|today|tonight|tomorrow|tmr|tmrw|yesterday|last\s*night)(?=\W|$)/i;
  class ENCasualDateParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      let targetDate = dayjs_12.default(context.refDate);
      const lowerText = match2[0].toLowerCase();
      const component = context.createParsingComponents();
      switch (lowerText) {
        case "now":
          return references.now(context.reference);
        case "today":
          return references.today(context.reference);
        case "yesterday":
          return references.yesterday(context.reference);
        case "tomorrow":
        case "tmr":
        case "tmrw":
          return references.tomorrow(context.reference);
        case "tonight":
          return references.tonight(context.reference);
        default:
          if (lowerText.match(/last\s*night/)) {
            if (targetDate.hour() > 6) {
              targetDate = targetDate.add(-1, "day");
            }
            dayjs_2.assignSimilarDate(component, targetDate);
            component.imply("hour", 0);
          }
          break;
      }
      return component;
    }
  }
  ENCasualDateParser.default = ENCasualDateParser$1;
  return ENCasualDateParser;
}
var ENCasualTimeParser = {};
var hasRequiredENCasualTimeParser;
function requireENCasualTimeParser() {
  if (hasRequiredENCasualTimeParser)
    return ENCasualTimeParser;
  hasRequiredENCasualTimeParser = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(ENCasualTimeParser, "__esModule", { value: true });
  const index_1 = requireDist();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const dayjs_2 = requireDayjs();
  const PATTERN2 = /(?:this)?\s{0,3}(morning|afternoon|evening|night|midnight|noon)(?=\W|$)/i;
  class ENCasualTimeParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const targetDate = dayjs_12.default(context.refDate);
      const component = context.createParsingComponents();
      switch (match2[1].toLowerCase()) {
        case "afternoon":
          component.imply("meridiem", index_1.Meridiem.PM);
          component.imply("hour", 15);
          break;
        case "evening":
        case "night":
          component.imply("meridiem", index_1.Meridiem.PM);
          component.imply("hour", 20);
          break;
        case "midnight":
          dayjs_2.implyTheNextDay(component, targetDate);
          component.assign("hour", 0);
          component.assign("minute", 0);
          component.assign("second", 0);
          break;
        case "morning":
          component.imply("meridiem", index_1.Meridiem.AM);
          component.imply("hour", 6);
          break;
        case "noon":
          component.imply("meridiem", index_1.Meridiem.AM);
          component.imply("hour", 12);
          break;
      }
      return component;
    }
  }
  ENCasualTimeParser.default = ENCasualTimeParser$1;
  return ENCasualTimeParser;
}
var ENWeekdayParser = {};
var weekdays = {};
var hasRequiredWeekdays;
function requireWeekdays() {
  if (hasRequiredWeekdays)
    return weekdays;
  hasRequiredWeekdays = 1;
  Object.defineProperty(weekdays, "__esModule", { value: true });
  weekdays.getBackwardDaysToWeekday = weekdays.getDaysForwardToWeekday = weekdays.getDaysToWeekdayClosest = weekdays.getDaysToWeekday = weekdays.createParsingComponentsAtWeekday = void 0;
  const index_1 = requireDist();
  const results_1 = requireResults();
  const timeunits_1 = timeunits;
  function createParsingComponentsAtWeekday(reference2, weekday, modifier) {
    const refDate = reference2.getDateWithAdjustedTimezone();
    const daysToWeekday = getDaysToWeekday(refDate, weekday, modifier);
    let components = new results_1.ParsingComponents(reference2);
    components = timeunits_1.addImpliedTimeUnits(components, { "day": daysToWeekday });
    components.assign("weekday", weekday);
    return components;
  }
  weekdays.createParsingComponentsAtWeekday = createParsingComponentsAtWeekday;
  function getDaysToWeekday(refDate, weekday, modifier) {
    const refWeekday = refDate.getDay();
    switch (modifier) {
      case "this":
        return getDaysForwardToWeekday(refDate, weekday);
      case "last":
        return getBackwardDaysToWeekday(refDate, weekday);
      case "next":
        if (refWeekday == index_1.Weekday.SUNDAY) {
          return weekday == index_1.Weekday.SUNDAY ? 7 : weekday;
        }
        if (refWeekday == index_1.Weekday.SATURDAY) {
          if (weekday == index_1.Weekday.SATURDAY)
            return 7;
          if (weekday == index_1.Weekday.SUNDAY)
            return 8;
          return 1 + weekday;
        }
        if (weekday < refWeekday && weekday != index_1.Weekday.SUNDAY) {
          return getDaysForwardToWeekday(refDate, weekday);
        } else {
          return getDaysForwardToWeekday(refDate, weekday) + 7;
        }
    }
    return getDaysToWeekdayClosest(refDate, weekday);
  }
  weekdays.getDaysToWeekday = getDaysToWeekday;
  function getDaysToWeekdayClosest(refDate, weekday) {
    const backward = getBackwardDaysToWeekday(refDate, weekday);
    const forward = getDaysForwardToWeekday(refDate, weekday);
    return forward < -backward ? forward : backward;
  }
  weekdays.getDaysToWeekdayClosest = getDaysToWeekdayClosest;
  function getDaysForwardToWeekday(refDate, weekday) {
    const refWeekday = refDate.getDay();
    let forwardCount = weekday - refWeekday;
    if (forwardCount < 0) {
      forwardCount += 7;
    }
    return forwardCount;
  }
  weekdays.getDaysForwardToWeekday = getDaysForwardToWeekday;
  function getBackwardDaysToWeekday(refDate, weekday) {
    const refWeekday = refDate.getDay();
    let backwardCount = weekday - refWeekday;
    if (backwardCount >= 0) {
      backwardCount -= 7;
    }
    return backwardCount;
  }
  weekdays.getBackwardDaysToWeekday = getBackwardDaysToWeekday;
  return weekdays;
}
var hasRequiredENWeekdayParser;
function requireENWeekdayParser() {
  if (hasRequiredENWeekdayParser)
    return ENWeekdayParser;
  hasRequiredENWeekdayParser = 1;
  Object.defineProperty(ENWeekdayParser, "__esModule", { value: true });
  const constants_12 = constants$8;
  const pattern_12 = pattern;
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const weekdays_1 = requireWeekdays();
  const PATTERN2 = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:on\\s*?)?(?:(this|last|past|next)\\s*)?(${pattern_12.matchAnyPattern(constants_12.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\\uFF09))?(?:\\s*(this|last|past|next)\\s*week)?(?=\\W|$)`, "i");
  const PREFIX_GROUP2 = 1;
  const WEEKDAY_GROUP = 2;
  const POSTFIX_GROUP = 3;
  class ENWeekdayParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const dayOfWeek = match2[WEEKDAY_GROUP].toLowerCase();
      const weekday = constants_12.WEEKDAY_DICTIONARY[dayOfWeek];
      const prefix = match2[PREFIX_GROUP2];
      const postfix = match2[POSTFIX_GROUP];
      let modifierWord = prefix || postfix;
      modifierWord = modifierWord || "";
      modifierWord = modifierWord.toLowerCase();
      let modifier = null;
      if (modifierWord == "last" || modifierWord == "past") {
        modifier = "last";
      } else if (modifierWord == "next") {
        modifier = "next";
      } else if (modifierWord == "this") {
        modifier = "this";
      }
      return weekdays_1.createParsingComponentsAtWeekday(context.reference, weekday, modifier);
    }
  }
  ENWeekdayParser.default = ENWeekdayParser$1;
  return ENWeekdayParser;
}
var ENRelativeDateFormatParser = {};
var hasRequiredENRelativeDateFormatParser;
function requireENRelativeDateFormatParser() {
  if (hasRequiredENRelativeDateFormatParser)
    return ENRelativeDateFormatParser;
  hasRequiredENRelativeDateFormatParser = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(ENRelativeDateFormatParser, "__esModule", { value: true });
  const constants_12 = constants$8;
  const results_1 = requireResults();
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const pattern_12 = pattern;
  const PATTERN2 = new RegExp(`(this|last|past|next|after\\s*this)\\s*(${pattern_12.matchAnyPattern(constants_12.TIME_UNIT_DICTIONARY)})(?=\\s*)(?=\\W|$)`, "i");
  const MODIFIER_WORD_GROUP = 1;
  const RELATIVE_WORD_GROUP = 2;
  class ENRelativeDateFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const modifier = match2[MODIFIER_WORD_GROUP].toLowerCase();
      const unitWord = match2[RELATIVE_WORD_GROUP].toLowerCase();
      const timeunit = constants_12.TIME_UNIT_DICTIONARY[unitWord];
      if (modifier == "next" || modifier.startsWith("after")) {
        const timeUnits = {};
        timeUnits[timeunit] = 1;
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
      if (modifier == "last" || modifier == "past") {
        const timeUnits = {};
        timeUnits[timeunit] = -1;
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
      const components = context.createParsingComponents();
      let date = dayjs_12.default(context.reference.instant);
      if (unitWord.match(/week/i)) {
        date = date.add(-date.get("d"), "d");
        components.imply("day", date.date());
        components.imply("month", date.month() + 1);
        components.imply("year", date.year());
      } else if (unitWord.match(/month/i)) {
        date = date.add(-date.date() + 1, "d");
        components.imply("day", date.date());
        components.assign("year", date.year());
        components.assign("month", date.month() + 1);
      } else if (unitWord.match(/year/i)) {
        date = date.add(-date.date() + 1, "d");
        date = date.add(-date.month(), "month");
        components.imply("day", date.date());
        components.imply("month", date.month() + 1);
        components.assign("year", date.year());
      }
      return components;
    }
  }
  ENRelativeDateFormatParser.default = ENRelativeDateFormatParser$1;
  return ENRelativeDateFormatParser;
}
var chrono = {};
var hasRequiredChrono;
function requireChrono() {
  if (hasRequiredChrono)
    return chrono;
  hasRequiredChrono = 1;
  Object.defineProperty(chrono, "__esModule", { value: true });
  chrono.ParsingContext = chrono.Chrono = void 0;
  const results_1 = requireResults();
  const en_1 = requireEn();
  class Chrono {
    constructor(configuration) {
      configuration = configuration || en_1.createCasualConfiguration();
      this.parsers = [...configuration.parsers];
      this.refiners = [...configuration.refiners];
    }
    clone() {
      return new Chrono({
        parsers: [...this.parsers],
        refiners: [...this.refiners]
      });
    }
    parseDate(text2, referenceDate, option) {
      const results2 = this.parse(text2, referenceDate, option);
      return results2.length > 0 ? results2[0].start.date() : null;
    }
    parse(text2, referenceDate, option) {
      const context = new ParsingContext(text2, referenceDate, option);
      let results2 = [];
      this.parsers.forEach((parser) => {
        const parsedResults = Chrono.executeParser(context, parser);
        results2 = results2.concat(parsedResults);
      });
      results2.sort((a3, b2) => {
        return a3.index - b2.index;
      });
      this.refiners.forEach(function(refiner) {
        results2 = refiner.refine(context, results2);
      });
      return results2;
    }
    static executeParser(context, parser) {
      const results2 = [];
      const pattern2 = parser.pattern(context);
      const originalText = context.text;
      let remainingText = context.text;
      let match2 = pattern2.exec(remainingText);
      while (match2) {
        const index = match2.index + originalText.length - remainingText.length;
        match2.index = index;
        const result = parser.extract(context, match2);
        if (!result) {
          remainingText = originalText.substring(match2.index + 1);
          match2 = pattern2.exec(remainingText);
          continue;
        }
        let parsedResult = null;
        if (result instanceof results_1.ParsingResult) {
          parsedResult = result;
        } else if (result instanceof results_1.ParsingComponents) {
          parsedResult = context.createParsingResult(match2.index, match2[0]);
          parsedResult.start = result;
        } else {
          parsedResult = context.createParsingResult(match2.index, match2[0], result);
        }
        context.debug(() => console.log(`${parser.constructor.name} extracted result ${parsedResult}`));
        results2.push(parsedResult);
        remainingText = originalText.substring(index + parsedResult.text.length);
        match2 = pattern2.exec(remainingText);
      }
      return results2;
    }
  }
  chrono.Chrono = Chrono;
  class ParsingContext {
    constructor(text2, refDate, option) {
      this.text = text2;
      this.reference = new results_1.ReferenceWithTimezone(refDate);
      this.option = option !== null && option !== void 0 ? option : {};
      this.refDate = this.reference.instant;
    }
    createParsingComponents(components) {
      if (components instanceof results_1.ParsingComponents) {
        return components;
      }
      return new results_1.ParsingComponents(this.reference, components);
    }
    createParsingResult(index, textOrEndIndex, startComponents, endComponents) {
      const text2 = typeof textOrEndIndex === "string" ? textOrEndIndex : this.text.substring(index, textOrEndIndex);
      const start2 = startComponents ? this.createParsingComponents(startComponents) : null;
      const end2 = endComponents ? this.createParsingComponents(endComponents) : null;
      return new results_1.ParsingResult(this.reference, index, text2, start2, end2);
    }
    debug(block) {
      if (this.option.debug) {
        if (this.option.debug instanceof Function) {
          this.option.debug(block);
        } else {
          const handler = this.option.debug;
          handler.debug(block);
        }
      }
    }
  }
  chrono.ParsingContext = ParsingContext;
  return chrono;
}
var SlashDateFormatParser$1 = {};
Object.defineProperty(SlashDateFormatParser$1, "__esModule", { value: true });
const years_1$8 = years;
const PATTERN$g = new RegExp("([^\\d]|^)([0-3]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})(?:[\\/\\.\\-]([0-9]{4}|[0-9]{2}))?(\\W|$)", "i");
const OPENING_GROUP = 1;
const ENDING_GROUP = 5;
const FIRST_NUMBERS_GROUP = 2;
const SECOND_NUMBERS_GROUP = 3;
const YEAR_GROUP$a = 4;
class SlashDateFormatParser {
  constructor(littleEndian) {
    this.groupNumberMonth = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;
    this.groupNumberDay = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;
  }
  pattern() {
    return PATTERN$g;
  }
  extract(context, match2) {
    if (match2[OPENING_GROUP].length == 0 && match2.index > 0 && match2.index < context.text.length) {
      const previousChar = context.text[match2.index - 1];
      if (previousChar >= "0" && previousChar <= "9") {
        return;
      }
    }
    const index = match2.index + match2[OPENING_GROUP].length;
    const text2 = match2[0].substr(match2[OPENING_GROUP].length, match2[0].length - match2[OPENING_GROUP].length - match2[ENDING_GROUP].length);
    if (text2.match(/^\d\.\d$/) || text2.match(/^\d\.\d{1,2}\.\d{1,2}\s*$/)) {
      return;
    }
    if (!match2[YEAR_GROUP$a] && match2[0].indexOf("/") < 0) {
      return;
    }
    const result = context.createParsingResult(index, text2);
    let month = parseInt(match2[this.groupNumberMonth]);
    let day = parseInt(match2[this.groupNumberDay]);
    if (month < 1 || month > 12) {
      if (month > 12) {
        if (day >= 1 && day <= 12 && month <= 31) {
          [day, month] = [month, day];
        } else {
          return null;
        }
      }
    }
    if (day < 1 || day > 31) {
      return null;
    }
    result.start.assign("day", day);
    result.start.assign("month", month);
    if (match2[YEAR_GROUP$a]) {
      const rawYearNumber = parseInt(match2[YEAR_GROUP$a]);
      const year = years_1$8.findMostLikelyADYear(rawYearNumber);
      result.start.assign("year", year);
    } else {
      const year = years_1$8.findYearClosestToRef(context.refDate, day, month);
      result.start.imply("year", year);
    }
    return result;
  }
}
SlashDateFormatParser$1.default = SlashDateFormatParser;
var ENTimeUnitCasualRelativeFormatParser = {};
var hasRequiredENTimeUnitCasualRelativeFormatParser;
function requireENTimeUnitCasualRelativeFormatParser() {
  if (hasRequiredENTimeUnitCasualRelativeFormatParser)
    return ENTimeUnitCasualRelativeFormatParser;
  hasRequiredENTimeUnitCasualRelativeFormatParser = 1;
  Object.defineProperty(ENTimeUnitCasualRelativeFormatParser, "__esModule", { value: true });
  const constants_12 = constants$8;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  const PATTERN2 = new RegExp(`(this|last|past|next|after|\\+|-)\\s*(${constants_12.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
  class ENTimeUnitCasualRelativeFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const prefix = match2[1].toLowerCase();
      let timeUnits = constants_12.parseTimeUnits(match2[2]);
      switch (prefix) {
        case "last":
        case "past":
        case "-":
          timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
          break;
      }
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  ENTimeUnitCasualRelativeFormatParser.default = ENTimeUnitCasualRelativeFormatParser$1;
  return ENTimeUnitCasualRelativeFormatParser;
}
var ENMergeRelativeDateRefiner = {};
var hasRequiredENMergeRelativeDateRefiner;
function requireENMergeRelativeDateRefiner() {
  if (hasRequiredENMergeRelativeDateRefiner)
    return ENMergeRelativeDateRefiner;
  hasRequiredENMergeRelativeDateRefiner = 1;
  Object.defineProperty(ENMergeRelativeDateRefiner, "__esModule", { value: true });
  const abstractRefiners_12 = abstractRefiners;
  const results_1 = requireResults();
  const constants_12 = constants$8;
  const timeunits_1 = timeunits;
  function hasImpliedEarlierReferenceDate(result) {
    return result.text.match(/\s+(before|from)$/i) != null;
  }
  function hasImpliedLaterReferenceDate(result) {
    return result.text.match(/\s+(after|since)$/i) != null;
  }
  class ENMergeRelativeDateRefiner$1 extends abstractRefiners_12.MergingRefiner {
    patternBetween() {
      return /^\s*$/i;
    }
    shouldMergeResults(textBetween, currentResult, nextResult) {
      if (!textBetween.match(this.patternBetween())) {
        return false;
      }
      if (!hasImpliedEarlierReferenceDate(currentResult) && !hasImpliedLaterReferenceDate(currentResult)) {
        return false;
      }
      return !!nextResult.start.get("day") && !!nextResult.start.get("month") && !!nextResult.start.get("year");
    }
    mergeResults(textBetween, currentResult, nextResult) {
      let timeUnits = constants_12.parseTimeUnits(currentResult.text);
      if (hasImpliedEarlierReferenceDate(currentResult)) {
        timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
      }
      const components = results_1.ParsingComponents.createRelativeFromReference(new results_1.ReferenceWithTimezone(nextResult.start.date()), timeUnits);
      return new results_1.ParsingResult(nextResult.reference, currentResult.index, `${currentResult.text}${textBetween}${nextResult.text}`, components);
    }
  }
  ENMergeRelativeDateRefiner.default = ENMergeRelativeDateRefiner$1;
  return ENMergeRelativeDateRefiner;
}
var hasRequiredEn;
function requireEn() {
  if (hasRequiredEn)
    return en;
  hasRequiredEn = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.GB = exports2.strict = exports2.casual = void 0;
    const ENTimeUnitWithinFormatParser_1 = __importDefault2(requireENTimeUnitWithinFormatParser());
    const ENMonthNameLittleEndianParser_1 = __importDefault2(ENMonthNameLittleEndianParser$1);
    const ENMonthNameMiddleEndianParser_1 = __importDefault2(ENMonthNameMiddleEndianParser$1);
    const ENMonthNameParser_1 = __importDefault2(ENMonthNameParser$1);
    const ENCasualYearMonthDayParser_1 = __importDefault2(ENCasualYearMonthDayParser$1);
    const ENSlashMonthFormatParser_1 = __importDefault2(ENSlashMonthFormatParser$1);
    const ENTimeExpressionParser_1 = __importDefault2(requireENTimeExpressionParser());
    const ENTimeUnitAgoFormatParser_1 = __importDefault2(requireENTimeUnitAgoFormatParser());
    const ENTimeUnitLaterFormatParser_1 = __importDefault2(requireENTimeUnitLaterFormatParser());
    const ENMergeDateRangeRefiner_1 = __importDefault2(ENMergeDateRangeRefiner$1);
    const ENMergeDateTimeRefiner_1 = __importDefault2(requireENMergeDateTimeRefiner());
    const configurations_1 = requireConfigurations();
    const ENCasualDateParser_1 = __importDefault2(requireENCasualDateParser());
    const ENCasualTimeParser_1 = __importDefault2(requireENCasualTimeParser());
    const ENWeekdayParser_1 = __importDefault2(requireENWeekdayParser());
    const ENRelativeDateFormatParser_1 = __importDefault2(requireENRelativeDateFormatParser());
    const chrono_1 = requireChrono();
    const SlashDateFormatParser_1 = __importDefault2(SlashDateFormatParser$1);
    const ENTimeUnitCasualRelativeFormatParser_1 = __importDefault2(requireENTimeUnitCasualRelativeFormatParser());
    const ENMergeRelativeDateRefiner_1 = __importDefault2(requireENMergeRelativeDateRefiner());
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration(false));
    exports2.strict = new chrono_1.Chrono(createConfiguration(true, false));
    exports2.GB = new chrono_1.Chrono(createConfiguration(false, true));
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration(littleEndian = false) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.unshift(new ENCasualDateParser_1.default());
      option.parsers.unshift(new ENCasualTimeParser_1.default());
      option.parsers.unshift(new ENMonthNameParser_1.default());
      option.parsers.unshift(new ENRelativeDateFormatParser_1.default());
      option.parsers.unshift(new ENTimeUnitCasualRelativeFormatParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = false) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(littleEndian),
          new ENTimeUnitWithinFormatParser_1.default(),
          new ENMonthNameLittleEndianParser_1.default(),
          new ENMonthNameMiddleEndianParser_1.default(),
          new ENWeekdayParser_1.default(),
          new ENCasualYearMonthDayParser_1.default(),
          new ENSlashMonthFormatParser_1.default(),
          new ENTimeExpressionParser_1.default(strictMode),
          new ENTimeUnitAgoFormatParser_1.default(strictMode),
          new ENTimeUnitLaterFormatParser_1.default(strictMode)
        ],
        refiners: [new ENMergeRelativeDateRefiner_1.default(), new ENMergeDateTimeRefiner_1.default(), new ENMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports2.createConfiguration = createConfiguration;
  })(en);
  return en;
}
var de = {};
var DETimeExpressionParser = {};
var hasRequiredDETimeExpressionParser;
function requireDETimeExpressionParser() {
  if (hasRequiredDETimeExpressionParser)
    return DETimeExpressionParser;
  hasRequiredDETimeExpressionParser = 1;
  Object.defineProperty(DETimeExpressionParser, "__esModule", { value: true });
  const AbstractTimeExpressionParser_1 = requireAbstractTimeExpressionParser();
  class DETimeExpressionParser$1 extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
    primaryPrefix() {
      return "(?:(?:um|von)\\s*)?";
    }
    followingPhase() {
      return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|bis)\\s*";
    }
    extractPrimaryTimeComponents(context, match2) {
      if (match2[0].match(/^\s*\d{4}\s*$/)) {
        return null;
      }
      return super.extractPrimaryTimeComponents(context, match2);
    }
  }
  DETimeExpressionParser.default = DETimeExpressionParser$1;
  return DETimeExpressionParser;
}
var DEWeekdayParser = {};
var constants$7 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.parseTimeUnits = exports2.TIME_UNITS_PATTERN = exports2.parseYear = exports2.YEAR_PATTERN = exports2.parseNumberPattern = exports2.NUMBER_PATTERN = exports2.TIME_UNIT_DICTIONARY = exports2.INTEGER_WORD_DICTIONARY = exports2.MONTH_DICTIONARY = exports2.WEEKDAY_DICTIONARY = void 0;
  const pattern_12 = pattern;
  const years_12 = years;
  exports2.WEEKDAY_DICTIONARY = {
    "sonntag": 0,
    "so": 0,
    "montag": 1,
    "mo": 1,
    "dienstag": 2,
    "di": 2,
    "mittwoch": 3,
    "mi": 3,
    "donnerstag": 4,
    "do": 4,
    "freitag": 5,
    "fr": 5,
    "samstag": 6,
    "sa": 6
  };
  exports2.MONTH_DICTIONARY = {
    "januar": 1,
    "j\xE4nner": 1,
    "janner": 1,
    "jan": 1,
    "jan.": 1,
    "februar": 2,
    "feber": 2,
    "feb": 2,
    "feb.": 2,
    "m\xE4rz": 3,
    "maerz": 3,
    "m\xE4r": 3,
    "m\xE4r.": 3,
    "mrz": 3,
    "mrz.": 3,
    "april": 4,
    "apr": 4,
    "apr.": 4,
    "mai": 5,
    "juni": 6,
    "jun": 6,
    "jun.": 6,
    "juli": 7,
    "jul": 7,
    "jul.": 7,
    "august": 8,
    "aug": 8,
    "aug.": 8,
    "september": 9,
    "sep": 9,
    "sep.": 9,
    "sept": 9,
    "sept.": 9,
    "oktober": 10,
    "okt": 10,
    "okt.": 10,
    "november": 11,
    "nov": 11,
    "nov.": 11,
    "dezember": 12,
    "dez": 12,
    "dez.": 12
  };
  exports2.INTEGER_WORD_DICTIONARY = {
    "eins": 1,
    "eine": 1,
    "einem": 1,
    "einen": 1,
    "einer": 1,
    "zwei": 2,
    "drei": 3,
    "vier": 4,
    "f\xFCnf": 5,
    "fuenf": 5,
    "sechs": 6,
    "sieben": 7,
    "acht": 8,
    "neun": 9,
    "zehn": 10,
    "elf": 11,
    "zw\xF6lf": 12,
    "zwoelf": 12
  };
  exports2.TIME_UNIT_DICTIONARY = {
    sek: "second",
    sekunde: "second",
    sekunden: "second",
    min: "minute",
    minute: "minute",
    minuten: "minute",
    h: "hour",
    std: "hour",
    stunde: "hour",
    stunden: "hour",
    tag: "d",
    tage: "d",
    tagen: "d",
    woche: "week",
    wochen: "week",
    monat: "month",
    monate: "month",
    monaten: "month",
    monats: "month",
    quartal: "quarter",
    quartals: "quarter",
    quartale: "quarter",
    quartalen: "quarter",
    a: "year",
    j: "year",
    jr: "year",
    jahr: "year",
    jahre: "year",
    jahren: "year",
    jahres: "year"
  };
  exports2.NUMBER_PATTERN = `(?:${pattern_12.matchAnyPattern(exports2.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s*an?)?|an?\\b(?:\\s*few)?|few|several|a?\\s*couple\\s*(?:of)?)`;
  function parseNumberPattern(match2) {
    const num = match2.toLowerCase();
    if (exports2.INTEGER_WORD_DICTIONARY[num] !== void 0) {
      return exports2.INTEGER_WORD_DICTIONARY[num];
    } else if (num === "a" || num === "an") {
      return 1;
    } else if (num.match(/few/)) {
      return 3;
    } else if (num.match(/half/)) {
      return 0.5;
    } else if (num.match(/couple/)) {
      return 2;
    } else if (num.match(/several/)) {
      return 7;
    }
    return parseFloat(num);
  }
  exports2.parseNumberPattern = parseNumberPattern;
  exports2.YEAR_PATTERN = `(?:[0-9]{1,4}(?:\\s*[vn]\\.?\\s*(?:C(?:hr)?|(?:u\\.?|d\\.?(?:\\s*g\\.?)?)?\\s*Z)\\.?|\\s*(?:u\\.?|d\\.?(?:\\s*g\\.)?)\\s*Z\\.?)?)`;
  function parseYear2(match2) {
    if (/v/i.test(match2)) {
      return -parseInt(match2.replace(/[^0-9]+/gi, ""));
    }
    if (/n/i.test(match2)) {
      return parseInt(match2.replace(/[^0-9]+/gi, ""));
    }
    if (/z/i.test(match2)) {
      return parseInt(match2.replace(/[^0-9]+/gi, ""));
    }
    const rawYearNumber = parseInt(match2);
    return years_12.findMostLikelyADYear(rawYearNumber);
  }
  exports2.parseYear = parseYear2;
  const SINGLE_TIME_UNIT_PATTERN = `(${exports2.NUMBER_PATTERN})\\s{0,5}(${pattern_12.matchAnyPattern(exports2.TIME_UNIT_DICTIONARY)})\\s{0,5}`;
  const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
  exports2.TIME_UNITS_PATTERN = pattern_12.repeatedTimeunitPattern("", SINGLE_TIME_UNIT_PATTERN);
  function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match2) {
      collectDateTimeFragment(fragments, match2);
      remainingText = remainingText.substring(match2[0].length);
      match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
  }
  exports2.parseTimeUnits = parseTimeUnits;
  function collectDateTimeFragment(fragments, match2) {
    const num = parseNumberPattern(match2[1]);
    const unit = exports2.TIME_UNIT_DICTIONARY[match2[2].toLowerCase()];
    fragments[unit] = num;
  }
})(constants$7);
var hasRequiredDEWeekdayParser;
function requireDEWeekdayParser() {
  if (hasRequiredDEWeekdayParser)
    return DEWeekdayParser;
  hasRequiredDEWeekdayParser = 1;
  Object.defineProperty(DEWeekdayParser, "__esModule", { value: true });
  const constants_12 = constants$7;
  const pattern_12 = pattern;
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const weekdays_1 = requireWeekdays();
  const PATTERN2 = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:a[mn]\\s*?)?(?:(diese[mn]|letzte[mn]|n(?:\xE4|ae)chste[mn])\\s*)?(${pattern_12.matchAnyPattern(constants_12.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\\uFF09))?(?:\\s*(diese|letzte|n(?:\xE4|ae)chste)\\s*woche)?(?=\\W|$)`, "i");
  const PREFIX_GROUP2 = 1;
  const SUFFIX_GROUP = 3;
  const WEEKDAY_GROUP = 2;
  class DEWeekdayParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const dayOfWeek = match2[WEEKDAY_GROUP].toLowerCase();
      const offset2 = constants_12.WEEKDAY_DICTIONARY[dayOfWeek];
      const prefix = match2[PREFIX_GROUP2];
      const postfix = match2[SUFFIX_GROUP];
      let modifierWord = prefix || postfix;
      modifierWord = modifierWord || "";
      modifierWord = modifierWord.toLowerCase();
      let modifier = null;
      if (modifierWord.match(/letzte/)) {
        modifier = "last";
      } else if (modifierWord.match(/chste/)) {
        modifier = "next";
      } else if (modifierWord.match(/diese/)) {
        modifier = "this";
      }
      return weekdays_1.createParsingComponentsAtWeekday(context.reference, offset2, modifier);
    }
  }
  DEWeekdayParser.default = DEWeekdayParser$1;
  return DEWeekdayParser;
}
var DESpecificTimeExpressionParser = {};
var hasRequiredDESpecificTimeExpressionParser;
function requireDESpecificTimeExpressionParser() {
  if (hasRequiredDESpecificTimeExpressionParser)
    return DESpecificTimeExpressionParser;
  hasRequiredDESpecificTimeExpressionParser = 1;
  Object.defineProperty(DESpecificTimeExpressionParser, "__esModule", { value: true });
  const index_1 = requireDist();
  const FIRST_REG_PATTERN2 = new RegExp("(^|\\s|T)(?:(?:um|von)\\s*)?(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s)?)?(?:\\s*Uhr)?(?:\\s*(morgens|vormittags|nachmittags|abends|nachts|am\\s+(?:Morgen|Vormittag|Nachmittag|Abend)|in\\s+der\\s+Nacht))?(?=\\W|$)", "i");
  const SECOND_REG_PATTERN2 = new RegExp("^\\s*(\\-|\\\u2013|\\~|\\\u301C|bis(?:\\s+um)?|\\?)\\s*(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s)?)?(?:\\s*Uhr)?(?:\\s*(morgens|vormittags|nachmittags|abends|nachts|am\\s+(?:Morgen|Vormittag|Nachmittag|Abend)|in\\s+der\\s+Nacht))?(?=\\W|$)", "i");
  const HOUR_GROUP2 = 2;
  const MINUTE_GROUP2 = 3;
  const SECOND_GROUP2 = 4;
  const AM_PM_HOUR_GROUP2 = 5;
  class DESpecificTimeExpressionParser$1 {
    pattern(context) {
      return FIRST_REG_PATTERN2;
    }
    extract(context, match2) {
      const result = context.createParsingResult(match2.index + match2[1].length, match2[0].substring(match2[1].length));
      if (result.text.match(/^\d{4}$/)) {
        match2.index += match2[0].length;
        return null;
      }
      result.start = DESpecificTimeExpressionParser$1.extractTimeComponent(result.start.clone(), match2);
      if (!result.start) {
        match2.index += match2[0].length;
        return null;
      }
      const remainingText = context.text.substring(match2.index + match2[0].length);
      const secondMatch = SECOND_REG_PATTERN2.exec(remainingText);
      if (secondMatch) {
        result.end = DESpecificTimeExpressionParser$1.extractTimeComponent(result.start.clone(), secondMatch);
        if (result.end) {
          result.text += secondMatch[0];
        }
      }
      return result;
    }
    static extractTimeComponent(extractingComponents, match2) {
      let hour = 0;
      let minute = 0;
      let meridiem = null;
      hour = parseInt(match2[HOUR_GROUP2]);
      if (match2[MINUTE_GROUP2] != null) {
        minute = parseInt(match2[MINUTE_GROUP2]);
      }
      if (minute >= 60 || hour > 24) {
        return null;
      }
      if (hour >= 12) {
        meridiem = index_1.Meridiem.PM;
      }
      if (match2[AM_PM_HOUR_GROUP2] != null) {
        if (hour > 12)
          return null;
        const ampm = match2[AM_PM_HOUR_GROUP2].toLowerCase();
        if (ampm.match(/morgen|vormittag/)) {
          meridiem = index_1.Meridiem.AM;
          if (hour == 12) {
            hour = 0;
          }
        }
        if (ampm.match(/nachmittag|abend/)) {
          meridiem = index_1.Meridiem.PM;
          if (hour != 12) {
            hour += 12;
          }
        }
        if (ampm.match(/nacht/)) {
          if (hour == 12) {
            meridiem = index_1.Meridiem.AM;
            hour = 0;
          } else if (hour < 6) {
            meridiem = index_1.Meridiem.AM;
          } else {
            meridiem = index_1.Meridiem.PM;
            hour += 12;
          }
        }
      }
      extractingComponents.assign("hour", hour);
      extractingComponents.assign("minute", minute);
      if (meridiem !== null) {
        extractingComponents.assign("meridiem", meridiem);
      } else {
        if (hour < 12) {
          extractingComponents.imply("meridiem", index_1.Meridiem.AM);
        } else {
          extractingComponents.imply("meridiem", index_1.Meridiem.PM);
        }
      }
      if (match2[SECOND_GROUP2] != null) {
        const second = parseInt(match2[SECOND_GROUP2]);
        if (second >= 60)
          return null;
        extractingComponents.assign("second", second);
      }
      return extractingComponents;
    }
  }
  DESpecificTimeExpressionParser.default = DESpecificTimeExpressionParser$1;
  return DESpecificTimeExpressionParser;
}
var DEMergeDateRangeRefiner$1 = {};
var __importDefault$k = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(DEMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1$7 = __importDefault$k(AbstractMergeDateRangeRefiner$1);
class DEMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1$7.default {
  patternBetween() {
    return /^\s*(bis(?:\s*(?:am|zum))?|-)\s*$/i;
  }
}
DEMergeDateRangeRefiner$1.default = DEMergeDateRangeRefiner;
var DEMergeDateTimeRefiner = {};
var hasRequiredDEMergeDateTimeRefiner;
function requireDEMergeDateTimeRefiner() {
  if (hasRequiredDEMergeDateTimeRefiner)
    return DEMergeDateTimeRefiner;
  hasRequiredDEMergeDateTimeRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(DEMergeDateTimeRefiner, "__esModule", { value: true });
  const AbstractMergeDateTimeRefiner_1 = __importDefault2(requireAbstractMergeDateTimeRefiner());
  class DEMergeDateTimeRefiner$1 extends AbstractMergeDateTimeRefiner_1.default {
    patternBetween() {
      return new RegExp("^\\s*(T|um|am|,|-)?\\s*$");
    }
  }
  DEMergeDateTimeRefiner.default = DEMergeDateTimeRefiner$1;
  return DEMergeDateTimeRefiner;
}
var DECasualDateParser = {};
var DECasualTimeParser = {};
var hasRequiredDECasualTimeParser;
function requireDECasualTimeParser() {
  if (hasRequiredDECasualTimeParser)
    return DECasualTimeParser;
  hasRequiredDECasualTimeParser = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(DECasualTimeParser, "__esModule", { value: true });
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const index_1 = requireDist();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const dayjs_2 = requireDayjs();
  const timeunits_1 = timeunits;
  class DECasualTimeParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return /(diesen)?\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht)(?=\W|$)/i;
    }
    innerExtract(context, match2) {
      const targetDate = dayjs_12.default(context.refDate);
      const timeKeywordPattern = match2[2].toLowerCase();
      const component = context.createParsingComponents();
      dayjs_2.implySimilarTime(component, targetDate);
      return DECasualTimeParser$1.extractTimeComponents(component, timeKeywordPattern);
    }
    static extractTimeComponents(component, timeKeywordPattern) {
      switch (timeKeywordPattern) {
        case "morgen":
          component.imply("hour", 6);
          component.imply("minute", 0);
          component.imply("second", 0);
          component.imply("meridiem", index_1.Meridiem.AM);
          break;
        case "vormittag":
          component.imply("hour", 9);
          component.imply("minute", 0);
          component.imply("second", 0);
          component.imply("meridiem", index_1.Meridiem.AM);
          break;
        case "mittag":
        case "mittags":
          component.imply("hour", 12);
          component.imply("minute", 0);
          component.imply("second", 0);
          component.imply("meridiem", index_1.Meridiem.AM);
          break;
        case "nachmittag":
          component.imply("hour", 15);
          component.imply("minute", 0);
          component.imply("second", 0);
          component.imply("meridiem", index_1.Meridiem.PM);
          break;
        case "abend":
          component.imply("hour", 18);
          component.imply("minute", 0);
          component.imply("second", 0);
          component.imply("meridiem", index_1.Meridiem.PM);
          break;
        case "nacht":
          component.imply("hour", 22);
          component.imply("minute", 0);
          component.imply("second", 0);
          component.imply("meridiem", index_1.Meridiem.PM);
          break;
        case "mitternacht":
          if (component.get("hour") > 1) {
            component = timeunits_1.addImpliedTimeUnits(component, { "day": 1 });
          }
          component.imply("hour", 0);
          component.imply("minute", 0);
          component.imply("second", 0);
          component.imply("meridiem", index_1.Meridiem.AM);
          break;
      }
      return component;
    }
  }
  DECasualTimeParser.default = DECasualTimeParser$1;
  return DECasualTimeParser;
}
var hasRequiredDECasualDateParser;
function requireDECasualDateParser() {
  if (hasRequiredDECasualDateParser)
    return DECasualDateParser;
  hasRequiredDECasualDateParser = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o, k22, { enumerable: true, get: function() {
      return m3[k2];
    } });
  } : function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o[k22] = m3[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(DECasualDateParser, "__esModule", { value: true });
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const dayjs_2 = requireDayjs();
  const DECasualTimeParser_1 = __importDefault2(requireDECasualTimeParser());
  const references = __importStar(requireCasualReferences());
  const PATTERN2 = new RegExp(`(jetzt|heute|morgen|\xFCbermorgen|uebermorgen|gestern|vorgestern|letzte\\s*nacht)(?:\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht))?(?=\\W|$)`, "i");
  const DATE_GROUP2 = 1;
  const TIME_GROUP = 2;
  class DECasualDateParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      let targetDate = dayjs_12.default(context.refDate);
      const dateKeyword = (match2[DATE_GROUP2] || "").toLowerCase();
      const timeKeyword = (match2[TIME_GROUP] || "").toLowerCase();
      let component = context.createParsingComponents();
      switch (dateKeyword) {
        case "jetzt":
          component = references.now(context.reference);
          break;
        case "heute":
          component = references.today(context.reference);
          break;
        case "morgen":
          dayjs_2.assignTheNextDay(component, targetDate);
          break;
        case "\xFCbermorgen":
        case "uebermorgen":
          targetDate = targetDate.add(1, "day");
          dayjs_2.assignTheNextDay(component, targetDate);
          break;
        case "gestern":
          targetDate = targetDate.add(-1, "day");
          dayjs_2.assignSimilarDate(component, targetDate);
          dayjs_2.implySimilarTime(component, targetDate);
          break;
        case "vorgestern":
          targetDate = targetDate.add(-2, "day");
          dayjs_2.assignSimilarDate(component, targetDate);
          dayjs_2.implySimilarTime(component, targetDate);
          break;
        default:
          if (dateKeyword.match(/letzte\s*nacht/)) {
            if (targetDate.hour() > 6) {
              targetDate = targetDate.add(-1, "day");
            }
            dayjs_2.assignSimilarDate(component, targetDate);
            component.imply("hour", 0);
          }
          break;
      }
      if (timeKeyword) {
        component = DECasualTimeParser_1.default.extractTimeComponents(component, timeKeyword);
      }
      return component;
    }
  }
  DECasualDateParser.default = DECasualDateParser$1;
  return DECasualDateParser;
}
var DEMonthNameLittleEndianParser$1 = {};
Object.defineProperty(DEMonthNameLittleEndianParser$1, "__esModule", { value: true });
const years_1$7 = years;
const constants_1$i = constants$7;
const constants_2$6 = constants$7;
const pattern_1$7 = pattern;
const AbstractParserWithWordBoundary_1$k = AbstractParserWithWordBoundary;
const PATTERN$f = new RegExp(`(?:am\\s*?)?(?:den\\s*?)?([0-9]{1,2})\\.(?:\\s*(?:bis(?:\\s*(?:am|zum))?|\\-|\\\u2013|\\s)\\s*([0-9]{1,2})\\.?)?\\s*(${pattern_1$7.matchAnyPattern(constants_1$i.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s*)(${constants_2$6.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`, "i");
const DATE_GROUP$4 = 1;
const DATE_TO_GROUP$4 = 2;
const MONTH_NAME_GROUP$7 = 3;
const YEAR_GROUP$9 = 4;
class DEMonthNameLittleEndianParser extends AbstractParserWithWordBoundary_1$k.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$f;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const month = constants_1$i.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$7].toLowerCase()];
    const day = parseInt(match2[DATE_GROUP$4]);
    if (day > 31) {
      match2.index = match2.index + match2[DATE_GROUP$4].length;
      return null;
    }
    result.start.assign("month", month);
    result.start.assign("day", day);
    if (match2[YEAR_GROUP$9]) {
      const yearNumber = constants_2$6.parseYear(match2[YEAR_GROUP$9]);
      result.start.assign("year", yearNumber);
    } else {
      const year = years_1$7.findYearClosestToRef(context.refDate, day, month);
      result.start.imply("year", year);
    }
    if (match2[DATE_TO_GROUP$4]) {
      const endDate = parseInt(match2[DATE_TO_GROUP$4]);
      result.end = result.start.clone();
      result.end.assign("day", endDate);
    }
    return result;
  }
}
DEMonthNameLittleEndianParser$1.default = DEMonthNameLittleEndianParser;
var DETimeUnitRelativeFormatParser = {};
var hasRequiredDETimeUnitRelativeFormatParser;
function requireDETimeUnitRelativeFormatParser() {
  if (hasRequiredDETimeUnitRelativeFormatParser)
    return DETimeUnitRelativeFormatParser;
  hasRequiredDETimeUnitRelativeFormatParser = 1;
  Object.defineProperty(DETimeUnitRelativeFormatParser, "__esModule", { value: true });
  const constants_12 = constants$7;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  const pattern_12 = pattern;
  class DETimeUnitAgoFormatParser extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    constructor() {
      super();
    }
    innerPattern() {
      return new RegExp(`(?:\\s*((?:n\xE4chste|kommende|folgende|letzte|vergangene|vorige|vor(?:her|an)gegangene)(?:s|n|m|r)?|vor|in)\\s*)?(${constants_12.NUMBER_PATTERN})?(?:\\s*(n\xE4chste|kommende|folgende|letzte|vergangene|vorige|vor(?:her|an)gegangene)(?:s|n|m|r)?)?\\s*(${pattern_12.matchAnyPattern(constants_12.TIME_UNIT_DICTIONARY)})`, "i");
    }
    innerExtract(context, match2) {
      const num = match2[2] ? constants_12.parseNumberPattern(match2[2]) : 1;
      const unit = constants_12.TIME_UNIT_DICTIONARY[match2[4].toLowerCase()];
      let timeUnits = {};
      timeUnits[unit] = num;
      let modifier = match2[1] || match2[3] || "";
      modifier = modifier.toLowerCase();
      if (!modifier) {
        return;
      }
      if (/vor/.test(modifier) || /letzte/.test(modifier) || /vergangen/.test(modifier)) {
        timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
      }
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  DETimeUnitRelativeFormatParser.default = DETimeUnitAgoFormatParser;
  return DETimeUnitRelativeFormatParser;
}
var hasRequiredDe;
function requireDe() {
  if (hasRequiredDe)
    return de;
  hasRequiredDe = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.strict = exports2.casual = void 0;
    const configurations_1 = requireConfigurations();
    const chrono_1 = requireChrono();
    const SlashDateFormatParser_1 = __importDefault2(SlashDateFormatParser$1);
    const ISOFormatParser_1 = __importDefault2(ISOFormatParser$1);
    const DETimeExpressionParser_1 = __importDefault2(requireDETimeExpressionParser());
    const DEWeekdayParser_1 = __importDefault2(requireDEWeekdayParser());
    const DESpecificTimeExpressionParser_1 = __importDefault2(requireDESpecificTimeExpressionParser());
    const DEMergeDateRangeRefiner_1 = __importDefault2(DEMergeDateRangeRefiner$1);
    const DEMergeDateTimeRefiner_1 = __importDefault2(requireDEMergeDateTimeRefiner());
    const DECasualDateParser_1 = __importDefault2(requireDECasualDateParser());
    const DECasualTimeParser_1 = __importDefault2(requireDECasualTimeParser());
    const DEMonthNameLittleEndianParser_1 = __importDefault2(DEMonthNameLittleEndianParser$1);
    const DETimeUnitRelativeFormatParser_1 = __importDefault2(requireDETimeUnitRelativeFormatParser());
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports2.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration(littleEndian = true) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.unshift(new DECasualTimeParser_1.default());
      option.parsers.unshift(new DECasualDateParser_1.default());
      option.parsers.unshift(new DETimeUnitRelativeFormatParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new ISOFormatParser_1.default(),
          new SlashDateFormatParser_1.default(littleEndian),
          new DETimeExpressionParser_1.default(),
          new DESpecificTimeExpressionParser_1.default(),
          new DEMonthNameLittleEndianParser_1.default(),
          new DEWeekdayParser_1.default()
        ],
        refiners: [new DEMergeDateRangeRefiner_1.default(), new DEMergeDateTimeRefiner_1.default()]
      }, strictMode);
    }
    exports2.createConfiguration = createConfiguration;
  })(de);
  return de;
}
var fr = {};
var FRCasualDateParser = {};
var hasRequiredFRCasualDateParser;
function requireFRCasualDateParser() {
  if (hasRequiredFRCasualDateParser)
    return FRCasualDateParser;
  hasRequiredFRCasualDateParser = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o, k22, { enumerable: true, get: function() {
      return m3[k2];
    } });
  } : function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o[k22] = m3[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(FRCasualDateParser, "__esModule", { value: true });
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const index_1 = requireDist();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const dayjs_2 = requireDayjs();
  const references = __importStar(requireCasualReferences());
  class FRCasualDateParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return /(maintenant|aujourd'hui|demain|hier|cette\s*nuit|la\s*veille)(?=\W|$)/i;
    }
    innerExtract(context, match2) {
      let targetDate = dayjs_12.default(context.refDate);
      const lowerText = match2[0].toLowerCase();
      const component = context.createParsingComponents();
      switch (lowerText) {
        case "maintenant":
          return references.now(context.reference);
        case "aujourd'hui":
          return references.today(context.reference);
        case "hier":
          return references.yesterday(context.reference);
        case "demain":
          return references.tomorrow(context.reference);
        default:
          if (lowerText.match(/cette\s*nuit/)) {
            dayjs_2.assignSimilarDate(component, targetDate);
            component.imply("hour", 22);
            component.imply("meridiem", index_1.Meridiem.PM);
          } else if (lowerText.match(/la\s*veille/)) {
            targetDate = targetDate.add(-1, "day");
            dayjs_2.assignSimilarDate(component, targetDate);
            component.imply("hour", 0);
          }
      }
      return component;
    }
  }
  FRCasualDateParser.default = FRCasualDateParser$1;
  return FRCasualDateParser;
}
var FRCasualTimeParser = {};
var hasRequiredFRCasualTimeParser;
function requireFRCasualTimeParser() {
  if (hasRequiredFRCasualTimeParser)
    return FRCasualTimeParser;
  hasRequiredFRCasualTimeParser = 1;
  Object.defineProperty(FRCasualTimeParser, "__esModule", { value: true });
  const index_1 = requireDist();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  class FRCasualTimeParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return /(cet?)?\s*(matin|soir|après-midi|aprem|a midi|à minuit)(?=\W|$)/i;
    }
    innerExtract(context, match2) {
      const suffixLower = match2[2].toLowerCase();
      const component = context.createParsingComponents();
      switch (suffixLower) {
        case "apr\xE8s-midi":
        case "aprem":
          component.imply("hour", 14);
          component.imply("minute", 0);
          component.imply("meridiem", index_1.Meridiem.PM);
          break;
        case "soir":
          component.imply("hour", 18);
          component.imply("minute", 0);
          component.imply("meridiem", index_1.Meridiem.PM);
          break;
        case "matin":
          component.imply("hour", 8);
          component.imply("minute", 0);
          component.imply("meridiem", index_1.Meridiem.AM);
          break;
        case "a midi":
          component.imply("hour", 12);
          component.imply("minute", 0);
          component.imply("meridiem", index_1.Meridiem.AM);
          break;
        case "\xE0 minuit":
          component.imply("hour", 0);
          component.imply("meridiem", index_1.Meridiem.AM);
          break;
      }
      return component;
    }
  }
  FRCasualTimeParser.default = FRCasualTimeParser$1;
  return FRCasualTimeParser;
}
var FRTimeExpressionParser = {};
var hasRequiredFRTimeExpressionParser;
function requireFRTimeExpressionParser() {
  if (hasRequiredFRTimeExpressionParser)
    return FRTimeExpressionParser;
  hasRequiredFRTimeExpressionParser = 1;
  Object.defineProperty(FRTimeExpressionParser, "__esModule", { value: true });
  const AbstractTimeExpressionParser_1 = requireAbstractTimeExpressionParser();
  class FRTimeExpressionParser$1 extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
    primaryPrefix() {
      return "(?:(?:[\xE0a])\\s*)?";
    }
    followingPhase() {
      return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|[\xE0a]|\\?)\\s*";
    }
    extractPrimaryTimeComponents(context, match2) {
      if (match2[0].match(/^\s*\d{4}\s*$/)) {
        return null;
      }
      return super.extractPrimaryTimeComponents(context, match2);
    }
  }
  FRTimeExpressionParser.default = FRTimeExpressionParser$1;
  return FRTimeExpressionParser;
}
var FRMergeDateTimeRefiner = {};
var hasRequiredFRMergeDateTimeRefiner;
function requireFRMergeDateTimeRefiner() {
  if (hasRequiredFRMergeDateTimeRefiner)
    return FRMergeDateTimeRefiner;
  hasRequiredFRMergeDateTimeRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(FRMergeDateTimeRefiner, "__esModule", { value: true });
  const AbstractMergeDateTimeRefiner_1 = __importDefault2(requireAbstractMergeDateTimeRefiner());
  class FRMergeDateTimeRefiner$1 extends AbstractMergeDateTimeRefiner_1.default {
    patternBetween() {
      return new RegExp("^\\s*(T|\xE0|a|vers|de|,|-)?\\s*$");
    }
  }
  FRMergeDateTimeRefiner.default = FRMergeDateTimeRefiner$1;
  return FRMergeDateTimeRefiner;
}
var FRMergeDateRangeRefiner$1 = {};
var __importDefault$j = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(FRMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1$6 = __importDefault$j(AbstractMergeDateRangeRefiner$1);
class FRMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1$6.default {
  patternBetween() {
    return /^\s*(à|a|-)\s*$/i;
  }
}
FRMergeDateRangeRefiner$1.default = FRMergeDateRangeRefiner;
var FRWeekdayParser = {};
var constants$6 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.parseTimeUnits = exports2.TIME_UNITS_PATTERN = exports2.parseYear = exports2.YEAR_PATTERN = exports2.parseOrdinalNumberPattern = exports2.ORDINAL_NUMBER_PATTERN = exports2.parseNumberPattern = exports2.NUMBER_PATTERN = exports2.TIME_UNIT_DICTIONARY = exports2.INTEGER_WORD_DICTIONARY = exports2.MONTH_DICTIONARY = exports2.WEEKDAY_DICTIONARY = void 0;
  const pattern_12 = pattern;
  exports2.WEEKDAY_DICTIONARY = {
    "dimanche": 0,
    "dim": 0,
    "lundi": 1,
    "lun": 1,
    "mardi": 2,
    "mar": 2,
    "mercredi": 3,
    "mer": 3,
    "jeudi": 4,
    "jeu": 4,
    "vendredi": 5,
    "ven": 5,
    "samedi": 6,
    "sam": 6
  };
  exports2.MONTH_DICTIONARY = {
    "janvier": 1,
    "jan": 1,
    "jan.": 1,
    "f\xE9vrier": 2,
    "f\xE9v": 2,
    "f\xE9v.": 2,
    "fevrier": 2,
    "fev": 2,
    "fev.": 2,
    "mars": 3,
    "mar": 3,
    "mar.": 3,
    "avril": 4,
    "avr": 4,
    "avr.": 4,
    "mai": 5,
    "juin": 6,
    "jun": 6,
    "juillet": 7,
    "juil": 7,
    "jul": 7,
    "jul.": 7,
    "ao\xFBt": 8,
    "aout": 8,
    "septembre": 9,
    "sep": 9,
    "sep.": 9,
    "sept": 9,
    "sept.": 9,
    "octobre": 10,
    "oct": 10,
    "oct.": 10,
    "novembre": 11,
    "nov": 11,
    "nov.": 11,
    "d\xE9cembre": 12,
    "decembre": 12,
    "dec": 12,
    "dec.": 12
  };
  exports2.INTEGER_WORD_DICTIONARY = {
    "un": 1,
    "deux": 2,
    "trois": 3,
    "quatre": 4,
    "cinq": 5,
    "six": 6,
    "sept": 7,
    "huit": 8,
    "neuf": 9,
    "dix": 10,
    "onze": 11,
    "douze": 12,
    "treize": 13
  };
  exports2.TIME_UNIT_DICTIONARY = {
    "sec": "second",
    "seconde": "second",
    "secondes": "second",
    "min": "minute",
    "mins": "minute",
    "minute": "minute",
    "minutes": "minute",
    "h": "hour",
    "hr": "hour",
    "hrs": "hour",
    "heure": "hour",
    "heures": "hour",
    "jour": "d",
    "jours": "d",
    "semaine": "week",
    "semaines": "week",
    "mois": "month",
    "trimestre": "quarter",
    "trimestres": "quarter",
    "ans": "year",
    "ann\xE9e": "year",
    "ann\xE9es": "year"
  };
  exports2.NUMBER_PATTERN = `(?:${pattern_12.matchAnyPattern(exports2.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|une?\\b|quelques?|demi-?)`;
  function parseNumberPattern(match2) {
    const num = match2.toLowerCase();
    if (exports2.INTEGER_WORD_DICTIONARY[num] !== void 0) {
      return exports2.INTEGER_WORD_DICTIONARY[num];
    } else if (num === "une" || num === "un") {
      return 1;
    } else if (num.match(/quelques?/)) {
      return 3;
    } else if (num.match(/demi-?/)) {
      return 0.5;
    }
    return parseFloat(num);
  }
  exports2.parseNumberPattern = parseNumberPattern;
  exports2.ORDINAL_NUMBER_PATTERN = `(?:[0-9]{1,2}(?:er)?)`;
  function parseOrdinalNumberPattern2(match2) {
    let num = match2.toLowerCase();
    num = num.replace(/(?:er)$/i, "");
    return parseInt(num);
  }
  exports2.parseOrdinalNumberPattern = parseOrdinalNumberPattern2;
  exports2.YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s*(?:AC|AD|p\\.\\s*C(?:hr?)?\\.\\s*n\\.)|[1-2][0-9]{3}|[5-9][0-9])`;
  function parseYear2(match2) {
    if (/AC/i.test(match2)) {
      match2 = match2.replace(/BC/i, "");
      return -parseInt(match2);
    }
    if (/AD/i.test(match2) || /C/i.test(match2)) {
      match2 = match2.replace(/[^\d]+/i, "");
      return parseInt(match2);
    }
    let yearNumber = parseInt(match2);
    if (yearNumber < 100) {
      if (yearNumber > 50) {
        yearNumber = yearNumber + 1900;
      } else {
        yearNumber = yearNumber + 2e3;
      }
    }
    return yearNumber;
  }
  exports2.parseYear = parseYear2;
  const SINGLE_TIME_UNIT_PATTERN = `(${exports2.NUMBER_PATTERN})\\s{0,5}(${pattern_12.matchAnyPattern(exports2.TIME_UNIT_DICTIONARY)})\\s{0,5}`;
  const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
  exports2.TIME_UNITS_PATTERN = pattern_12.repeatedTimeunitPattern("", SINGLE_TIME_UNIT_PATTERN);
  function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match2) {
      collectDateTimeFragment(fragments, match2);
      remainingText = remainingText.substring(match2[0].length);
      match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
  }
  exports2.parseTimeUnits = parseTimeUnits;
  function collectDateTimeFragment(fragments, match2) {
    const num = parseNumberPattern(match2[1]);
    const unit = exports2.TIME_UNIT_DICTIONARY[match2[2].toLowerCase()];
    fragments[unit] = num;
  }
})(constants$6);
var hasRequiredFRWeekdayParser;
function requireFRWeekdayParser() {
  if (hasRequiredFRWeekdayParser)
    return FRWeekdayParser;
  hasRequiredFRWeekdayParser = 1;
  Object.defineProperty(FRWeekdayParser, "__esModule", { value: true });
  const constants_12 = constants$6;
  const pattern_12 = pattern;
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const weekdays_1 = requireWeekdays();
  const PATTERN2 = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:(?:ce)\\s*)?(${pattern_12.matchAnyPattern(constants_12.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\\uFF09))?(?:\\s*(dernier|prochain)\\s*)?(?=\\W|\\d|$)`, "i");
  const WEEKDAY_GROUP = 1;
  const POSTFIX_GROUP = 2;
  class FRWeekdayParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const dayOfWeek = match2[WEEKDAY_GROUP].toLowerCase();
      const weekday = constants_12.WEEKDAY_DICTIONARY[dayOfWeek];
      if (weekday === void 0) {
        return null;
      }
      let suffix = match2[POSTFIX_GROUP];
      suffix = suffix || "";
      suffix = suffix.toLowerCase();
      let modifier = null;
      if (suffix == "dernier") {
        modifier = "last";
      } else if (suffix == "prochain") {
        modifier = "next";
      }
      return weekdays_1.createParsingComponentsAtWeekday(context.reference, weekday, modifier);
    }
  }
  FRWeekdayParser.default = FRWeekdayParser$1;
  return FRWeekdayParser;
}
var FRSpecificTimeExpressionParser = {};
var hasRequiredFRSpecificTimeExpressionParser;
function requireFRSpecificTimeExpressionParser() {
  if (hasRequiredFRSpecificTimeExpressionParser)
    return FRSpecificTimeExpressionParser;
  hasRequiredFRSpecificTimeExpressionParser = 1;
  Object.defineProperty(FRSpecificTimeExpressionParser, "__esModule", { value: true });
  const index_1 = requireDist();
  const FIRST_REG_PATTERN2 = new RegExp("(^|\\s|T)(?:(?:[\xE0a])\\s*)?(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s|:)?)?(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?(?=\\W|$)", "i");
  const SECOND_REG_PATTERN2 = new RegExp("^\\s*(\\-|\\\u2013|\\~|\\\u301C|[\xE0a]|\\?)\\s*(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s|:)?)?(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?(?=\\W|$)", "i");
  const HOUR_GROUP2 = 2;
  const MINUTE_GROUP2 = 3;
  const SECOND_GROUP2 = 4;
  const AM_PM_HOUR_GROUP2 = 5;
  class FRSpecificTimeExpressionParser$1 {
    pattern(context) {
      return FIRST_REG_PATTERN2;
    }
    extract(context, match2) {
      const result = context.createParsingResult(match2.index + match2[1].length, match2[0].substring(match2[1].length));
      if (result.text.match(/^\d{4}$/)) {
        match2.index += match2[0].length;
        return null;
      }
      result.start = FRSpecificTimeExpressionParser$1.extractTimeComponent(result.start.clone(), match2);
      if (!result.start) {
        match2.index += match2[0].length;
        return null;
      }
      const remainingText = context.text.substring(match2.index + match2[0].length);
      const secondMatch = SECOND_REG_PATTERN2.exec(remainingText);
      if (secondMatch) {
        result.end = FRSpecificTimeExpressionParser$1.extractTimeComponent(result.start.clone(), secondMatch);
        if (result.end) {
          result.text += secondMatch[0];
        }
      }
      return result;
    }
    static extractTimeComponent(extractingComponents, match2) {
      let hour = 0;
      let minute = 0;
      let meridiem = null;
      hour = parseInt(match2[HOUR_GROUP2]);
      if (match2[MINUTE_GROUP2] != null) {
        minute = parseInt(match2[MINUTE_GROUP2]);
      }
      if (minute >= 60 || hour > 24) {
        return null;
      }
      if (hour >= 12) {
        meridiem = index_1.Meridiem.PM;
      }
      if (match2[AM_PM_HOUR_GROUP2] != null) {
        if (hour > 12)
          return null;
        const ampm = match2[AM_PM_HOUR_GROUP2][0].toLowerCase();
        if (ampm == "a") {
          meridiem = index_1.Meridiem.AM;
          if (hour == 12) {
            hour = 0;
          }
        }
        if (ampm == "p") {
          meridiem = index_1.Meridiem.PM;
          if (hour != 12) {
            hour += 12;
          }
        }
      }
      extractingComponents.assign("hour", hour);
      extractingComponents.assign("minute", minute);
      if (meridiem !== null) {
        extractingComponents.assign("meridiem", meridiem);
      } else {
        if (hour < 12) {
          extractingComponents.imply("meridiem", index_1.Meridiem.AM);
        } else {
          extractingComponents.imply("meridiem", index_1.Meridiem.PM);
        }
      }
      if (match2[SECOND_GROUP2] != null) {
        const second = parseInt(match2[SECOND_GROUP2]);
        if (second >= 60)
          return null;
        extractingComponents.assign("second", second);
      }
      return extractingComponents;
    }
  }
  FRSpecificTimeExpressionParser.default = FRSpecificTimeExpressionParser$1;
  return FRSpecificTimeExpressionParser;
}
var FRMonthNameLittleEndianParser$1 = {};
Object.defineProperty(FRMonthNameLittleEndianParser$1, "__esModule", { value: true });
const years_1$6 = years;
const constants_1$h = constants$6;
const constants_2$5 = constants$6;
const constants_3$2 = constants$6;
const pattern_1$6 = pattern;
const AbstractParserWithWordBoundary_1$j = AbstractParserWithWordBoundary;
const PATTERN$e = new RegExp(`(?:on\\s*?)?(${constants_3$2.ORDINAL_NUMBER_PATTERN})(?:\\s*(?:au|\\-|\\\u2013|jusqu'au?|\\s)\\s*(${constants_3$2.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s*(?:de)?\\s*)(${pattern_1$6.matchAnyPattern(constants_1$h.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s*)(${constants_2$5.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`, "i");
const DATE_GROUP$3 = 1;
const DATE_TO_GROUP$3 = 2;
const MONTH_NAME_GROUP$6 = 3;
const YEAR_GROUP$8 = 4;
class FRMonthNameLittleEndianParser extends AbstractParserWithWordBoundary_1$j.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$e;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const month = constants_1$h.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$6].toLowerCase()];
    const day = constants_3$2.parseOrdinalNumberPattern(match2[DATE_GROUP$3]);
    if (day > 31) {
      match2.index = match2.index + match2[DATE_GROUP$3].length;
      return null;
    }
    result.start.assign("month", month);
    result.start.assign("day", day);
    if (match2[YEAR_GROUP$8]) {
      const yearNumber = constants_2$5.parseYear(match2[YEAR_GROUP$8]);
      result.start.assign("year", yearNumber);
    } else {
      const year = years_1$6.findYearClosestToRef(context.refDate, day, month);
      result.start.imply("year", year);
    }
    if (match2[DATE_TO_GROUP$3]) {
      const endDate = constants_3$2.parseOrdinalNumberPattern(match2[DATE_TO_GROUP$3]);
      result.end = result.start.clone();
      result.end.assign("day", endDate);
    }
    return result;
  }
}
FRMonthNameLittleEndianParser$1.default = FRMonthNameLittleEndianParser;
var FRTimeUnitAgoFormatParser = {};
var hasRequiredFRTimeUnitAgoFormatParser;
function requireFRTimeUnitAgoFormatParser() {
  if (hasRequiredFRTimeUnitAgoFormatParser)
    return FRTimeUnitAgoFormatParser;
  hasRequiredFRTimeUnitAgoFormatParser = 1;
  Object.defineProperty(FRTimeUnitAgoFormatParser, "__esModule", { value: true });
  const constants_12 = constants$6;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  class FRTimeUnitAgoFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    constructor() {
      super();
    }
    innerPattern() {
      return new RegExp(`il y a\\s*(${constants_12.TIME_UNITS_PATTERN})(?=(?:\\W|$))`, "i");
    }
    innerExtract(context, match2) {
      const timeUnits = constants_12.parseTimeUnits(match2[1]);
      const outputTimeUnits = timeunits_1.reverseTimeUnits(timeUnits);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
  }
  FRTimeUnitAgoFormatParser.default = FRTimeUnitAgoFormatParser$1;
  return FRTimeUnitAgoFormatParser;
}
var FRTimeUnitWithinFormatParser = {};
var hasRequiredFRTimeUnitWithinFormatParser;
function requireFRTimeUnitWithinFormatParser() {
  if (hasRequiredFRTimeUnitWithinFormatParser)
    return FRTimeUnitWithinFormatParser;
  hasRequiredFRTimeUnitWithinFormatParser = 1;
  Object.defineProperty(FRTimeUnitWithinFormatParser, "__esModule", { value: true });
  const constants_12 = constants$6;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  class FRTimeUnitWithinFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return new RegExp(`(?:dans|en|pour|pendant|de)\\s*(${constants_12.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
    }
    innerExtract(context, match2) {
      const timeUnits = constants_12.parseTimeUnits(match2[1]);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  FRTimeUnitWithinFormatParser.default = FRTimeUnitWithinFormatParser$1;
  return FRTimeUnitWithinFormatParser;
}
var FRTimeUnitRelativeFormatParser = {};
var hasRequiredFRTimeUnitRelativeFormatParser;
function requireFRTimeUnitRelativeFormatParser() {
  if (hasRequiredFRTimeUnitRelativeFormatParser)
    return FRTimeUnitRelativeFormatParser;
  hasRequiredFRTimeUnitRelativeFormatParser = 1;
  Object.defineProperty(FRTimeUnitRelativeFormatParser, "__esModule", { value: true });
  const constants_12 = constants$6;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  const pattern_12 = pattern;
  class FRTimeUnitAgoFormatParser2 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    constructor() {
      super();
    }
    innerPattern() {
      return new RegExp(`(?:les?|la|l'|du|des?)\\s*(${constants_12.NUMBER_PATTERN})?(?:\\s*(prochaine?s?|derni[e\xE8]re?s?|pass[\xE9e]e?s?|pr[\xE9e]c[\xE9e]dents?|suivante?s?))?\\s*(${pattern_12.matchAnyPattern(constants_12.TIME_UNIT_DICTIONARY)})(?:\\s*(prochaine?s?|derni[e\xE8]re?s?|pass[\xE9e]e?s?|pr[\xE9e]c[\xE9e]dents?|suivante?s?))?`, "i");
    }
    innerExtract(context, match2) {
      const num = match2[1] ? constants_12.parseNumberPattern(match2[1]) : 1;
      const unit = constants_12.TIME_UNIT_DICTIONARY[match2[3].toLowerCase()];
      let timeUnits = {};
      timeUnits[unit] = num;
      let modifier = match2[2] || match2[4] || "";
      modifier = modifier.toLowerCase();
      if (!modifier) {
        return;
      }
      if (/derni[eè]re?s?/.test(modifier) || /pass[ée]e?s?/.test(modifier) || /pr[ée]c[ée]dents?/.test(modifier)) {
        timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
      }
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  FRTimeUnitRelativeFormatParser.default = FRTimeUnitAgoFormatParser2;
  return FRTimeUnitRelativeFormatParser;
}
var hasRequiredFr;
function requireFr() {
  if (hasRequiredFr)
    return fr;
  hasRequiredFr = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.strict = exports2.casual = void 0;
    const configurations_1 = requireConfigurations();
    const chrono_1 = requireChrono();
    const FRCasualDateParser_1 = __importDefault2(requireFRCasualDateParser());
    const FRCasualTimeParser_1 = __importDefault2(requireFRCasualTimeParser());
    const SlashDateFormatParser_1 = __importDefault2(SlashDateFormatParser$1);
    const FRTimeExpressionParser_1 = __importDefault2(requireFRTimeExpressionParser());
    const FRMergeDateTimeRefiner_1 = __importDefault2(requireFRMergeDateTimeRefiner());
    const FRMergeDateRangeRefiner_1 = __importDefault2(FRMergeDateRangeRefiner$1);
    const FRWeekdayParser_1 = __importDefault2(requireFRWeekdayParser());
    const FRSpecificTimeExpressionParser_1 = __importDefault2(requireFRSpecificTimeExpressionParser());
    const FRMonthNameLittleEndianParser_1 = __importDefault2(FRMonthNameLittleEndianParser$1);
    const FRTimeUnitAgoFormatParser_1 = __importDefault2(requireFRTimeUnitAgoFormatParser());
    const FRTimeUnitWithinFormatParser_1 = __importDefault2(requireFRTimeUnitWithinFormatParser());
    const FRTimeUnitRelativeFormatParser_1 = __importDefault2(requireFRTimeUnitRelativeFormatParser());
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports2.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration(littleEndian = true) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.unshift(new FRCasualDateParser_1.default());
      option.parsers.unshift(new FRCasualTimeParser_1.default());
      option.parsers.unshift(new FRTimeUnitRelativeFormatParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(littleEndian),
          new FRMonthNameLittleEndianParser_1.default(),
          new FRTimeExpressionParser_1.default(),
          new FRSpecificTimeExpressionParser_1.default(),
          new FRTimeUnitAgoFormatParser_1.default(),
          new FRTimeUnitWithinFormatParser_1.default(),
          new FRWeekdayParser_1.default()
        ],
        refiners: [new FRMergeDateTimeRefiner_1.default(), new FRMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports2.createConfiguration = createConfiguration;
  })(fr);
  return fr;
}
var ja = {};
var JPStandardParser$1 = {};
var constants$5 = {};
Object.defineProperty(constants$5, "__esModule", { value: true });
constants$5.toHankaku = void 0;
function toHankaku(text2) {
  return String(text2).replace(/\u2019/g, "'").replace(/\u201D/g, '"').replace(/\u3000/g, " ").replace(/\uFFE5/g, "\xA5").replace(/[\uFF01\uFF03-\uFF06\uFF08\uFF09\uFF0C-\uFF19\uFF1C-\uFF1F\uFF21-\uFF3B\uFF3D\uFF3F\uFF41-\uFF5B\uFF5D\uFF5E]/g, alphaNum);
}
constants$5.toHankaku = toHankaku;
function alphaNum(token) {
  return String.fromCharCode(token.charCodeAt(0) - 65248);
}
var __importDefault$i = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(JPStandardParser$1, "__esModule", { value: true });
const constants_1$g = constants$5;
const years_1$5 = years;
const dayjs_1$c = __importDefault$i(dayjs_min.exports);
const PATTERN$d = /(?:(?:([同今本])|((昭和|平成|令和)?([0-9０-９]{1,4}|元)))年\s*)?([0-9０-９]{1,2})月\s*([0-9０-９]{1,2})日/i;
const SPECIAL_YEAR_GROUP = 1;
const TYPICAL_YEAR_GROUP = 2;
const ERA_GROUP = 3;
const YEAR_NUMBER_GROUP$1 = 4;
const MONTH_GROUP$3 = 5;
const DAY_GROUP$2 = 6;
class JPStandardParser {
  pattern() {
    return PATTERN$d;
  }
  extract(context, match2) {
    const month = parseInt(constants_1$g.toHankaku(match2[MONTH_GROUP$3]));
    const day = parseInt(constants_1$g.toHankaku(match2[DAY_GROUP$2]));
    const components = context.createParsingComponents({
      day,
      month
    });
    if (match2[SPECIAL_YEAR_GROUP] && match2[SPECIAL_YEAR_GROUP].match("\u540C|\u4ECA|\u672C")) {
      const moment = dayjs_1$c.default(context.refDate);
      components.assign("year", moment.year());
    }
    if (match2[TYPICAL_YEAR_GROUP]) {
      const yearNumText = match2[YEAR_NUMBER_GROUP$1];
      let year = yearNumText == "\u5143" ? 1 : parseInt(constants_1$g.toHankaku(yearNumText));
      if (match2[ERA_GROUP] == "\u4EE4\u548C") {
        year += 2018;
      } else if (match2[ERA_GROUP] == "\u5E73\u6210") {
        year += 1988;
      } else if (match2[ERA_GROUP] == "\u662D\u548C") {
        year += 1925;
      }
      components.assign("year", year);
    } else {
      const year = years_1$5.findYearClosestToRef(context.refDate, day, month);
      components.imply("year", year);
    }
    return components;
  }
}
JPStandardParser$1.default = JPStandardParser;
var JPMergeDateRangeRefiner$1 = {};
var __importDefault$h = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(JPMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1$5 = __importDefault$h(AbstractMergeDateRangeRefiner$1);
class JPMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1$5.default {
  patternBetween() {
    return /^\s*(から|ー|-)\s*$/i;
  }
}
JPMergeDateRangeRefiner$1.default = JPMergeDateRangeRefiner;
var JPCasualDateParser = {};
var hasRequiredJPCasualDateParser;
function requireJPCasualDateParser() {
  if (hasRequiredJPCasualDateParser)
    return JPCasualDateParser;
  hasRequiredJPCasualDateParser = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o, k22, { enumerable: true, get: function() {
      return m3[k2];
    } });
  } : function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o[k22] = m3[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(JPCasualDateParser, "__esModule", { value: true });
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const index_1 = requireDist();
  const references = __importStar(requireCasualReferences());
  const PATTERN2 = /今日|当日|昨日|明日|今夜|今夕|今晩|今朝/i;
  class JPCasualDateParser$1 {
    pattern() {
      return PATTERN2;
    }
    extract(context, match2) {
      const text2 = match2[0];
      const date = dayjs_12.default(context.refDate);
      const components = context.createParsingComponents();
      switch (text2) {
        case "\u6628\u65E5":
          return references.yesterday(context.reference);
        case "\u660E\u65E5":
          return references.tomorrow(context.reference);
        case "\u4ECA\u65E5":
        case "\u5F53\u65E5":
          return references.today(context.reference);
      }
      if (text2 == "\u4ECA\u591C" || text2 == "\u4ECA\u5915" || text2 == "\u4ECA\u6669") {
        components.imply("hour", 22);
        components.assign("meridiem", index_1.Meridiem.PM);
      } else if (text2.match("\u4ECA\u671D")) {
        components.imply("hour", 6);
        components.assign("meridiem", index_1.Meridiem.AM);
      }
      components.assign("day", date.date());
      components.assign("month", date.month() + 1);
      components.assign("year", date.year());
      return components;
    }
  }
  JPCasualDateParser.default = JPCasualDateParser$1;
  return JPCasualDateParser;
}
var hasRequiredJa;
function requireJa() {
  if (hasRequiredJa)
    return ja;
  hasRequiredJa = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.strict = exports2.casual = void 0;
    const JPStandardParser_1 = __importDefault2(JPStandardParser$1);
    const JPMergeDateRangeRefiner_1 = __importDefault2(JPMergeDateRangeRefiner$1);
    const JPCasualDateParser_1 = __importDefault2(requireJPCasualDateParser());
    const chrono_1 = requireChrono();
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports2.strict = new chrono_1.Chrono(createConfiguration());
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration() {
      const option = createConfiguration();
      option.parsers.unshift(new JPCasualDateParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration() {
      return {
        parsers: [new JPStandardParser_1.default()],
        refiners: [new JPMergeDateRangeRefiner_1.default()]
      };
    }
    exports2.createConfiguration = createConfiguration;
  })(ja);
  return ja;
}
var pt = {};
var PTWeekdayParser = {};
var constants$4 = {};
Object.defineProperty(constants$4, "__esModule", { value: true });
constants$4.parseYear = constants$4.YEAR_PATTERN = constants$4.MONTH_DICTIONARY = constants$4.WEEKDAY_DICTIONARY = void 0;
constants$4.WEEKDAY_DICTIONARY = {
  "domingo": 0,
  "dom": 0,
  "segunda": 1,
  "segunda-feira": 1,
  "seg": 1,
  "ter\xE7a": 2,
  "ter\xE7a-feira": 2,
  "ter": 2,
  "quarta": 3,
  "quarta-feira": 3,
  "qua": 3,
  "quinta": 4,
  "quinta-feira": 4,
  "qui": 4,
  "sexta": 5,
  "sexta-feira": 5,
  "sex": 5,
  "s\xE1bado": 6,
  "sabado": 6,
  "sab": 6
};
constants$4.MONTH_DICTIONARY = {
  "janeiro": 1,
  "jan": 1,
  "jan.": 1,
  "fevereiro": 2,
  "fev": 2,
  "fev.": 2,
  "mar\xE7o": 3,
  "mar": 3,
  "mar.": 3,
  "abril": 4,
  "abr": 4,
  "abr.": 4,
  "maio": 5,
  "mai": 5,
  "mai.": 5,
  "junho": 6,
  "jun": 6,
  "jun.": 6,
  "julho": 7,
  "jul": 7,
  "jul.": 7,
  "agosto": 8,
  "ago": 8,
  "ago.": 8,
  "setembro": 9,
  "set": 9,
  "set.": 9,
  "outubro": 10,
  "out": 10,
  "out.": 10,
  "novembro": 11,
  "nov": 11,
  "nov.": 11,
  "dezembro": 12,
  "dez": 12,
  "dez.": 12
};
constants$4.YEAR_PATTERN = "[0-9]{1,4}(?![^\\s]\\d)(?:\\s*[a|d]\\.?\\s*c\\.?|\\s*a\\.?\\s*d\\.?)?";
function parseYear(match2) {
  if (match2.match(/^[0-9]{1,4}$/)) {
    let yearNumber = parseInt(match2);
    if (yearNumber < 100) {
      if (yearNumber > 50) {
        yearNumber = yearNumber + 1900;
      } else {
        yearNumber = yearNumber + 2e3;
      }
    }
    return yearNumber;
  }
  if (match2.match(/a\.?\s*c\.?/i)) {
    match2 = match2.replace(/a\.?\s*c\.?/i, "");
    return -parseInt(match2);
  }
  return parseInt(match2);
}
constants$4.parseYear = parseYear;
var hasRequiredPTWeekdayParser;
function requirePTWeekdayParser() {
  if (hasRequiredPTWeekdayParser)
    return PTWeekdayParser;
  hasRequiredPTWeekdayParser = 1;
  Object.defineProperty(PTWeekdayParser, "__esModule", { value: true });
  const constants_12 = constants$4;
  const pattern_12 = pattern;
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const weekdays_1 = requireWeekdays();
  const PATTERN2 = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:(este|esta|passado|pr[o\xF3]ximo)\\s*)?(${pattern_12.matchAnyPattern(constants_12.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\\uFF09))?(?:\\s*(este|esta|passado|pr[\xF3o]ximo)\\s*semana)?(?=\\W|\\d|$)`, "i");
  const PREFIX_GROUP2 = 1;
  const WEEKDAY_GROUP = 2;
  const POSTFIX_GROUP = 3;
  class PTWeekdayParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const dayOfWeek = match2[WEEKDAY_GROUP].toLowerCase();
      const weekday = constants_12.WEEKDAY_DICTIONARY[dayOfWeek];
      if (weekday === void 0) {
        return null;
      }
      const prefix = match2[PREFIX_GROUP2];
      const postfix = match2[POSTFIX_GROUP];
      let norm = prefix || postfix || "";
      norm = norm.toLowerCase();
      let modifier = null;
      if (norm == "passado") {
        modifier = "this";
      } else if (norm == "pr\xF3ximo" || norm == "proximo") {
        modifier = "next";
      } else if (norm == "este") {
        modifier = "this";
      }
      return weekdays_1.createParsingComponentsAtWeekday(context.reference, weekday, modifier);
    }
  }
  PTWeekdayParser.default = PTWeekdayParser$1;
  return PTWeekdayParser;
}
var PTTimeExpressionParser = {};
var hasRequiredPTTimeExpressionParser;
function requirePTTimeExpressionParser() {
  if (hasRequiredPTTimeExpressionParser)
    return PTTimeExpressionParser;
  hasRequiredPTTimeExpressionParser = 1;
  Object.defineProperty(PTTimeExpressionParser, "__esModule", { value: true });
  const AbstractTimeExpressionParser_1 = requireAbstractTimeExpressionParser();
  class PTTimeExpressionParser$1 extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
    primaryPrefix() {
      return "(?:(?:ao?|\xE0s?|das|da|de|do)\\s*)?";
    }
    followingPhase() {
      return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|a(?:o)?|\\?)\\s*";
    }
  }
  PTTimeExpressionParser.default = PTTimeExpressionParser$1;
  return PTTimeExpressionParser;
}
var PTMergeDateTimeRefiner = {};
var hasRequiredPTMergeDateTimeRefiner;
function requirePTMergeDateTimeRefiner() {
  if (hasRequiredPTMergeDateTimeRefiner)
    return PTMergeDateTimeRefiner;
  hasRequiredPTMergeDateTimeRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(PTMergeDateTimeRefiner, "__esModule", { value: true });
  const AbstractMergeDateTimeRefiner_1 = __importDefault2(requireAbstractMergeDateTimeRefiner());
  class PTMergeDateTimeRefiner$1 extends AbstractMergeDateTimeRefiner_1.default {
    patternBetween() {
      return new RegExp("^\\s*(?:,|\xE0)?\\s*$");
    }
  }
  PTMergeDateTimeRefiner.default = PTMergeDateTimeRefiner$1;
  return PTMergeDateTimeRefiner;
}
var PTMergeDateRangeRefiner$1 = {};
var __importDefault$g = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(PTMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1$4 = __importDefault$g(AbstractMergeDateRangeRefiner$1);
class PTMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1$4.default {
  patternBetween() {
    return /^\s*(?:-)\s*$/i;
  }
}
PTMergeDateRangeRefiner$1.default = PTMergeDateRangeRefiner;
var PTMonthNameLittleEndianParser$1 = {};
Object.defineProperty(PTMonthNameLittleEndianParser$1, "__esModule", { value: true });
const years_1$4 = years;
const constants_1$f = constants$4;
const constants_2$4 = constants$4;
const pattern_1$5 = pattern;
const AbstractParserWithWordBoundary_1$i = AbstractParserWithWordBoundary;
const PATTERN$c = new RegExp(`([0-9]{1,2})(?:\xBA|\xAA|\xB0)?(?:\\s*(?:desde|de|\\-|\\\u2013|ao?|\\s)\\s*([0-9]{1,2})(?:\xBA|\xAA|\xB0)?)?\\s*(?:de)?\\s*(?:-|/|\\s*(?:de|,)?\\s*)(${pattern_1$5.matchAnyPattern(constants_1$f.MONTH_DICTIONARY)})(?:\\s*(?:de|,)?\\s*(${constants_2$4.YEAR_PATTERN}))?(?=\\W|$)`, "i");
const DATE_GROUP$2 = 1;
const DATE_TO_GROUP$2 = 2;
const MONTH_NAME_GROUP$5 = 3;
const YEAR_GROUP$7 = 4;
class PTMonthNameLittleEndianParser extends AbstractParserWithWordBoundary_1$i.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$c;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const month = constants_1$f.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$5].toLowerCase()];
    const day = parseInt(match2[DATE_GROUP$2]);
    if (day > 31) {
      match2.index = match2.index + match2[DATE_GROUP$2].length;
      return null;
    }
    result.start.assign("month", month);
    result.start.assign("day", day);
    if (match2[YEAR_GROUP$7]) {
      const yearNumber = constants_2$4.parseYear(match2[YEAR_GROUP$7]);
      result.start.assign("year", yearNumber);
    } else {
      const year = years_1$4.findYearClosestToRef(context.refDate, day, month);
      result.start.imply("year", year);
    }
    if (match2[DATE_TO_GROUP$2]) {
      const endDate = parseInt(match2[DATE_TO_GROUP$2]);
      result.end = result.start.clone();
      result.end.assign("day", endDate);
    }
    return result;
  }
}
PTMonthNameLittleEndianParser$1.default = PTMonthNameLittleEndianParser;
var PTCasualDateParser = {};
var hasRequiredPTCasualDateParser;
function requirePTCasualDateParser() {
  if (hasRequiredPTCasualDateParser)
    return PTCasualDateParser;
  hasRequiredPTCasualDateParser = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o, k22, { enumerable: true, get: function() {
      return m3[k2];
    } });
  } : function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o[k22] = m3[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(PTCasualDateParser, "__esModule", { value: true });
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const references = __importStar(requireCasualReferences());
  class PTCasualDateParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return /(agora|hoje|amanha|amanhã|ontem)(?=\W|$)/i;
    }
    innerExtract(context, match2) {
      const lowerText = match2[0].toLowerCase();
      const component = context.createParsingComponents();
      switch (lowerText) {
        case "agora":
          return references.now(context.reference);
        case "hoje":
          return references.today(context.reference);
        case "amanha":
        case "amanh\xE3":
          return references.tomorrow(context.reference);
        case "ontem":
          return references.yesterday(context.reference);
      }
      return component;
    }
  }
  PTCasualDateParser.default = PTCasualDateParser$1;
  return PTCasualDateParser;
}
var PTCasualTimeParser = {};
var hasRequiredPTCasualTimeParser;
function requirePTCasualTimeParser() {
  if (hasRequiredPTCasualTimeParser)
    return PTCasualTimeParser;
  hasRequiredPTCasualTimeParser = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(PTCasualTimeParser, "__esModule", { value: true });
  const index_1 = requireDist();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const dayjs_12 = requireDayjs();
  const dayjs_2 = __importDefault2(dayjs_min.exports);
  class PTCasualTimeParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return /(?:esta\s*)?(manha|manhã|tarde|meia-noite|meio-dia|noite)(?=\W|$)/i;
    }
    innerExtract(context, match2) {
      const targetDate = dayjs_2.default(context.refDate);
      const component = context.createParsingComponents();
      switch (match2[1].toLowerCase()) {
        case "tarde":
          component.imply("meridiem", index_1.Meridiem.PM);
          component.imply("hour", 15);
          break;
        case "noite":
          component.imply("meridiem", index_1.Meridiem.PM);
          component.imply("hour", 22);
          break;
        case "manha":
        case "manh\xE3":
          component.imply("meridiem", index_1.Meridiem.AM);
          component.imply("hour", 6);
          break;
        case "meia-noite":
          dayjs_12.assignTheNextDay(component, targetDate);
          component.imply("hour", 0);
          component.imply("minute", 0);
          component.imply("second", 0);
          break;
        case "meio-dia":
          component.imply("meridiem", index_1.Meridiem.AM);
          component.imply("hour", 12);
          break;
      }
      return component;
    }
  }
  PTCasualTimeParser.default = PTCasualTimeParser$1;
  return PTCasualTimeParser;
}
var hasRequiredPt;
function requirePt() {
  if (hasRequiredPt)
    return pt;
  hasRequiredPt = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.strict = exports2.casual = void 0;
    const configurations_1 = requireConfigurations();
    const chrono_1 = requireChrono();
    const SlashDateFormatParser_1 = __importDefault2(SlashDateFormatParser$1);
    const PTWeekdayParser_1 = __importDefault2(requirePTWeekdayParser());
    const PTTimeExpressionParser_1 = __importDefault2(requirePTTimeExpressionParser());
    const PTMergeDateTimeRefiner_1 = __importDefault2(requirePTMergeDateTimeRefiner());
    const PTMergeDateRangeRefiner_1 = __importDefault2(PTMergeDateRangeRefiner$1);
    const PTMonthNameLittleEndianParser_1 = __importDefault2(PTMonthNameLittleEndianParser$1);
    const PTCasualDateParser_1 = __importDefault2(requirePTCasualDateParser());
    const PTCasualTimeParser_1 = __importDefault2(requirePTCasualTimeParser());
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports2.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration(littleEndian = true) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.push(new PTCasualDateParser_1.default());
      option.parsers.push(new PTCasualTimeParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(littleEndian),
          new PTWeekdayParser_1.default(),
          new PTTimeExpressionParser_1.default(),
          new PTMonthNameLittleEndianParser_1.default()
        ],
        refiners: [new PTMergeDateTimeRefiner_1.default(), new PTMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports2.createConfiguration = createConfiguration;
  })(pt);
  return pt;
}
var nl = {};
var NLMergeDateRangeRefiner$1 = {};
var __importDefault$f = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(NLMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1$3 = __importDefault$f(AbstractMergeDateRangeRefiner$1);
class NLMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1$3.default {
  patternBetween() {
    return /^\s*(tot|-)\s*$/i;
  }
}
NLMergeDateRangeRefiner$1.default = NLMergeDateRangeRefiner;
var NLMergeDateTimeRefiner = {};
var hasRequiredNLMergeDateTimeRefiner;
function requireNLMergeDateTimeRefiner() {
  if (hasRequiredNLMergeDateTimeRefiner)
    return NLMergeDateTimeRefiner;
  hasRequiredNLMergeDateTimeRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(NLMergeDateTimeRefiner, "__esModule", { value: true });
  const AbstractMergeDateTimeRefiner_1 = __importDefault2(requireAbstractMergeDateTimeRefiner());
  class NLMergeDateTimeRefiner$1 extends AbstractMergeDateTimeRefiner_1.default {
    patternBetween() {
      return new RegExp("^\\s*(om|na|voor|in de|,|-)?\\s*$");
    }
  }
  NLMergeDateTimeRefiner.default = NLMergeDateTimeRefiner$1;
  return NLMergeDateTimeRefiner;
}
var NLCasualDateParser = {};
var hasRequiredNLCasualDateParser;
function requireNLCasualDateParser() {
  if (hasRequiredNLCasualDateParser)
    return NLCasualDateParser;
  hasRequiredNLCasualDateParser = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o, k22, { enumerable: true, get: function() {
      return m3[k2];
    } });
  } : function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o[k22] = m3[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(NLCasualDateParser, "__esModule", { value: true });
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const references = __importStar(requireCasualReferences());
  class NLCasualDateParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return /(nu|vandaag|morgen|morgend|gisteren)(?=\W|$)/i;
    }
    innerExtract(context, match2) {
      const lowerText = match2[0].toLowerCase();
      const component = context.createParsingComponents();
      switch (lowerText) {
        case "nu":
          return references.now(context.reference);
        case "vandaag":
          return references.today(context.reference);
        case "morgen":
        case "morgend":
          return references.tomorrow(context.reference);
        case "gisteren":
          return references.yesterday(context.reference);
      }
      return component;
    }
  }
  NLCasualDateParser.default = NLCasualDateParser$1;
  return NLCasualDateParser;
}
var NLCasualTimeParser = {};
var hasRequiredNLCasualTimeParser;
function requireNLCasualTimeParser() {
  if (hasRequiredNLCasualTimeParser)
    return NLCasualTimeParser;
  hasRequiredNLCasualTimeParser = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(NLCasualTimeParser, "__esModule", { value: true });
  const index_1 = requireDist();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const dayjs_2 = requireDayjs();
  const DAY_GROUP2 = 1;
  const MOMENT_GROUP = 2;
  class NLCasualTimeParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return /(deze)?\s*(namiddag|avond|middernacht|ochtend|middag|'s middags|'s avonds|'s ochtends)(?=\W|$)/i;
    }
    innerExtract(context, match2) {
      const targetDate = dayjs_12.default(context.refDate);
      const component = context.createParsingComponents();
      if (match2[DAY_GROUP2] === "deze") {
        component.assign("day", context.refDate.getDate());
        component.assign("month", context.refDate.getMonth() + 1);
        component.assign("year", context.refDate.getFullYear());
      }
      switch (match2[MOMENT_GROUP].toLowerCase()) {
        case "namiddag":
        case "'s namiddags":
          component.imply("meridiem", index_1.Meridiem.PM);
          component.imply("hour", 15);
          break;
        case "avond":
        case "'s avonds'":
          component.imply("meridiem", index_1.Meridiem.PM);
          component.imply("hour", 20);
          break;
        case "middernacht":
          dayjs_2.assignTheNextDay(component, targetDate);
          component.imply("hour", 0);
          component.imply("minute", 0);
          component.imply("second", 0);
          break;
        case "ochtend":
        case "'s ochtends":
          component.imply("meridiem", index_1.Meridiem.AM);
          component.imply("hour", 6);
          break;
        case "middag":
        case "'s middags":
          component.imply("meridiem", index_1.Meridiem.AM);
          component.imply("hour", 12);
          break;
      }
      return component;
    }
  }
  NLCasualTimeParser.default = NLCasualTimeParser$1;
  return NLCasualTimeParser;
}
var NLTimeUnitWithinFormatParser = {};
var constants$3 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.parseTimeUnits = exports2.TIME_UNITS_PATTERN = exports2.parseYear = exports2.YEAR_PATTERN = exports2.parseOrdinalNumberPattern = exports2.ORDINAL_NUMBER_PATTERN = exports2.parseNumberPattern = exports2.NUMBER_PATTERN = exports2.TIME_UNIT_DICTIONARY = exports2.ORDINAL_WORD_DICTIONARY = exports2.INTEGER_WORD_DICTIONARY = exports2.MONTH_DICTIONARY = exports2.WEEKDAY_DICTIONARY = void 0;
  const pattern_12 = pattern;
  const years_12 = years;
  exports2.WEEKDAY_DICTIONARY = {
    zondag: 0,
    zon: 0,
    "zon.": 0,
    zo: 0,
    "zo.": 0,
    maandag: 1,
    ma: 1,
    "ma.": 1,
    dinsdag: 2,
    din: 2,
    "din.": 2,
    di: 2,
    "di.": 2,
    woensdag: 3,
    woe: 3,
    "woe.": 3,
    wo: 3,
    "wo.": 3,
    donderdag: 4,
    dond: 4,
    "dond.": 4,
    do: 4,
    "do.": 4,
    vrijdag: 5,
    vrij: 5,
    "vrij.": 5,
    vr: 5,
    "vr.": 5,
    zaterdag: 6,
    zat: 6,
    "zat.": 6,
    "za": 6,
    "za.": 6
  };
  exports2.MONTH_DICTIONARY = {
    januari: 1,
    jan: 1,
    "jan.": 1,
    februari: 2,
    feb: 2,
    "feb.": 2,
    maart: 3,
    mar: 3,
    "mar.": 3,
    april: 4,
    apr: 4,
    "apr.": 4,
    mei: 5,
    juni: 6,
    jun: 6,
    "jun.": 6,
    juli: 7,
    jul: 7,
    "jul.": 7,
    augustus: 8,
    aug: 8,
    "aug.": 8,
    september: 9,
    sep: 9,
    "sep.": 9,
    sept: 9,
    "sept.": 9,
    oktober: 10,
    okt: 10,
    "okt.": 10,
    november: 11,
    nov: 11,
    "nov.": 11,
    december: 12,
    dec: 12,
    "dec.": 12
  };
  exports2.INTEGER_WORD_DICTIONARY = {
    een: 1,
    twee: 2,
    drie: 3,
    vier: 4,
    vijf: 5,
    zes: 6,
    zeven: 7,
    acht: 8,
    negen: 9,
    tien: 10,
    elf: 11,
    twaalf: 12
  };
  exports2.ORDINAL_WORD_DICTIONARY = {
    eerste: 1,
    tweede: 2,
    derde: 3,
    vierde: 4,
    vijfde: 5,
    zesde: 6,
    zevende: 7,
    achtste: 8,
    negende: 9,
    tiende: 10,
    elfde: 11,
    twaalfde: 12,
    dertiende: 13,
    veertiende: 14,
    vijftiende: 15,
    zestiende: 16,
    zeventiende: 17,
    achttiende: 18,
    negentiende: 19,
    twintigste: 20,
    "eenentwintigste": 21,
    "twee\xEBntwintigste": 22,
    "drieentwintigste": 23,
    "vierentwintigste": 24,
    "vijfentwintigste": 25,
    "zesentwintigste": 26,
    "zevenentwintigste": 27,
    "achtentwintig": 28,
    "negenentwintig": 29,
    "dertigste": 30,
    "eenendertigste": 31
  };
  exports2.TIME_UNIT_DICTIONARY = {
    sec: "second",
    second: "second",
    seconden: "second",
    min: "minute",
    mins: "minute",
    minute: "minute",
    minuut: "minute",
    minuten: "minute",
    minuutje: "minute",
    h: "hour",
    hr: "hour",
    hrs: "hour",
    uur: "hour",
    u: "hour",
    uren: "hour",
    dag: "d",
    dagen: "d",
    week: "week",
    weken: "week",
    maand: "month",
    maanden: "month",
    jaar: "year",
    jr: "year",
    jaren: "year"
  };
  exports2.NUMBER_PATTERN = `(?:${pattern_12.matchAnyPattern(exports2.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+[\\.,][0-9]+|halve?|half|paar)`;
  function parseNumberPattern(match2) {
    const num = match2.toLowerCase();
    if (exports2.INTEGER_WORD_DICTIONARY[num] !== void 0) {
      return exports2.INTEGER_WORD_DICTIONARY[num];
    } else if (num === "paar") {
      return 2;
    } else if (num === "half" || num.match(/halve?/)) {
      return 0.5;
    }
    return parseFloat(num.replace(",", "."));
  }
  exports2.parseNumberPattern = parseNumberPattern;
  exports2.ORDINAL_NUMBER_PATTERN = `(?:${pattern_12.matchAnyPattern(exports2.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:ste|de)?)`;
  function parseOrdinalNumberPattern2(match2) {
    let num = match2.toLowerCase();
    if (exports2.ORDINAL_WORD_DICTIONARY[num] !== void 0) {
      return exports2.ORDINAL_WORD_DICTIONARY[num];
    }
    num = num.replace(/(?:ste|de)$/i, "");
    return parseInt(num);
  }
  exports2.parseOrdinalNumberPattern = parseOrdinalNumberPattern2;
  exports2.YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s*(?:voor Christus|na Christus)|[1-2][0-9]{3}|[5-9][0-9])`;
  function parseYear2(match2) {
    if (/voor Christus/i.test(match2)) {
      match2 = match2.replace(/voor Christus/i, "");
      return -parseInt(match2);
    }
    if (/na Christus/i.test(match2)) {
      match2 = match2.replace(/na Christus/i, "");
      return parseInt(match2);
    }
    const rawYearNumber = parseInt(match2);
    return years_12.findMostLikelyADYear(rawYearNumber);
  }
  exports2.parseYear = parseYear2;
  const SINGLE_TIME_UNIT_PATTERN = `(${exports2.NUMBER_PATTERN})\\s{0,5}(${pattern_12.matchAnyPattern(exports2.TIME_UNIT_DICTIONARY)})\\s{0,5}`;
  const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
  exports2.TIME_UNITS_PATTERN = pattern_12.repeatedTimeunitPattern(`(?:(?:binnen|in)\\s*)?`, SINGLE_TIME_UNIT_PATTERN);
  function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match2) {
      collectDateTimeFragment(fragments, match2);
      remainingText = remainingText.substring(match2[0].length);
      match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
  }
  exports2.parseTimeUnits = parseTimeUnits;
  function collectDateTimeFragment(fragments, match2) {
    const num = parseNumberPattern(match2[1]);
    const unit = exports2.TIME_UNIT_DICTIONARY[match2[2].toLowerCase()];
    fragments[unit] = num;
  }
})(constants$3);
var hasRequiredNLTimeUnitWithinFormatParser;
function requireNLTimeUnitWithinFormatParser() {
  if (hasRequiredNLTimeUnitWithinFormatParser)
    return NLTimeUnitWithinFormatParser;
  hasRequiredNLTimeUnitWithinFormatParser = 1;
  Object.defineProperty(NLTimeUnitWithinFormatParser, "__esModule", { value: true });
  const constants_12 = constants$3;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  class NLTimeUnitWithinFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return new RegExp(`(?:binnen|in|binnen de|voor)\\s*(` + constants_12.TIME_UNITS_PATTERN + `)(?=\\W|$)`, "i");
    }
    innerExtract(context, match2) {
      const timeUnits = constants_12.parseTimeUnits(match2[1]);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  NLTimeUnitWithinFormatParser.default = NLTimeUnitWithinFormatParser$1;
  return NLTimeUnitWithinFormatParser;
}
var NLWeekdayParser = {};
var hasRequiredNLWeekdayParser;
function requireNLWeekdayParser() {
  if (hasRequiredNLWeekdayParser)
    return NLWeekdayParser;
  hasRequiredNLWeekdayParser = 1;
  Object.defineProperty(NLWeekdayParser, "__esModule", { value: true });
  const constants_12 = constants$3;
  const pattern_12 = pattern;
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const weekdays_1 = requireWeekdays();
  const PATTERN2 = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:op\\s*?)?(?:(deze|vorige|volgende)\\s*(?:week\\s*)?)?(${pattern_12.matchAnyPattern(constants_12.WEEKDAY_DICTIONARY)})(?=\\W|$)`, "i");
  const PREFIX_GROUP2 = 1;
  const WEEKDAY_GROUP = 2;
  const POSTFIX_GROUP = 3;
  class NLWeekdayParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const dayOfWeek = match2[WEEKDAY_GROUP].toLowerCase();
      const weekday = constants_12.WEEKDAY_DICTIONARY[dayOfWeek];
      const prefix = match2[PREFIX_GROUP2];
      const postfix = match2[POSTFIX_GROUP];
      let modifierWord = prefix || postfix;
      modifierWord = modifierWord || "";
      modifierWord = modifierWord.toLowerCase();
      let modifier = null;
      if (modifierWord == "vorige") {
        modifier = "last";
      } else if (modifierWord == "volgende") {
        modifier = "next";
      } else if (modifierWord == "deze") {
        modifier = "this";
      }
      return weekdays_1.createParsingComponentsAtWeekday(context.reference, weekday, modifier);
    }
  }
  NLWeekdayParser.default = NLWeekdayParser$1;
  return NLWeekdayParser;
}
var NLMonthNameMiddleEndianParser$1 = {};
Object.defineProperty(NLMonthNameMiddleEndianParser$1, "__esModule", { value: true });
const years_1$3 = years;
const constants_1$e = constants$3;
const constants_2$3 = constants$3;
const constants_3$1 = constants$3;
const pattern_1$4 = pattern;
const AbstractParserWithWordBoundary_1$h = AbstractParserWithWordBoundary;
const PATTERN$b = new RegExp(`(?:on\\s*?)?(${constants_2$3.ORDINAL_NUMBER_PATTERN})(?:\\s*(?:tot|\\-|\\\u2013|until|through|till|\\s)\\s*(${constants_2$3.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s*(?:of)?\\s*)(` + pattern_1$4.matchAnyPattern(constants_1$e.MONTH_DICTIONARY) + `)(?:(?:-|/|,?\\s*)(${constants_3$1.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`, "i");
const MONTH_NAME_GROUP$4 = 3;
const DATE_GROUP$1 = 1;
const DATE_TO_GROUP$1 = 2;
const YEAR_GROUP$6 = 4;
class NLMonthNameMiddleEndianParser extends AbstractParserWithWordBoundary_1$h.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$b;
  }
  innerExtract(context, match2) {
    const month = constants_1$e.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$4].toLowerCase()];
    const day = constants_2$3.parseOrdinalNumberPattern(match2[DATE_GROUP$1]);
    if (day > 31) {
      match2.index = match2.index + match2[DATE_GROUP$1].length;
      return null;
    }
    const components = context.createParsingComponents({
      day,
      month
    });
    if (match2[YEAR_GROUP$6]) {
      const year = constants_3$1.parseYear(match2[YEAR_GROUP$6]);
      components.assign("year", year);
    } else {
      const year = years_1$3.findYearClosestToRef(context.refDate, day, month);
      components.imply("year", year);
    }
    if (!match2[DATE_TO_GROUP$1]) {
      return components;
    }
    const endDate = constants_2$3.parseOrdinalNumberPattern(match2[DATE_TO_GROUP$1]);
    const result = context.createParsingResult(match2.index, match2[0]);
    result.start = components;
    result.end = components.clone();
    result.end.assign("day", endDate);
    return result;
  }
}
NLMonthNameMiddleEndianParser$1.default = NLMonthNameMiddleEndianParser;
var NLMonthNameParser$1 = {};
Object.defineProperty(NLMonthNameParser$1, "__esModule", { value: true });
const constants_1$d = constants$3;
const years_1$2 = years;
const pattern_1$3 = pattern;
const constants_2$2 = constants$3;
const AbstractParserWithWordBoundary_1$g = AbstractParserWithWordBoundary;
const PATTERN$a = new RegExp(`(${pattern_1$3.matchAnyPattern(constants_1$d.MONTH_DICTIONARY)})\\s*(?:[,-]?\\s*(${constants_2$2.YEAR_PATTERN})?)?(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`, "i");
const MONTH_NAME_GROUP$3 = 1;
const YEAR_GROUP$5 = 2;
class NLMonthNameParser extends AbstractParserWithWordBoundary_1$g.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$a;
  }
  innerExtract(context, match2) {
    const components = context.createParsingComponents();
    components.imply("day", 1);
    const monthName = match2[MONTH_NAME_GROUP$3];
    const month = constants_1$d.MONTH_DICTIONARY[monthName.toLowerCase()];
    components.assign("month", month);
    if (match2[YEAR_GROUP$5]) {
      const year = constants_2$2.parseYear(match2[YEAR_GROUP$5]);
      components.assign("year", year);
    } else {
      const year = years_1$2.findYearClosestToRef(context.refDate, 1, month);
      components.imply("year", year);
    }
    return components;
  }
}
NLMonthNameParser$1.default = NLMonthNameParser;
var NLSlashMonthFormatParser$1 = {};
Object.defineProperty(NLSlashMonthFormatParser$1, "__esModule", { value: true });
const AbstractParserWithWordBoundary_1$f = AbstractParserWithWordBoundary;
const PATTERN$9 = new RegExp("([0-9]|0[1-9]|1[012])/([0-9]{4})", "i");
const MONTH_GROUP$2 = 1;
const YEAR_GROUP$4 = 2;
class NLSlashMonthFormatParser extends AbstractParserWithWordBoundary_1$f.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$9;
  }
  innerExtract(context, match2) {
    const year = parseInt(match2[YEAR_GROUP$4]);
    const month = parseInt(match2[MONTH_GROUP$2]);
    return context.createParsingComponents().imply("day", 1).assign("month", month).assign("year", year);
  }
}
NLSlashMonthFormatParser$1.default = NLSlashMonthFormatParser;
var NLTimeExpressionParser = {};
var hasRequiredNLTimeExpressionParser;
function requireNLTimeExpressionParser() {
  if (hasRequiredNLTimeExpressionParser)
    return NLTimeExpressionParser;
  hasRequiredNLTimeExpressionParser = 1;
  Object.defineProperty(NLTimeExpressionParser, "__esModule", { value: true });
  const AbstractTimeExpressionParser_1 = requireAbstractTimeExpressionParser();
  class NLTimeExpressionParser$1 extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
    primaryPrefix() {
      return "(?:(?:om)\\s*)?";
    }
    followingPhase() {
      return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|om|\\?)\\s*";
    }
    primarySuffix() {
      return "(?:\\s*(?:uur))?(?!/)(?=\\W|$)";
    }
    extractPrimaryTimeComponents(context, match2) {
      if (match2[0].match(/^\s*\d{4}\s*$/)) {
        return null;
      }
      return super.extractPrimaryTimeComponents(context, match2);
    }
  }
  NLTimeExpressionParser.default = NLTimeExpressionParser$1;
  return NLTimeExpressionParser;
}
var NLCasualYearMonthDayParser$1 = {};
Object.defineProperty(NLCasualYearMonthDayParser$1, "__esModule", { value: true });
const constants_1$c = constants$3;
const pattern_1$2 = pattern;
const AbstractParserWithWordBoundary_1$e = AbstractParserWithWordBoundary;
const PATTERN$8 = new RegExp(`([0-9]{4})[\\.\\/\\s](?:(${pattern_1$2.matchAnyPattern(constants_1$c.MONTH_DICTIONARY)})|([0-9]{1,2}))[\\.\\/\\s]([0-9]{1,2})(?=\\W|$)`, "i");
const YEAR_NUMBER_GROUP = 1;
const MONTH_NAME_GROUP$2 = 2;
const MONTH_NUMBER_GROUP = 3;
const DATE_NUMBER_GROUP = 4;
class NLCasualYearMonthDayParser extends AbstractParserWithWordBoundary_1$e.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$8;
  }
  innerExtract(context, match2) {
    const month = match2[MONTH_NUMBER_GROUP] ? parseInt(match2[MONTH_NUMBER_GROUP]) : constants_1$c.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$2].toLowerCase()];
    if (month < 1 || month > 12) {
      return null;
    }
    const year = parseInt(match2[YEAR_NUMBER_GROUP]);
    const day = parseInt(match2[DATE_NUMBER_GROUP]);
    return {
      day,
      month,
      year
    };
  }
}
NLCasualYearMonthDayParser$1.default = NLCasualYearMonthDayParser;
var NLCasualDateTimeParser = {};
var hasRequiredNLCasualDateTimeParser;
function requireNLCasualDateTimeParser() {
  if (hasRequiredNLCasualDateTimeParser)
    return NLCasualDateTimeParser;
  hasRequiredNLCasualDateTimeParser = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(NLCasualDateTimeParser, "__esModule", { value: true });
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const index_1 = requireDist();
  const dayjs_12 = requireDayjs();
  const dayjs_2 = __importDefault2(dayjs_min.exports);
  const DATE_GROUP2 = 1;
  const TIME_OF_DAY_GROUP = 2;
  class NLCasualDateTimeParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
      return /(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\W|$)/i;
    }
    innerExtract(context, match2) {
      const dateText = match2[DATE_GROUP2].toLowerCase();
      const timeText = match2[TIME_OF_DAY_GROUP].toLowerCase();
      const component = context.createParsingComponents();
      const targetDate = dayjs_2.default(context.refDate);
      switch (dateText) {
        case "gisteren":
          dayjs_12.assignSimilarDate(component, targetDate.add(-1, "day"));
          break;
        case "van":
          dayjs_12.assignSimilarDate(component, targetDate);
          break;
        case "morgen":
          dayjs_12.assignTheNextDay(component, targetDate);
          break;
      }
      switch (timeText) {
        case "ochtend":
          component.imply("meridiem", index_1.Meridiem.AM);
          component.imply("hour", 6);
          break;
        case "middag":
          component.imply("meridiem", index_1.Meridiem.AM);
          component.imply("hour", 12);
          break;
        case "namiddag":
          component.imply("meridiem", index_1.Meridiem.PM);
          component.imply("hour", 15);
          break;
        case "avond":
          component.imply("meridiem", index_1.Meridiem.PM);
          component.imply("hour", 20);
          break;
      }
      return component;
    }
  }
  NLCasualDateTimeParser.default = NLCasualDateTimeParser$1;
  return NLCasualDateTimeParser;
}
var NLTimeUnitCasualRelativeFormatParser = {};
var hasRequiredNLTimeUnitCasualRelativeFormatParser;
function requireNLTimeUnitCasualRelativeFormatParser() {
  if (hasRequiredNLTimeUnitCasualRelativeFormatParser)
    return NLTimeUnitCasualRelativeFormatParser;
  hasRequiredNLTimeUnitCasualRelativeFormatParser = 1;
  Object.defineProperty(NLTimeUnitCasualRelativeFormatParser, "__esModule", { value: true });
  const constants_12 = constants$3;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  const PATTERN2 = new RegExp(`(deze|vorige|afgelopen|komende|over|\\+|-)\\s*(${constants_12.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
  class NLTimeUnitCasualRelativeFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const prefix = match2[1].toLowerCase();
      let timeUnits = constants_12.parseTimeUnits(match2[2]);
      switch (prefix) {
        case "vorige":
        case "afgelopen":
        case "-":
          timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
          break;
      }
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  NLTimeUnitCasualRelativeFormatParser.default = NLTimeUnitCasualRelativeFormatParser$1;
  return NLTimeUnitCasualRelativeFormatParser;
}
var NLRelativeDateFormatParser = {};
var hasRequiredNLRelativeDateFormatParser;
function requireNLRelativeDateFormatParser() {
  if (hasRequiredNLRelativeDateFormatParser)
    return NLRelativeDateFormatParser;
  hasRequiredNLRelativeDateFormatParser = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(NLRelativeDateFormatParser, "__esModule", { value: true });
  const constants_12 = constants$3;
  const results_1 = requireResults();
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const pattern_12 = pattern;
  const PATTERN2 = new RegExp(`(dit|deze|komende|volgend|volgende|afgelopen|vorige)\\s*(${pattern_12.matchAnyPattern(constants_12.TIME_UNIT_DICTIONARY)})(?=\\s*)(?=\\W|$)`, "i");
  const MODIFIER_WORD_GROUP = 1;
  const RELATIVE_WORD_GROUP = 2;
  class NLRelativeDateFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const modifier = match2[MODIFIER_WORD_GROUP].toLowerCase();
      const unitWord = match2[RELATIVE_WORD_GROUP].toLowerCase();
      const timeunit = constants_12.TIME_UNIT_DICTIONARY[unitWord];
      if (modifier == "volgend" || modifier == "volgende" || modifier == "komende") {
        const timeUnits = {};
        timeUnits[timeunit] = 1;
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
      if (modifier == "afgelopen" || modifier == "vorige") {
        const timeUnits = {};
        timeUnits[timeunit] = -1;
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
      const components = context.createParsingComponents();
      let date = dayjs_12.default(context.reference.instant);
      if (unitWord.match(/week/i)) {
        date = date.add(-date.get("d"), "d");
        components.imply("day", date.date());
        components.imply("month", date.month() + 1);
        components.imply("year", date.year());
      } else if (unitWord.match(/maand/i)) {
        date = date.add(-date.date() + 1, "d");
        components.imply("day", date.date());
        components.assign("year", date.year());
        components.assign("month", date.month() + 1);
      } else if (unitWord.match(/jaar/i)) {
        date = date.add(-date.date() + 1, "d");
        date = date.add(-date.month(), "month");
        components.imply("day", date.date());
        components.imply("month", date.month() + 1);
        components.assign("year", date.year());
      }
      return components;
    }
  }
  NLRelativeDateFormatParser.default = NLRelativeDateFormatParser$1;
  return NLRelativeDateFormatParser;
}
var NLTimeUnitAgoFormatParser = {};
var hasRequiredNLTimeUnitAgoFormatParser;
function requireNLTimeUnitAgoFormatParser() {
  if (hasRequiredNLTimeUnitAgoFormatParser)
    return NLTimeUnitAgoFormatParser;
  hasRequiredNLTimeUnitAgoFormatParser = 1;
  Object.defineProperty(NLTimeUnitAgoFormatParser, "__esModule", { value: true });
  const constants_12 = constants$3;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  const PATTERN2 = new RegExp("(" + constants_12.TIME_UNITS_PATTERN + ")(?:geleden|voor|eerder)(?=(?:\\W|$))", "i");
  const STRICT_PATTERN = new RegExp("(" + constants_12.TIME_UNITS_PATTERN + ")geleden(?=(?:\\W|$))", "i");
  class NLTimeUnitAgoFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
      super();
      this.strictMode = strictMode;
    }
    innerPattern() {
      return this.strictMode ? STRICT_PATTERN : PATTERN2;
    }
    innerExtract(context, match2) {
      const timeUnits = constants_12.parseTimeUnits(match2[1]);
      const outputTimeUnits = timeunits_1.reverseTimeUnits(timeUnits);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
  }
  NLTimeUnitAgoFormatParser.default = NLTimeUnitAgoFormatParser$1;
  return NLTimeUnitAgoFormatParser;
}
var NLTimeUnitLaterFormatParser = {};
var hasRequiredNLTimeUnitLaterFormatParser;
function requireNLTimeUnitLaterFormatParser() {
  if (hasRequiredNLTimeUnitLaterFormatParser)
    return NLTimeUnitLaterFormatParser;
  hasRequiredNLTimeUnitLaterFormatParser = 1;
  Object.defineProperty(NLTimeUnitLaterFormatParser, "__esModule", { value: true });
  const constants_12 = constants$3;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const PATTERN2 = new RegExp("(" + constants_12.TIME_UNITS_PATTERN + ")(later|na|vanaf nu|voortaan|vooruit|uit)(?=(?:\\W|$))", "i");
  const STRICT_PATTERN = new RegExp("(" + constants_12.TIME_UNITS_PATTERN + ")(later|vanaf nu)(?=(?:\\W|$))", "i");
  const GROUP_NUM_TIMEUNITS = 1;
  class NLTimeUnitLaterFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
      super();
      this.strictMode = strictMode;
    }
    innerPattern() {
      return this.strictMode ? STRICT_PATTERN : PATTERN2;
    }
    innerExtract(context, match2) {
      const fragments = constants_12.parseTimeUnits(match2[GROUP_NUM_TIMEUNITS]);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, fragments);
    }
  }
  NLTimeUnitLaterFormatParser.default = NLTimeUnitLaterFormatParser$1;
  return NLTimeUnitLaterFormatParser;
}
var hasRequiredNl;
function requireNl() {
  if (hasRequiredNl)
    return nl;
  hasRequiredNl = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.strict = exports2.casual = void 0;
    const configurations_1 = requireConfigurations();
    const chrono_1 = requireChrono();
    const NLMergeDateRangeRefiner_1 = __importDefault2(NLMergeDateRangeRefiner$1);
    const NLMergeDateTimeRefiner_1 = __importDefault2(requireNLMergeDateTimeRefiner());
    const NLCasualDateParser_1 = __importDefault2(requireNLCasualDateParser());
    const NLCasualTimeParser_1 = __importDefault2(requireNLCasualTimeParser());
    const SlashDateFormatParser_1 = __importDefault2(SlashDateFormatParser$1);
    const NLTimeUnitWithinFormatParser_1 = __importDefault2(requireNLTimeUnitWithinFormatParser());
    const NLWeekdayParser_1 = __importDefault2(requireNLWeekdayParser());
    const NLMonthNameMiddleEndianParser_1 = __importDefault2(NLMonthNameMiddleEndianParser$1);
    const NLMonthNameParser_1 = __importDefault2(NLMonthNameParser$1);
    const NLSlashMonthFormatParser_1 = __importDefault2(NLSlashMonthFormatParser$1);
    const NLTimeExpressionParser_1 = __importDefault2(requireNLTimeExpressionParser());
    const NLCasualYearMonthDayParser_1 = __importDefault2(NLCasualYearMonthDayParser$1);
    const NLCasualDateTimeParser_1 = __importDefault2(requireNLCasualDateTimeParser());
    const NLTimeUnitCasualRelativeFormatParser_1 = __importDefault2(requireNLTimeUnitCasualRelativeFormatParser());
    const NLRelativeDateFormatParser_1 = __importDefault2(requireNLRelativeDateFormatParser());
    const NLTimeUnitAgoFormatParser_1 = __importDefault2(requireNLTimeUnitAgoFormatParser());
    const NLTimeUnitLaterFormatParser_1 = __importDefault2(requireNLTimeUnitLaterFormatParser());
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports2.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration(littleEndian = true) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.unshift(new NLCasualDateParser_1.default());
      option.parsers.unshift(new NLCasualTimeParser_1.default());
      option.parsers.unshift(new NLCasualDateTimeParser_1.default());
      option.parsers.unshift(new NLMonthNameParser_1.default());
      option.parsers.unshift(new NLRelativeDateFormatParser_1.default());
      option.parsers.unshift(new NLTimeUnitCasualRelativeFormatParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(littleEndian),
          new NLTimeUnitWithinFormatParser_1.default(),
          new NLMonthNameMiddleEndianParser_1.default(),
          new NLMonthNameParser_1.default(),
          new NLWeekdayParser_1.default(),
          new NLCasualYearMonthDayParser_1.default(),
          new NLSlashMonthFormatParser_1.default(),
          new NLTimeExpressionParser_1.default(strictMode),
          new NLTimeUnitAgoFormatParser_1.default(strictMode),
          new NLTimeUnitLaterFormatParser_1.default(strictMode)
        ],
        refiners: [new NLMergeDateTimeRefiner_1.default(), new NLMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports2.createConfiguration = createConfiguration;
  })(nl);
  return nl;
}
var zh = {};
var hant = {};
var ZHHantCasualDateParser$1 = {};
var __importDefault$e = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHantCasualDateParser$1, "__esModule", { value: true });
const dayjs_1$b = __importDefault$e(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$d = AbstractParserWithWordBoundary;
const NOW_GROUP$1 = 1;
const DAY_GROUP_1$3 = 2;
const TIME_GROUP_1$1 = 3;
const TIME_GROUP_2$1 = 4;
const DAY_GROUP_3$3 = 5;
const TIME_GROUP_3$1 = 6;
class ZHHantCasualDateParser extends AbstractParserWithWordBoundary_1$d.AbstractParserWithWordBoundaryChecking {
  innerPattern(context) {
    return new RegExp("(\u800C\u5BB6|\u7ACB(?:\u523B|\u5373)|\u5373\u523B)|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)(?:[\\s|,|\uFF0C]*)(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?", "i");
  }
  innerExtract(context, match2) {
    const index = match2.index;
    const result = context.createParsingResult(index, match2[0]);
    const refMoment = dayjs_1$b.default(context.refDate);
    let startMoment = refMoment;
    if (match2[NOW_GROUP$1]) {
      result.start.imply("hour", refMoment.hour());
      result.start.imply("minute", refMoment.minute());
      result.start.imply("second", refMoment.second());
      result.start.imply("millisecond", refMoment.millisecond());
    } else if (match2[DAY_GROUP_1$3]) {
      const day1 = match2[DAY_GROUP_1$3];
      const time1 = match2[TIME_GROUP_1$1];
      if (day1 == "\u660E" || day1 == "\u807D") {
        if (refMoment.hour() > 1) {
          startMoment = startMoment.add(1, "day");
        }
      } else if (day1 == "\u6628" || day1 == "\u5C0B" || day1 == "\u7434") {
        startMoment = startMoment.add(-1, "day");
      } else if (day1 == "\u524D") {
        startMoment = startMoment.add(-2, "day");
      } else if (day1 == "\u5927\u524D") {
        startMoment = startMoment.add(-3, "day");
      } else if (day1 == "\u5F8C") {
        startMoment = startMoment.add(2, "day");
      } else if (day1 == "\u5927\u5F8C") {
        startMoment = startMoment.add(3, "day");
      }
      if (time1 == "\u65E9" || time1 == "\u671D") {
        result.start.imply("hour", 6);
      } else if (time1 == "\u665A") {
        result.start.imply("hour", 22);
        result.start.imply("meridiem", 1);
      }
    } else if (match2[TIME_GROUP_2$1]) {
      const timeString2 = match2[TIME_GROUP_2$1];
      const time2 = timeString2[0];
      if (time2 == "\u65E9" || time2 == "\u671D" || time2 == "\u4E0A") {
        result.start.imply("hour", 6);
      } else if (time2 == "\u4E0B" || time2 == "\u664F") {
        result.start.imply("hour", 15);
        result.start.imply("meridiem", 1);
      } else if (time2 == "\u4E2D") {
        result.start.imply("hour", 12);
        result.start.imply("meridiem", 1);
      } else if (time2 == "\u591C" || time2 == "\u665A") {
        result.start.imply("hour", 22);
        result.start.imply("meridiem", 1);
      } else if (time2 == "\u51CC") {
        result.start.imply("hour", 0);
      }
    } else if (match2[DAY_GROUP_3$3]) {
      const day3 = match2[DAY_GROUP_3$3];
      if (day3 == "\u660E" || day3 == "\u807D") {
        if (refMoment.hour() > 1) {
          startMoment = startMoment.add(1, "day");
        }
      } else if (day3 == "\u6628" || day3 == "\u5C0B" || day3 == "\u7434") {
        startMoment = startMoment.add(-1, "day");
      } else if (day3 == "\u524D") {
        startMoment = startMoment.add(-2, "day");
      } else if (day3 == "\u5927\u524D") {
        startMoment = startMoment.add(-3, "day");
      } else if (day3 == "\u5F8C") {
        startMoment = startMoment.add(2, "day");
      } else if (day3 == "\u5927\u5F8C") {
        startMoment = startMoment.add(3, "day");
      }
      const timeString3 = match2[TIME_GROUP_3$1];
      if (timeString3) {
        const time3 = timeString3[0];
        if (time3 == "\u65E9" || time3 == "\u671D" || time3 == "\u4E0A") {
          result.start.imply("hour", 6);
        } else if (time3 == "\u4E0B" || time3 == "\u664F") {
          result.start.imply("hour", 15);
          result.start.imply("meridiem", 1);
        } else if (time3 == "\u4E2D") {
          result.start.imply("hour", 12);
          result.start.imply("meridiem", 1);
        } else if (time3 == "\u591C" || time3 == "\u665A") {
          result.start.imply("hour", 22);
          result.start.imply("meridiem", 1);
        } else if (time3 == "\u51CC") {
          result.start.imply("hour", 0);
        }
      }
    }
    result.start.assign("day", startMoment.date());
    result.start.assign("month", startMoment.month() + 1);
    result.start.assign("year", startMoment.year());
    return result;
  }
}
ZHHantCasualDateParser$1.default = ZHHantCasualDateParser;
var ZHHantDateParser$1 = {};
var constants$2 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.zhStringToYear = exports2.zhStringToNumber = exports2.WEEKDAY_OFFSET = exports2.NUMBER = void 0;
  exports2.NUMBER = {
    "\u96F6": 0,
    "\u4E00": 1,
    "\u4E8C": 2,
    "\u5169": 2,
    "\u4E09": 3,
    "\u56DB": 4,
    "\u4E94": 5,
    "\u516D": 6,
    "\u4E03": 7,
    "\u516B": 8,
    "\u4E5D": 9,
    "\u5341": 10,
    "\u5EFF": 20,
    "\u5345": 30
  };
  exports2.WEEKDAY_OFFSET = {
    "\u5929": 0,
    "\u65E5": 0,
    "\u4E00": 1,
    "\u4E8C": 2,
    "\u4E09": 3,
    "\u56DB": 4,
    "\u4E94": 5,
    "\u516D": 6
  };
  function zhStringToNumber(text2) {
    let number = 0;
    for (let i2 = 0; i2 < text2.length; i2++) {
      const char = text2[i2];
      if (char === "\u5341") {
        number = number === 0 ? exports2.NUMBER[char] : number * exports2.NUMBER[char];
      } else {
        number += exports2.NUMBER[char];
      }
    }
    return number;
  }
  exports2.zhStringToNumber = zhStringToNumber;
  function zhStringToYear(text2) {
    let string = "";
    for (let i2 = 0; i2 < text2.length; i2++) {
      const char = text2[i2];
      string = string + exports2.NUMBER[char];
    }
    return parseInt(string);
  }
  exports2.zhStringToYear = zhStringToYear;
})(constants$2);
var __importDefault$d = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHantDateParser$1, "__esModule", { value: true });
const dayjs_1$a = __importDefault$d(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$c = AbstractParserWithWordBoundary;
const constants_1$b = constants$2;
const YEAR_GROUP$3 = 1;
const MONTH_GROUP$1 = 2;
const DAY_GROUP$1 = 3;
class ZHHantDateParser extends AbstractParserWithWordBoundary_1$c.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return new RegExp("(\\d{2,4}|[" + Object.keys(constants_1$b.NUMBER).join("") + "]{4}|[" + Object.keys(constants_1$b.NUMBER).join("") + "]{2})?(?:\\s*)(?:\u5E74)?(?:[\\s|,|\uFF0C]*)(\\d{1,2}|[" + Object.keys(constants_1$b.NUMBER).join("") + "]{1,2})(?:\\s*)(?:\u6708)(?:\\s*)(\\d{1,2}|[" + Object.keys(constants_1$b.NUMBER).join("") + "]{1,2})?(?:\\s*)(?:\u65E5|\u865F)?");
  }
  innerExtract(context, match2) {
    const startMoment = dayjs_1$a.default(context.refDate);
    const result = context.createParsingResult(match2.index, match2[0]);
    let month = parseInt(match2[MONTH_GROUP$1]);
    if (isNaN(month))
      month = constants_1$b.zhStringToNumber(match2[MONTH_GROUP$1]);
    result.start.assign("month", month);
    if (match2[DAY_GROUP$1]) {
      let day = parseInt(match2[DAY_GROUP$1]);
      if (isNaN(day))
        day = constants_1$b.zhStringToNumber(match2[DAY_GROUP$1]);
      result.start.assign("day", day);
    } else {
      result.start.imply("day", startMoment.date());
    }
    if (match2[YEAR_GROUP$3]) {
      let year = parseInt(match2[YEAR_GROUP$3]);
      if (isNaN(year))
        year = constants_1$b.zhStringToYear(match2[YEAR_GROUP$3]);
      result.start.assign("year", year);
    } else {
      result.start.imply("year", startMoment.year());
    }
    return result;
  }
}
ZHHantDateParser$1.default = ZHHantDateParser;
var ZHHantDeadlineFormatParser$1 = {};
var __importDefault$c = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHantDeadlineFormatParser$1, "__esModule", { value: true });
const dayjs_1$9 = __importDefault$c(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$b = AbstractParserWithWordBoundary;
const constants_1$a = constants$2;
const PATTERN$7 = new RegExp("(\\d+|[" + Object.keys(constants_1$a.NUMBER).join("") + "]+|\u534A|\u5E7E)(?:\\s*)(?:\u500B)?(\u79D2(?:\u9418)?|\u5206\u9418|\u5C0F\u6642|\u9418|\u65E5|\u5929|\u661F\u671F|\u79AE\u62DC|\u6708|\u5E74)(?:(?:\u4E4B|\u904E)?\u5F8C|(?:\u4E4B)?\u5167)", "i");
const NUMBER_GROUP$1 = 1;
const UNIT_GROUP$1 = 2;
class ZHHantDeadlineFormatParser extends AbstractParserWithWordBoundary_1$b.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$7;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    let number = parseInt(match2[NUMBER_GROUP$1]);
    if (isNaN(number)) {
      number = constants_1$a.zhStringToNumber(match2[NUMBER_GROUP$1]);
    }
    if (isNaN(number)) {
      const string = match2[NUMBER_GROUP$1];
      if (string === "\u5E7E") {
        number = 3;
      } else if (string === "\u534A") {
        number = 0.5;
      } else {
        return null;
      }
    }
    let date = dayjs_1$9.default(context.refDate);
    const unit = match2[UNIT_GROUP$1];
    const unitAbbr = unit[0];
    if (unitAbbr.match(/[日天星禮月年]/)) {
      if (unitAbbr == "\u65E5" || unitAbbr == "\u5929") {
        date = date.add(number, "d");
      } else if (unitAbbr == "\u661F" || unitAbbr == "\u79AE") {
        date = date.add(number * 7, "d");
      } else if (unitAbbr == "\u6708") {
        date = date.add(number, "month");
      } else if (unitAbbr == "\u5E74") {
        date = date.add(number, "year");
      }
      result.start.assign("year", date.year());
      result.start.assign("month", date.month() + 1);
      result.start.assign("day", date.date());
      return result;
    }
    if (unitAbbr == "\u79D2") {
      date = date.add(number, "second");
    } else if (unitAbbr == "\u5206") {
      date = date.add(number, "minute");
    } else if (unitAbbr == "\u5C0F" || unitAbbr == "\u9418") {
      date = date.add(number, "hour");
    }
    result.start.imply("year", date.year());
    result.start.imply("month", date.month() + 1);
    result.start.imply("day", date.date());
    result.start.assign("hour", date.hour());
    result.start.assign("minute", date.minute());
    result.start.assign("second", date.second());
    return result;
  }
}
ZHHantDeadlineFormatParser$1.default = ZHHantDeadlineFormatParser;
var ZHHantRelationWeekdayParser$1 = {};
var __importDefault$b = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHantRelationWeekdayParser$1, "__esModule", { value: true });
const dayjs_1$8 = __importDefault$b(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$a = AbstractParserWithWordBoundary;
const constants_1$9 = constants$2;
const PATTERN$6 = new RegExp("(?<prefix>\u4E0A|\u4ECA|\u4E0B|\u9019|\u5462)(?:\u500B)?(?:\u661F\u671F|\u79AE\u62DC|\u9031)(?<weekday>" + Object.keys(constants_1$9.WEEKDAY_OFFSET).join("|") + ")");
class ZHHantRelationWeekdayParser extends AbstractParserWithWordBoundary_1$a.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$6;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const dayOfWeek = match2.groups.weekday;
    const offset2 = constants_1$9.WEEKDAY_OFFSET[dayOfWeek];
    if (offset2 === void 0)
      return null;
    let modifier = null;
    const prefix = match2.groups.prefix;
    if (prefix == "\u4E0A") {
      modifier = "last";
    } else if (prefix == "\u4E0B") {
      modifier = "next";
    } else if (prefix == "\u4ECA" || prefix == "\u9019" || prefix == "\u5462") {
      modifier = "this";
    }
    let startMoment = dayjs_1$8.default(context.refDate);
    let startMomentFixed = false;
    const refOffset = startMoment.day();
    if (modifier == "last" || modifier == "past") {
      startMoment = startMoment.day(offset2 - 7);
      startMomentFixed = true;
    } else if (modifier == "next") {
      startMoment = startMoment.day(offset2 + 7);
      startMomentFixed = true;
    } else if (modifier == "this") {
      startMoment = startMoment.day(offset2);
    } else {
      if (Math.abs(offset2 - 7 - refOffset) < Math.abs(offset2 - refOffset)) {
        startMoment = startMoment.day(offset2 - 7);
      } else if (Math.abs(offset2 + 7 - refOffset) < Math.abs(offset2 - refOffset)) {
        startMoment = startMoment.day(offset2 + 7);
      } else {
        startMoment = startMoment.day(offset2);
      }
    }
    result.start.assign("weekday", offset2);
    if (startMomentFixed) {
      result.start.assign("day", startMoment.date());
      result.start.assign("month", startMoment.month() + 1);
      result.start.assign("year", startMoment.year());
    } else {
      result.start.imply("day", startMoment.date());
      result.start.imply("month", startMoment.month() + 1);
      result.start.imply("year", startMoment.year());
    }
    return result;
  }
}
ZHHantRelationWeekdayParser$1.default = ZHHantRelationWeekdayParser;
var ZHHantTimeExpressionParser$1 = {};
var __importDefault$a = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHantTimeExpressionParser$1, "__esModule", { value: true });
const dayjs_1$7 = __importDefault$a(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$9 = AbstractParserWithWordBoundary;
const constants_1$8 = constants$2;
const FIRST_REG_PATTERN$1 = new RegExp("(?:\u7531|\u5F9E|\u81EA)?(?:(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)(?:[\\s,\uFF0C]*)(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?)?(?:[\\s,\uFF0C]*)(?:(\\d+|[" + Object.keys(constants_1$8.NUMBER).join("") + "]+)(?:\\s*)(?:\u9EDE|\u6642|:|\uFF1A)(?:\\s*)(\\d+|\u534A|\u6B63|\u6574|[" + Object.keys(constants_1$8.NUMBER).join("") + "]+)?(?:\\s*)(?:\u5206|:|\uFF1A)?(?:\\s*)(\\d+|[" + Object.keys(constants_1$8.NUMBER).join("") + "]+)?(?:\\s*)(?:\u79D2)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
const SECOND_REG_PATTERN$1 = new RegExp("(?:^\\s*(?:\u5230|\u81F3|\\-|\\\u2013|\\~|\\\u301C)\\s*)(?:(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)(?:[\\s,\uFF0C]*)(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?)?(?:[\\s,\uFF0C]*)(?:(\\d+|[" + Object.keys(constants_1$8.NUMBER).join("") + "]+)(?:\\s*)(?:\u9EDE|\u6642|:|\uFF1A)(?:\\s*)(\\d+|\u534A|\u6B63|\u6574|[" + Object.keys(constants_1$8.NUMBER).join("") + "]+)?(?:\\s*)(?:\u5206|:|\uFF1A)?(?:\\s*)(\\d+|[" + Object.keys(constants_1$8.NUMBER).join("") + "]+)?(?:\\s*)(?:\u79D2)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
const DAY_GROUP_1$2 = 1;
const ZH_AM_PM_HOUR_GROUP_1$1 = 2;
const ZH_AM_PM_HOUR_GROUP_2$1 = 3;
const DAY_GROUP_3$2 = 4;
const ZH_AM_PM_HOUR_GROUP_3$1 = 5;
const HOUR_GROUP$1 = 6;
const MINUTE_GROUP$1 = 7;
const SECOND_GROUP$1 = 8;
const AM_PM_HOUR_GROUP$1 = 9;
class ZHHantTimeExpressionParser extends AbstractParserWithWordBoundary_1$9.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return FIRST_REG_PATTERN$1;
  }
  innerExtract(context, match2) {
    if (match2.index > 0 && context.text[match2.index - 1].match(/\w/)) {
      return null;
    }
    const refMoment = dayjs_1$7.default(context.refDate);
    const result = context.createParsingResult(match2.index, match2[0]);
    let startMoment = refMoment.clone();
    if (match2[DAY_GROUP_1$2]) {
      var day1 = match2[DAY_GROUP_1$2];
      if (day1 == "\u660E" || day1 == "\u807D") {
        if (refMoment.hour() > 1) {
          startMoment = startMoment.add(1, "day");
        }
      } else if (day1 == "\u6628" || day1 == "\u5C0B" || day1 == "\u7434") {
        startMoment = startMoment.add(-1, "day");
      } else if (day1 == "\u524D") {
        startMoment = startMoment.add(-2, "day");
      } else if (day1 == "\u5927\u524D") {
        startMoment = startMoment.add(-3, "day");
      } else if (day1 == "\u5F8C") {
        startMoment = startMoment.add(2, "day");
      } else if (day1 == "\u5927\u5F8C") {
        startMoment = startMoment.add(3, "day");
      }
      result.start.assign("day", startMoment.date());
      result.start.assign("month", startMoment.month() + 1);
      result.start.assign("year", startMoment.year());
    } else if (match2[DAY_GROUP_3$2]) {
      var day3 = match2[DAY_GROUP_3$2];
      if (day3 == "\u660E" || day3 == "\u807D") {
        startMoment = startMoment.add(1, "day");
      } else if (day3 == "\u6628" || day3 == "\u5C0B" || day3 == "\u7434") {
        startMoment = startMoment.add(-1, "day");
      } else if (day3 == "\u524D") {
        startMoment = startMoment.add(-2, "day");
      } else if (day3 == "\u5927\u524D") {
        startMoment = startMoment.add(-3, "day");
      } else if (day3 == "\u5F8C") {
        startMoment = startMoment.add(2, "day");
      } else if (day3 == "\u5927\u5F8C") {
        startMoment = startMoment.add(3, "day");
      }
      result.start.assign("day", startMoment.date());
      result.start.assign("month", startMoment.month() + 1);
      result.start.assign("year", startMoment.year());
    } else {
      result.start.imply("day", startMoment.date());
      result.start.imply("month", startMoment.month() + 1);
      result.start.imply("year", startMoment.year());
    }
    let hour = 0;
    let minute = 0;
    let meridiem = -1;
    if (match2[SECOND_GROUP$1]) {
      var second = parseInt(match2[SECOND_GROUP$1]);
      if (isNaN(second)) {
        second = constants_1$8.zhStringToNumber(match2[SECOND_GROUP$1]);
      }
      if (second >= 60)
        return null;
      result.start.assign("second", second);
    }
    hour = parseInt(match2[HOUR_GROUP$1]);
    if (isNaN(hour)) {
      hour = constants_1$8.zhStringToNumber(match2[HOUR_GROUP$1]);
    }
    if (match2[MINUTE_GROUP$1]) {
      if (match2[MINUTE_GROUP$1] == "\u534A") {
        minute = 30;
      } else if (match2[MINUTE_GROUP$1] == "\u6B63" || match2[MINUTE_GROUP$1] == "\u6574") {
        minute = 0;
      } else {
        minute = parseInt(match2[MINUTE_GROUP$1]);
        if (isNaN(minute)) {
          minute = constants_1$8.zhStringToNumber(match2[MINUTE_GROUP$1]);
        }
      }
    } else if (hour > 100) {
      minute = hour % 100;
      hour = Math.floor(hour / 100);
    }
    if (minute >= 60) {
      return null;
    }
    if (hour > 24) {
      return null;
    }
    if (hour >= 12) {
      meridiem = 1;
    }
    if (match2[AM_PM_HOUR_GROUP$1]) {
      if (hour > 12)
        return null;
      var ampm = match2[AM_PM_HOUR_GROUP$1][0].toLowerCase();
      if (ampm == "a") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      }
      if (ampm == "p") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_1$1]) {
      var zhAMPMString1 = match2[ZH_AM_PM_HOUR_GROUP_1$1];
      var zhAMPM1 = zhAMPMString1[0];
      if (zhAMPM1 == "\u671D" || zhAMPM1 == "\u65E9") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM1 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_2$1]) {
      var zhAMPMString2 = match2[ZH_AM_PM_HOUR_GROUP_2$1];
      var zhAMPM2 = zhAMPMString2[0];
      if (zhAMPM2 == "\u4E0A" || zhAMPM2 == "\u671D" || zhAMPM2 == "\u65E9" || zhAMPM2 == "\u51CC") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM2 == "\u4E0B" || zhAMPM2 == "\u664F" || zhAMPM2 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_3$1]) {
      var zhAMPMString3 = match2[ZH_AM_PM_HOUR_GROUP_3$1];
      var zhAMPM3 = zhAMPMString3[0];
      if (zhAMPM3 == "\u4E0A" || zhAMPM3 == "\u671D" || zhAMPM3 == "\u65E9" || zhAMPM3 == "\u51CC") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM3 == "\u4E0B" || zhAMPM3 == "\u664F" || zhAMPM3 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    }
    result.start.assign("hour", hour);
    result.start.assign("minute", minute);
    if (meridiem >= 0) {
      result.start.assign("meridiem", meridiem);
    } else {
      if (hour < 12) {
        result.start.imply("meridiem", 0);
      } else {
        result.start.imply("meridiem", 1);
      }
    }
    match2 = SECOND_REG_PATTERN$1.exec(context.text.substring(result.index + result.text.length));
    if (!match2) {
      if (result.text.match(/^\d+$/)) {
        return null;
      }
      return result;
    }
    let endMoment = startMoment.clone();
    result.end = context.createParsingComponents();
    if (match2[DAY_GROUP_1$2]) {
      var day1 = match2[DAY_GROUP_1$2];
      if (day1 == "\u660E" || day1 == "\u807D") {
        if (refMoment.hour() > 1) {
          endMoment = endMoment.add(1, "day");
        }
      } else if (day1 == "\u6628" || day1 == "\u5C0B" || day1 == "\u7434") {
        endMoment = endMoment.add(-1, "day");
      } else if (day1 == "\u524D") {
        endMoment = endMoment.add(-2, "day");
      } else if (day1 == "\u5927\u524D") {
        endMoment = endMoment.add(-3, "day");
      } else if (day1 == "\u5F8C") {
        endMoment = endMoment.add(2, "day");
      } else if (day1 == "\u5927\u5F8C") {
        endMoment = endMoment.add(3, "day");
      }
      result.end.assign("day", endMoment.date());
      result.end.assign("month", endMoment.month() + 1);
      result.end.assign("year", endMoment.year());
    } else if (match2[DAY_GROUP_3$2]) {
      var day3 = match2[DAY_GROUP_3$2];
      if (day3 == "\u660E" || day3 == "\u807D") {
        endMoment = endMoment.add(1, "day");
      } else if (day3 == "\u6628" || day3 == "\u5C0B" || day3 == "\u7434") {
        endMoment = endMoment.add(-1, "day");
      } else if (day3 == "\u524D") {
        endMoment = endMoment.add(-2, "day");
      } else if (day3 == "\u5927\u524D") {
        endMoment = endMoment.add(-3, "day");
      } else if (day3 == "\u5F8C") {
        endMoment = endMoment.add(2, "day");
      } else if (day3 == "\u5927\u5F8C") {
        endMoment = endMoment.add(3, "day");
      }
      result.end.assign("day", endMoment.date());
      result.end.assign("month", endMoment.month() + 1);
      result.end.assign("year", endMoment.year());
    } else {
      result.end.imply("day", endMoment.date());
      result.end.imply("month", endMoment.month() + 1);
      result.end.imply("year", endMoment.year());
    }
    hour = 0;
    minute = 0;
    meridiem = -1;
    if (match2[SECOND_GROUP$1]) {
      var second = parseInt(match2[SECOND_GROUP$1]);
      if (isNaN(second)) {
        second = constants_1$8.zhStringToNumber(match2[SECOND_GROUP$1]);
      }
      if (second >= 60)
        return null;
      result.end.assign("second", second);
    }
    hour = parseInt(match2[HOUR_GROUP$1]);
    if (isNaN(hour)) {
      hour = constants_1$8.zhStringToNumber(match2[HOUR_GROUP$1]);
    }
    if (match2[MINUTE_GROUP$1]) {
      if (match2[MINUTE_GROUP$1] == "\u534A") {
        minute = 30;
      } else if (match2[MINUTE_GROUP$1] == "\u6B63" || match2[MINUTE_GROUP$1] == "\u6574") {
        minute = 0;
      } else {
        minute = parseInt(match2[MINUTE_GROUP$1]);
        if (isNaN(minute)) {
          minute = constants_1$8.zhStringToNumber(match2[MINUTE_GROUP$1]);
        }
      }
    } else if (hour > 100) {
      minute = hour % 100;
      hour = Math.floor(hour / 100);
    }
    if (minute >= 60) {
      return null;
    }
    if (hour > 24) {
      return null;
    }
    if (hour >= 12) {
      meridiem = 1;
    }
    if (match2[AM_PM_HOUR_GROUP$1]) {
      if (hour > 12)
        return null;
      var ampm = match2[AM_PM_HOUR_GROUP$1][0].toLowerCase();
      if (ampm == "a") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      }
      if (ampm == "p") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
      if (!result.start.isCertain("meridiem")) {
        if (meridiem == 0) {
          result.start.imply("meridiem", 0);
          if (result.start.get("hour") == 12) {
            result.start.assign("hour", 0);
          }
        } else {
          result.start.imply("meridiem", 1);
          if (result.start.get("hour") != 12) {
            result.start.assign("hour", result.start.get("hour") + 12);
          }
        }
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_1$1]) {
      var zhAMPMString1 = match2[ZH_AM_PM_HOUR_GROUP_1$1];
      var zhAMPM1 = zhAMPMString1[0];
      if (zhAMPM1 == "\u671D" || zhAMPM1 == "\u65E9") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM1 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_2$1]) {
      var zhAMPMString2 = match2[ZH_AM_PM_HOUR_GROUP_2$1];
      var zhAMPM2 = zhAMPMString2[0];
      if (zhAMPM2 == "\u4E0A" || zhAMPM2 == "\u671D" || zhAMPM2 == "\u65E9" || zhAMPM2 == "\u51CC") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM2 == "\u4E0B" || zhAMPM2 == "\u664F" || zhAMPM2 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_3$1]) {
      var zhAMPMString3 = match2[ZH_AM_PM_HOUR_GROUP_3$1];
      var zhAMPM3 = zhAMPMString3[0];
      if (zhAMPM3 == "\u4E0A" || zhAMPM3 == "\u671D" || zhAMPM3 == "\u65E9" || zhAMPM3 == "\u51CC") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM3 == "\u4E0B" || zhAMPM3 == "\u664F" || zhAMPM3 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    }
    result.text = result.text + match2[0];
    result.end.assign("hour", hour);
    result.end.assign("minute", minute);
    if (meridiem >= 0) {
      result.end.assign("meridiem", meridiem);
    } else {
      const startAtPM = result.start.isCertain("meridiem") && result.start.get("meridiem") == 1;
      if (startAtPM && result.start.get("hour") > hour) {
        result.end.imply("meridiem", 0);
      } else if (hour > 12) {
        result.end.imply("meridiem", 1);
      }
    }
    if (result.end.date().getTime() < result.start.date().getTime()) {
      result.end.imply("day", result.end.get("day") + 1);
    }
    return result;
  }
}
ZHHantTimeExpressionParser$1.default = ZHHantTimeExpressionParser;
var ZHHantWeekdayParser$1 = {};
var __importDefault$9 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHantWeekdayParser$1, "__esModule", { value: true });
const dayjs_1$6 = __importDefault$9(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$8 = AbstractParserWithWordBoundary;
const constants_1$7 = constants$2;
const PATTERN$5 = new RegExp("(?:\u661F\u671F|\u79AE\u62DC|\u9031)(?<weekday>" + Object.keys(constants_1$7.WEEKDAY_OFFSET).join("|") + ")");
class ZHHantWeekdayParser extends AbstractParserWithWordBoundary_1$8.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$5;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const dayOfWeek = match2.groups.weekday;
    const offset2 = constants_1$7.WEEKDAY_OFFSET[dayOfWeek];
    if (offset2 === void 0)
      return null;
    let startMoment = dayjs_1$6.default(context.refDate);
    const refOffset = startMoment.day();
    if (Math.abs(offset2 - 7 - refOffset) < Math.abs(offset2 - refOffset)) {
      startMoment = startMoment.day(offset2 - 7);
    } else if (Math.abs(offset2 + 7 - refOffset) < Math.abs(offset2 - refOffset)) {
      startMoment = startMoment.day(offset2 + 7);
    } else {
      startMoment = startMoment.day(offset2);
    }
    result.start.assign("weekday", offset2);
    {
      result.start.imply("day", startMoment.date());
      result.start.imply("month", startMoment.month() + 1);
      result.start.imply("year", startMoment.year());
    }
    return result;
  }
}
ZHHantWeekdayParser$1.default = ZHHantWeekdayParser;
var ZHHantMergeDateRangeRefiner$1 = {};
var __importDefault$8 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHantMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1$2 = __importDefault$8(AbstractMergeDateRangeRefiner$1);
class ZHHantMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1$2.default {
  patternBetween() {
    return /^\s*(至|到|\-|\~|～|－|ー)\s*$/i;
  }
}
ZHHantMergeDateRangeRefiner$1.default = ZHHantMergeDateRangeRefiner;
var ZHHantMergeDateTimeRefiner = {};
var hasRequiredZHHantMergeDateTimeRefiner;
function requireZHHantMergeDateTimeRefiner() {
  if (hasRequiredZHHantMergeDateTimeRefiner)
    return ZHHantMergeDateTimeRefiner;
  hasRequiredZHHantMergeDateTimeRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(ZHHantMergeDateTimeRefiner, "__esModule", { value: true });
  const AbstractMergeDateTimeRefiner_1 = __importDefault2(requireAbstractMergeDateTimeRefiner());
  class ZHHantMergeDateTimeRefiner$1 extends AbstractMergeDateTimeRefiner_1.default {
    patternBetween() {
      return /^\s*$/i;
    }
  }
  ZHHantMergeDateTimeRefiner.default = ZHHantMergeDateTimeRefiner$1;
  return ZHHantMergeDateTimeRefiner;
}
var hasRequiredHant;
function requireHant() {
  if (hasRequiredHant)
    return hant;
  hasRequiredHant = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.strict = exports2.casual = exports2.hant = void 0;
    const chrono_1 = requireChrono();
    const ExtractTimezoneOffsetRefiner_1 = __importDefault2(ExtractTimezoneOffsetRefiner$1);
    const configurations_1 = requireConfigurations();
    const ZHHantCasualDateParser_1 = __importDefault2(ZHHantCasualDateParser$1);
    const ZHHantDateParser_1 = __importDefault2(ZHHantDateParser$1);
    const ZHHantDeadlineFormatParser_1 = __importDefault2(ZHHantDeadlineFormatParser$1);
    const ZHHantRelationWeekdayParser_1 = __importDefault2(ZHHantRelationWeekdayParser$1);
    const ZHHantTimeExpressionParser_1 = __importDefault2(ZHHantTimeExpressionParser$1);
    const ZHHantWeekdayParser_1 = __importDefault2(ZHHantWeekdayParser$1);
    const ZHHantMergeDateRangeRefiner_1 = __importDefault2(ZHHantMergeDateRangeRefiner$1);
    const ZHHantMergeDateTimeRefiner_1 = __importDefault2(requireZHHantMergeDateTimeRefiner());
    exports2.hant = new chrono_1.Chrono(createCasualConfiguration());
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports2.strict = new chrono_1.Chrono(createConfiguration());
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration() {
      const option = createConfiguration();
      option.parsers.unshift(new ZHHantCasualDateParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration() {
      const configuration = configurations_1.includeCommonConfiguration({
        parsers: [
          new ZHHantDateParser_1.default(),
          new ZHHantRelationWeekdayParser_1.default(),
          new ZHHantWeekdayParser_1.default(),
          new ZHHantTimeExpressionParser_1.default(),
          new ZHHantDeadlineFormatParser_1.default()
        ],
        refiners: [new ZHHantMergeDateRangeRefiner_1.default(), new ZHHantMergeDateTimeRefiner_1.default()]
      });
      configuration.refiners = configuration.refiners.filter((refiner) => !(refiner instanceof ExtractTimezoneOffsetRefiner_1.default));
      return configuration;
    }
    exports2.createConfiguration = createConfiguration;
  })(hant);
  return hant;
}
var hans = {};
var ZHHansCasualDateParser$1 = {};
var __importDefault$7 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHansCasualDateParser$1, "__esModule", { value: true });
const dayjs_1$5 = __importDefault$7(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$7 = AbstractParserWithWordBoundary;
const NOW_GROUP = 1;
const DAY_GROUP_1$1 = 2;
const TIME_GROUP_1 = 3;
const TIME_GROUP_2 = 4;
const DAY_GROUP_3$1 = 5;
const TIME_GROUP_3 = 6;
class ZHHansCasualDateParser extends AbstractParserWithWordBoundary_1$7.AbstractParserWithWordBoundaryChecking {
  innerPattern(context) {
    return new RegExp("(\u73B0\u5728|\u7ACB(?:\u523B|\u5373)|\u5373\u523B)|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u665A)|(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)(?:[\\s|,|\uFF0C]*)(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?", "i");
  }
  innerExtract(context, match2) {
    const index = match2.index;
    const result = context.createParsingResult(index, match2[0]);
    const refMoment = dayjs_1$5.default(context.refDate);
    let startMoment = refMoment;
    if (match2[NOW_GROUP]) {
      result.start.imply("hour", refMoment.hour());
      result.start.imply("minute", refMoment.minute());
      result.start.imply("second", refMoment.second());
      result.start.imply("millisecond", refMoment.millisecond());
    } else if (match2[DAY_GROUP_1$1]) {
      const day1 = match2[DAY_GROUP_1$1];
      const time1 = match2[TIME_GROUP_1];
      if (day1 == "\u660E") {
        if (refMoment.hour() > 1) {
          startMoment = startMoment.add(1, "day");
        }
      } else if (day1 == "\u6628") {
        startMoment = startMoment.add(-1, "day");
      } else if (day1 == "\u524D") {
        startMoment = startMoment.add(-2, "day");
      } else if (day1 == "\u5927\u524D") {
        startMoment = startMoment.add(-3, "day");
      } else if (day1 == "\u540E") {
        startMoment = startMoment.add(2, "day");
      } else if (day1 == "\u5927\u540E") {
        startMoment = startMoment.add(3, "day");
      }
      if (time1 == "\u65E9") {
        result.start.imply("hour", 6);
      } else if (time1 == "\u665A") {
        result.start.imply("hour", 22);
        result.start.imply("meridiem", 1);
      }
    } else if (match2[TIME_GROUP_2]) {
      const timeString2 = match2[TIME_GROUP_2];
      const time2 = timeString2[0];
      if (time2 == "\u65E9" || time2 == "\u4E0A") {
        result.start.imply("hour", 6);
      } else if (time2 == "\u4E0B") {
        result.start.imply("hour", 15);
        result.start.imply("meridiem", 1);
      } else if (time2 == "\u4E2D") {
        result.start.imply("hour", 12);
        result.start.imply("meridiem", 1);
      } else if (time2 == "\u591C" || time2 == "\u665A") {
        result.start.imply("hour", 22);
        result.start.imply("meridiem", 1);
      } else if (time2 == "\u51CC") {
        result.start.imply("hour", 0);
      }
    } else if (match2[DAY_GROUP_3$1]) {
      const day3 = match2[DAY_GROUP_3$1];
      if (day3 == "\u660E") {
        if (refMoment.hour() > 1) {
          startMoment = startMoment.add(1, "day");
        }
      } else if (day3 == "\u6628") {
        startMoment = startMoment.add(-1, "day");
      } else if (day3 == "\u524D") {
        startMoment = startMoment.add(-2, "day");
      } else if (day3 == "\u5927\u524D") {
        startMoment = startMoment.add(-3, "day");
      } else if (day3 == "\u540E") {
        startMoment = startMoment.add(2, "day");
      } else if (day3 == "\u5927\u540E") {
        startMoment = startMoment.add(3, "day");
      }
      const timeString3 = match2[TIME_GROUP_3];
      if (timeString3) {
        const time3 = timeString3[0];
        if (time3 == "\u65E9" || time3 == "\u4E0A") {
          result.start.imply("hour", 6);
        } else if (time3 == "\u4E0B") {
          result.start.imply("hour", 15);
          result.start.imply("meridiem", 1);
        } else if (time3 == "\u4E2D") {
          result.start.imply("hour", 12);
          result.start.imply("meridiem", 1);
        } else if (time3 == "\u591C" || time3 == "\u665A") {
          result.start.imply("hour", 22);
          result.start.imply("meridiem", 1);
        } else if (time3 == "\u51CC") {
          result.start.imply("hour", 0);
        }
      }
    }
    result.start.assign("day", startMoment.date());
    result.start.assign("month", startMoment.month() + 1);
    result.start.assign("year", startMoment.year());
    return result;
  }
}
ZHHansCasualDateParser$1.default = ZHHansCasualDateParser;
var ZHHansDateParser$1 = {};
var constants$1 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.zhStringToYear = exports2.zhStringToNumber = exports2.WEEKDAY_OFFSET = exports2.NUMBER = void 0;
  exports2.NUMBER = {
    "\u96F6": 0,
    "\u3007": 0,
    "\u4E00": 1,
    "\u4E8C": 2,
    "\u4E24": 2,
    "\u4E09": 3,
    "\u56DB": 4,
    "\u4E94": 5,
    "\u516D": 6,
    "\u4E03": 7,
    "\u516B": 8,
    "\u4E5D": 9,
    "\u5341": 10
  };
  exports2.WEEKDAY_OFFSET = {
    "\u5929": 0,
    "\u65E5": 0,
    "\u4E00": 1,
    "\u4E8C": 2,
    "\u4E09": 3,
    "\u56DB": 4,
    "\u4E94": 5,
    "\u516D": 6
  };
  function zhStringToNumber(text2) {
    let number = 0;
    for (let i2 = 0; i2 < text2.length; i2++) {
      const char = text2[i2];
      if (char === "\u5341") {
        number = number === 0 ? exports2.NUMBER[char] : number * exports2.NUMBER[char];
      } else {
        number += exports2.NUMBER[char];
      }
    }
    return number;
  }
  exports2.zhStringToNumber = zhStringToNumber;
  function zhStringToYear(text2) {
    let string = "";
    for (let i2 = 0; i2 < text2.length; i2++) {
      const char = text2[i2];
      string = string + exports2.NUMBER[char];
    }
    return parseInt(string);
  }
  exports2.zhStringToYear = zhStringToYear;
})(constants$1);
var __importDefault$6 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHansDateParser$1, "__esModule", { value: true });
const dayjs_1$4 = __importDefault$6(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$6 = AbstractParserWithWordBoundary;
const constants_1$6 = constants$1;
const YEAR_GROUP$2 = 1;
const MONTH_GROUP = 2;
const DAY_GROUP = 3;
class ZHHansDateParser extends AbstractParserWithWordBoundary_1$6.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return new RegExp("(\\d{2,4}|[" + Object.keys(constants_1$6.NUMBER).join("") + "]{4}|[" + Object.keys(constants_1$6.NUMBER).join("") + "]{2})?(?:\\s*)(?:\u5E74)?(?:[\\s|,|\uFF0C]*)(\\d{1,2}|[" + Object.keys(constants_1$6.NUMBER).join("") + "]{1,3})(?:\\s*)(?:\u6708)(?:\\s*)(\\d{1,2}|[" + Object.keys(constants_1$6.NUMBER).join("") + "]{1,3})?(?:\\s*)(?:\u65E5|\u53F7)?");
  }
  innerExtract(context, match2) {
    const startMoment = dayjs_1$4.default(context.refDate);
    const result = context.createParsingResult(match2.index, match2[0]);
    let month = parseInt(match2[MONTH_GROUP]);
    if (isNaN(month))
      month = constants_1$6.zhStringToNumber(match2[MONTH_GROUP]);
    result.start.assign("month", month);
    if (match2[DAY_GROUP]) {
      let day = parseInt(match2[DAY_GROUP]);
      if (isNaN(day))
        day = constants_1$6.zhStringToNumber(match2[DAY_GROUP]);
      result.start.assign("day", day);
    } else {
      result.start.imply("day", startMoment.date());
    }
    if (match2[YEAR_GROUP$2]) {
      let year = parseInt(match2[YEAR_GROUP$2]);
      if (isNaN(year))
        year = constants_1$6.zhStringToYear(match2[YEAR_GROUP$2]);
      result.start.assign("year", year);
    } else {
      result.start.imply("year", startMoment.year());
    }
    return result;
  }
}
ZHHansDateParser$1.default = ZHHansDateParser;
var ZHHansDeadlineFormatParser$1 = {};
var __importDefault$5 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHansDeadlineFormatParser$1, "__esModule", { value: true });
const dayjs_1$3 = __importDefault$5(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$5 = AbstractParserWithWordBoundary;
const constants_1$5 = constants$1;
const PATTERN$4 = new RegExp("(\\d+|[" + Object.keys(constants_1$5.NUMBER).join("") + "]+|\u534A|\u51E0)(?:\\s*)(?:\u4E2A)?(\u79D2(?:\u949F)?|\u5206\u949F|\u5C0F\u65F6|\u949F|\u65E5|\u5929|\u661F\u671F|\u793C\u62DC|\u6708|\u5E74)(?:(?:\u4E4B|\u8FC7)?\u540E|(?:\u4E4B)?\u5185)", "i");
const NUMBER_GROUP = 1;
const UNIT_GROUP = 2;
class ZHHansDeadlineFormatParser extends AbstractParserWithWordBoundary_1$5.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$4;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    let number = parseInt(match2[NUMBER_GROUP]);
    if (isNaN(number)) {
      number = constants_1$5.zhStringToNumber(match2[NUMBER_GROUP]);
    }
    if (isNaN(number)) {
      const string = match2[NUMBER_GROUP];
      if (string === "\u51E0") {
        number = 3;
      } else if (string === "\u534A") {
        number = 0.5;
      } else {
        return null;
      }
    }
    let date = dayjs_1$3.default(context.refDate);
    const unit = match2[UNIT_GROUP];
    const unitAbbr = unit[0];
    if (unitAbbr.match(/[日天星礼月年]/)) {
      if (unitAbbr == "\u65E5" || unitAbbr == "\u5929") {
        date = date.add(number, "d");
      } else if (unitAbbr == "\u661F" || unitAbbr == "\u793C") {
        date = date.add(number * 7, "d");
      } else if (unitAbbr == "\u6708") {
        date = date.add(number, "month");
      } else if (unitAbbr == "\u5E74") {
        date = date.add(number, "year");
      }
      result.start.assign("year", date.year());
      result.start.assign("month", date.month() + 1);
      result.start.assign("day", date.date());
      return result;
    }
    if (unitAbbr == "\u79D2") {
      date = date.add(number, "second");
    } else if (unitAbbr == "\u5206") {
      date = date.add(number, "minute");
    } else if (unitAbbr == "\u5C0F" || unitAbbr == "\u949F") {
      date = date.add(number, "hour");
    }
    result.start.imply("year", date.year());
    result.start.imply("month", date.month() + 1);
    result.start.imply("day", date.date());
    result.start.assign("hour", date.hour());
    result.start.assign("minute", date.minute());
    result.start.assign("second", date.second());
    return result;
  }
}
ZHHansDeadlineFormatParser$1.default = ZHHansDeadlineFormatParser;
var ZHHansRelationWeekdayParser$1 = {};
var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHansRelationWeekdayParser$1, "__esModule", { value: true });
const dayjs_1$2 = __importDefault$4(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$4 = AbstractParserWithWordBoundary;
const constants_1$4 = constants$1;
const PATTERN$3 = new RegExp("(?<prefix>\u4E0A|\u4E0B|\u8FD9)(?:\u4E2A)?(?:\u661F\u671F|\u793C\u62DC|\u5468)(?<weekday>" + Object.keys(constants_1$4.WEEKDAY_OFFSET).join("|") + ")");
class ZHHansRelationWeekdayParser extends AbstractParserWithWordBoundary_1$4.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$3;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const dayOfWeek = match2.groups.weekday;
    const offset2 = constants_1$4.WEEKDAY_OFFSET[dayOfWeek];
    if (offset2 === void 0)
      return null;
    let modifier = null;
    const prefix = match2.groups.prefix;
    if (prefix == "\u4E0A") {
      modifier = "last";
    } else if (prefix == "\u4E0B") {
      modifier = "next";
    } else if (prefix == "\u8FD9") {
      modifier = "this";
    }
    let startMoment = dayjs_1$2.default(context.refDate);
    let startMomentFixed = false;
    const refOffset = startMoment.day();
    if (modifier == "last" || modifier == "past") {
      startMoment = startMoment.day(offset2 - 7);
      startMomentFixed = true;
    } else if (modifier == "next") {
      startMoment = startMoment.day(offset2 + 7);
      startMomentFixed = true;
    } else if (modifier == "this") {
      startMoment = startMoment.day(offset2);
    } else {
      if (Math.abs(offset2 - 7 - refOffset) < Math.abs(offset2 - refOffset)) {
        startMoment = startMoment.day(offset2 - 7);
      } else if (Math.abs(offset2 + 7 - refOffset) < Math.abs(offset2 - refOffset)) {
        startMoment = startMoment.day(offset2 + 7);
      } else {
        startMoment = startMoment.day(offset2);
      }
    }
    result.start.assign("weekday", offset2);
    if (startMomentFixed) {
      result.start.assign("day", startMoment.date());
      result.start.assign("month", startMoment.month() + 1);
      result.start.assign("year", startMoment.year());
    } else {
      result.start.imply("day", startMoment.date());
      result.start.imply("month", startMoment.month() + 1);
      result.start.imply("year", startMoment.year());
    }
    return result;
  }
}
ZHHansRelationWeekdayParser$1.default = ZHHansRelationWeekdayParser;
var ZHHansTimeExpressionParser$1 = {};
var __importDefault$3 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHansTimeExpressionParser$1, "__esModule", { value: true });
const dayjs_1$1 = __importDefault$3(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$3 = AbstractParserWithWordBoundary;
const constants_1$3 = constants$1;
const FIRST_REG_PATTERN = new RegExp("(?:\u4ECE|\u81EA)?(?:(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)(?:[\\s,\uFF0C]*)(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?)?(?:[\\s,\uFF0C]*)(?:(\\d+|[" + Object.keys(constants_1$3.NUMBER).join("") + "]+)(?:\\s*)(?:\u70B9|\u65F6|:|\uFF1A)(?:\\s*)(\\d+|\u534A|\u6B63|\u6574|[" + Object.keys(constants_1$3.NUMBER).join("") + "]+)?(?:\\s*)(?:\u5206|:|\uFF1A)?(?:\\s*)(\\d+|[" + Object.keys(constants_1$3.NUMBER).join("") + "]+)?(?:\\s*)(?:\u79D2)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
const SECOND_REG_PATTERN = new RegExp("(?:^\\s*(?:\u5230|\u81F3|\\-|\\\u2013|\\~|\\\u301C)\\s*)(?:(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)(?:[\\s,\uFF0C]*)(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?)?(?:[\\s,\uFF0C]*)(?:(\\d+|[" + Object.keys(constants_1$3.NUMBER).join("") + "]+)(?:\\s*)(?:\u70B9|\u65F6|:|\uFF1A)(?:\\s*)(\\d+|\u534A|\u6B63|\u6574|[" + Object.keys(constants_1$3.NUMBER).join("") + "]+)?(?:\\s*)(?:\u5206|:|\uFF1A)?(?:\\s*)(\\d+|[" + Object.keys(constants_1$3.NUMBER).join("") + "]+)?(?:\\s*)(?:\u79D2)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
const DAY_GROUP_1 = 1;
const ZH_AM_PM_HOUR_GROUP_1 = 2;
const ZH_AM_PM_HOUR_GROUP_2 = 3;
const DAY_GROUP_3 = 4;
const ZH_AM_PM_HOUR_GROUP_3 = 5;
const HOUR_GROUP = 6;
const MINUTE_GROUP = 7;
const SECOND_GROUP = 8;
const AM_PM_HOUR_GROUP = 9;
class ZHHansTimeExpressionParser extends AbstractParserWithWordBoundary_1$3.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return FIRST_REG_PATTERN;
  }
  innerExtract(context, match2) {
    if (match2.index > 0 && context.text[match2.index - 1].match(/\w/)) {
      return null;
    }
    const refMoment = dayjs_1$1.default(context.refDate);
    const result = context.createParsingResult(match2.index, match2[0]);
    let startMoment = refMoment.clone();
    if (match2[DAY_GROUP_1]) {
      const day1 = match2[DAY_GROUP_1];
      if (day1 == "\u660E") {
        if (refMoment.hour() > 1) {
          startMoment = startMoment.add(1, "day");
        }
      } else if (day1 == "\u6628") {
        startMoment = startMoment.add(-1, "day");
      } else if (day1 == "\u524D") {
        startMoment = startMoment.add(-2, "day");
      } else if (day1 == "\u5927\u524D") {
        startMoment = startMoment.add(-3, "day");
      } else if (day1 == "\u540E") {
        startMoment = startMoment.add(2, "day");
      } else if (day1 == "\u5927\u540E") {
        startMoment = startMoment.add(3, "day");
      }
      result.start.assign("day", startMoment.date());
      result.start.assign("month", startMoment.month() + 1);
      result.start.assign("year", startMoment.year());
    } else if (match2[DAY_GROUP_3]) {
      const day3 = match2[DAY_GROUP_3];
      if (day3 == "\u660E") {
        startMoment = startMoment.add(1, "day");
      } else if (day3 == "\u6628") {
        startMoment = startMoment.add(-1, "day");
      } else if (day3 == "\u524D") {
        startMoment = startMoment.add(-2, "day");
      } else if (day3 == "\u5927\u524D") {
        startMoment = startMoment.add(-3, "day");
      } else if (day3 == "\u540E") {
        startMoment = startMoment.add(2, "day");
      } else if (day3 == "\u5927\u540E") {
        startMoment = startMoment.add(3, "day");
      }
      result.start.assign("day", startMoment.date());
      result.start.assign("month", startMoment.month() + 1);
      result.start.assign("year", startMoment.year());
    } else {
      result.start.imply("day", startMoment.date());
      result.start.imply("month", startMoment.month() + 1);
      result.start.imply("year", startMoment.year());
    }
    let hour = 0;
    let minute = 0;
    let meridiem = -1;
    if (match2[SECOND_GROUP]) {
      let second = parseInt(match2[SECOND_GROUP]);
      if (isNaN(second)) {
        second = constants_1$3.zhStringToNumber(match2[SECOND_GROUP]);
      }
      if (second >= 60)
        return null;
      result.start.assign("second", second);
    }
    hour = parseInt(match2[HOUR_GROUP]);
    if (isNaN(hour)) {
      hour = constants_1$3.zhStringToNumber(match2[HOUR_GROUP]);
    }
    if (match2[MINUTE_GROUP]) {
      if (match2[MINUTE_GROUP] == "\u534A") {
        minute = 30;
      } else if (match2[MINUTE_GROUP] == "\u6B63" || match2[MINUTE_GROUP] == "\u6574") {
        minute = 0;
      } else {
        minute = parseInt(match2[MINUTE_GROUP]);
        if (isNaN(minute)) {
          minute = constants_1$3.zhStringToNumber(match2[MINUTE_GROUP]);
        }
      }
    } else if (hour > 100) {
      minute = hour % 100;
      hour = Math.floor(hour / 100);
    }
    if (minute >= 60) {
      return null;
    }
    if (hour > 24) {
      return null;
    }
    if (hour >= 12) {
      meridiem = 1;
    }
    if (match2[AM_PM_HOUR_GROUP]) {
      if (hour > 12)
        return null;
      const ampm = match2[AM_PM_HOUR_GROUP][0].toLowerCase();
      if (ampm == "a") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      }
      if (ampm == "p") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_1]) {
      const zhAMPMString1 = match2[ZH_AM_PM_HOUR_GROUP_1];
      const zhAMPM1 = zhAMPMString1[0];
      if (zhAMPM1 == "\u65E9") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM1 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_2]) {
      const zhAMPMString2 = match2[ZH_AM_PM_HOUR_GROUP_2];
      const zhAMPM2 = zhAMPMString2[0];
      if (zhAMPM2 == "\u4E0A" || zhAMPM2 == "\u65E9" || zhAMPM2 == "\u51CC") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM2 == "\u4E0B" || zhAMPM2 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_3]) {
      const zhAMPMString3 = match2[ZH_AM_PM_HOUR_GROUP_3];
      const zhAMPM3 = zhAMPMString3[0];
      if (zhAMPM3 == "\u4E0A" || zhAMPM3 == "\u65E9" || zhAMPM3 == "\u51CC") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM3 == "\u4E0B" || zhAMPM3 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    }
    result.start.assign("hour", hour);
    result.start.assign("minute", minute);
    if (meridiem >= 0) {
      result.start.assign("meridiem", meridiem);
    } else {
      if (hour < 12) {
        result.start.imply("meridiem", 0);
      } else {
        result.start.imply("meridiem", 1);
      }
    }
    match2 = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));
    if (!match2) {
      if (result.text.match(/^\d+$/)) {
        return null;
      }
      return result;
    }
    let endMoment = startMoment.clone();
    result.end = context.createParsingComponents();
    if (match2[DAY_GROUP_1]) {
      const day1 = match2[DAY_GROUP_1];
      if (day1 == "\u660E") {
        if (refMoment.hour() > 1) {
          endMoment = endMoment.add(1, "day");
        }
      } else if (day1 == "\u6628") {
        endMoment = endMoment.add(-1, "day");
      } else if (day1 == "\u524D") {
        endMoment = endMoment.add(-2, "day");
      } else if (day1 == "\u5927\u524D") {
        endMoment = endMoment.add(-3, "day");
      } else if (day1 == "\u540E") {
        endMoment = endMoment.add(2, "day");
      } else if (day1 == "\u5927\u540E") {
        endMoment = endMoment.add(3, "day");
      }
      result.end.assign("day", endMoment.date());
      result.end.assign("month", endMoment.month() + 1);
      result.end.assign("year", endMoment.year());
    } else if (match2[DAY_GROUP_3]) {
      const day3 = match2[DAY_GROUP_3];
      if (day3 == "\u660E") {
        endMoment = endMoment.add(1, "day");
      } else if (day3 == "\u6628") {
        endMoment = endMoment.add(-1, "day");
      } else if (day3 == "\u524D") {
        endMoment = endMoment.add(-2, "day");
      } else if (day3 == "\u5927\u524D") {
        endMoment = endMoment.add(-3, "day");
      } else if (day3 == "\u540E") {
        endMoment = endMoment.add(2, "day");
      } else if (day3 == "\u5927\u540E") {
        endMoment = endMoment.add(3, "day");
      }
      result.end.assign("day", endMoment.date());
      result.end.assign("month", endMoment.month() + 1);
      result.end.assign("year", endMoment.year());
    } else {
      result.end.imply("day", endMoment.date());
      result.end.imply("month", endMoment.month() + 1);
      result.end.imply("year", endMoment.year());
    }
    hour = 0;
    minute = 0;
    meridiem = -1;
    if (match2[SECOND_GROUP]) {
      let second = parseInt(match2[SECOND_GROUP]);
      if (isNaN(second)) {
        second = constants_1$3.zhStringToNumber(match2[SECOND_GROUP]);
      }
      if (second >= 60)
        return null;
      result.end.assign("second", second);
    }
    hour = parseInt(match2[HOUR_GROUP]);
    if (isNaN(hour)) {
      hour = constants_1$3.zhStringToNumber(match2[HOUR_GROUP]);
    }
    if (match2[MINUTE_GROUP]) {
      if (match2[MINUTE_GROUP] == "\u534A") {
        minute = 30;
      } else if (match2[MINUTE_GROUP] == "\u6B63" || match2[MINUTE_GROUP] == "\u6574") {
        minute = 0;
      } else {
        minute = parseInt(match2[MINUTE_GROUP]);
        if (isNaN(minute)) {
          minute = constants_1$3.zhStringToNumber(match2[MINUTE_GROUP]);
        }
      }
    } else if (hour > 100) {
      minute = hour % 100;
      hour = Math.floor(hour / 100);
    }
    if (minute >= 60) {
      return null;
    }
    if (hour > 24) {
      return null;
    }
    if (hour >= 12) {
      meridiem = 1;
    }
    if (match2[AM_PM_HOUR_GROUP]) {
      if (hour > 12)
        return null;
      const ampm = match2[AM_PM_HOUR_GROUP][0].toLowerCase();
      if (ampm == "a") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      }
      if (ampm == "p") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
      if (!result.start.isCertain("meridiem")) {
        if (meridiem == 0) {
          result.start.imply("meridiem", 0);
          if (result.start.get("hour") == 12) {
            result.start.assign("hour", 0);
          }
        } else {
          result.start.imply("meridiem", 1);
          if (result.start.get("hour") != 12) {
            result.start.assign("hour", result.start.get("hour") + 12);
          }
        }
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_1]) {
      const zhAMPMString1 = match2[ZH_AM_PM_HOUR_GROUP_1];
      const zhAMPM1 = zhAMPMString1[0];
      if (zhAMPM1 == "\u65E9") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM1 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_2]) {
      const zhAMPMString2 = match2[ZH_AM_PM_HOUR_GROUP_2];
      const zhAMPM2 = zhAMPMString2[0];
      if (zhAMPM2 == "\u4E0A" || zhAMPM2 == "\u65E9" || zhAMPM2 == "\u51CC") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM2 == "\u4E0B" || zhAMPM2 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    } else if (match2[ZH_AM_PM_HOUR_GROUP_3]) {
      const zhAMPMString3 = match2[ZH_AM_PM_HOUR_GROUP_3];
      const zhAMPM3 = zhAMPMString3[0];
      if (zhAMPM3 == "\u4E0A" || zhAMPM3 == "\u65E9" || zhAMPM3 == "\u51CC") {
        meridiem = 0;
        if (hour == 12)
          hour = 0;
      } else if (zhAMPM3 == "\u4E0B" || zhAMPM3 == "\u665A") {
        meridiem = 1;
        if (hour != 12)
          hour += 12;
      }
    }
    result.text = result.text + match2[0];
    result.end.assign("hour", hour);
    result.end.assign("minute", minute);
    if (meridiem >= 0) {
      result.end.assign("meridiem", meridiem);
    } else {
      const startAtPM = result.start.isCertain("meridiem") && result.start.get("meridiem") == 1;
      if (startAtPM && result.start.get("hour") > hour) {
        result.end.imply("meridiem", 0);
      } else if (hour > 12) {
        result.end.imply("meridiem", 1);
      }
    }
    if (result.end.date().getTime() < result.start.date().getTime()) {
      result.end.imply("day", result.end.get("day") + 1);
    }
    return result;
  }
}
ZHHansTimeExpressionParser$1.default = ZHHansTimeExpressionParser;
var ZHHansWeekdayParser$1 = {};
var __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHansWeekdayParser$1, "__esModule", { value: true });
const dayjs_1 = __importDefault$2(dayjs_min.exports);
const AbstractParserWithWordBoundary_1$2 = AbstractParserWithWordBoundary;
const constants_1$2 = constants$1;
const PATTERN$2 = new RegExp("(?:\u661F\u671F|\u793C\u62DC|\u5468)(?<weekday>" + Object.keys(constants_1$2.WEEKDAY_OFFSET).join("|") + ")");
class ZHHansWeekdayParser extends AbstractParserWithWordBoundary_1$2.AbstractParserWithWordBoundaryChecking {
  innerPattern() {
    return PATTERN$2;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const dayOfWeek = match2.groups.weekday;
    const offset2 = constants_1$2.WEEKDAY_OFFSET[dayOfWeek];
    if (offset2 === void 0)
      return null;
    let startMoment = dayjs_1.default(context.refDate);
    const refOffset = startMoment.day();
    if (Math.abs(offset2 - 7 - refOffset) < Math.abs(offset2 - refOffset)) {
      startMoment = startMoment.day(offset2 - 7);
    } else if (Math.abs(offset2 + 7 - refOffset) < Math.abs(offset2 - refOffset)) {
      startMoment = startMoment.day(offset2 + 7);
    } else {
      startMoment = startMoment.day(offset2);
    }
    result.start.assign("weekday", offset2);
    {
      result.start.imply("day", startMoment.date());
      result.start.imply("month", startMoment.month() + 1);
      result.start.imply("year", startMoment.year());
    }
    return result;
  }
}
ZHHansWeekdayParser$1.default = ZHHansWeekdayParser;
var ZHHansMergeDateRangeRefiner$1 = {};
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(ZHHansMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1$1 = __importDefault$1(AbstractMergeDateRangeRefiner$1);
class ZHHansMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1$1.default {
  patternBetween() {
    return /^\s*(至|到|-|~|～|－|ー)\s*$/i;
  }
}
ZHHansMergeDateRangeRefiner$1.default = ZHHansMergeDateRangeRefiner;
var ZHHansMergeDateTimeRefiner = {};
var hasRequiredZHHansMergeDateTimeRefiner;
function requireZHHansMergeDateTimeRefiner() {
  if (hasRequiredZHHansMergeDateTimeRefiner)
    return ZHHansMergeDateTimeRefiner;
  hasRequiredZHHansMergeDateTimeRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(ZHHansMergeDateTimeRefiner, "__esModule", { value: true });
  const AbstractMergeDateTimeRefiner_1 = __importDefault2(requireAbstractMergeDateTimeRefiner());
  class ZHHansMergeDateTimeRefiner$1 extends AbstractMergeDateTimeRefiner_1.default {
    patternBetween() {
      return /^\s*$/i;
    }
  }
  ZHHansMergeDateTimeRefiner.default = ZHHansMergeDateTimeRefiner$1;
  return ZHHansMergeDateTimeRefiner;
}
var hasRequiredHans;
function requireHans() {
  if (hasRequiredHans)
    return hans;
  hasRequiredHans = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.strict = exports2.casual = exports2.hans = void 0;
    const chrono_1 = requireChrono();
    const ExtractTimezoneOffsetRefiner_1 = __importDefault2(ExtractTimezoneOffsetRefiner$1);
    const configurations_1 = requireConfigurations();
    const ZHHansCasualDateParser_1 = __importDefault2(ZHHansCasualDateParser$1);
    const ZHHansDateParser_1 = __importDefault2(ZHHansDateParser$1);
    const ZHHansDeadlineFormatParser_1 = __importDefault2(ZHHansDeadlineFormatParser$1);
    const ZHHansRelationWeekdayParser_1 = __importDefault2(ZHHansRelationWeekdayParser$1);
    const ZHHansTimeExpressionParser_1 = __importDefault2(ZHHansTimeExpressionParser$1);
    const ZHHansWeekdayParser_1 = __importDefault2(ZHHansWeekdayParser$1);
    const ZHHansMergeDateRangeRefiner_1 = __importDefault2(ZHHansMergeDateRangeRefiner$1);
    const ZHHansMergeDateTimeRefiner_1 = __importDefault2(requireZHHansMergeDateTimeRefiner());
    exports2.hans = new chrono_1.Chrono(createCasualConfiguration());
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports2.strict = new chrono_1.Chrono(createConfiguration());
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration() {
      const option = createConfiguration();
      option.parsers.unshift(new ZHHansCasualDateParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration() {
      const configuration = configurations_1.includeCommonConfiguration({
        parsers: [
          new ZHHansDateParser_1.default(),
          new ZHHansRelationWeekdayParser_1.default(),
          new ZHHansWeekdayParser_1.default(),
          new ZHHansTimeExpressionParser_1.default(),
          new ZHHansDeadlineFormatParser_1.default()
        ],
        refiners: [new ZHHansMergeDateRangeRefiner_1.default(), new ZHHansMergeDateTimeRefiner_1.default()]
      });
      configuration.refiners = configuration.refiners.filter((refiner) => !(refiner instanceof ExtractTimezoneOffsetRefiner_1.default));
      return configuration;
    }
    exports2.createConfiguration = createConfiguration;
  })(hans);
  return hans;
}
var hasRequiredZh;
function requireZh() {
  if (hasRequiredZh)
    return zh;
  hasRequiredZh = 1;
  (function(exports2) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      Object.defineProperty(o, k22, { enumerable: true, get: function() {
        return m3[k2];
      } });
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m3, exports3) {
      for (var p in m3)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m3, p);
    };
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hans = void 0;
    __exportStar(requireHant(), exports2);
    exports2.hans = __importStar(requireHans());
  })(zh);
  return zh;
}
var ru = {};
var RUTimeUnitWithinFormatParser = {};
var constants = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.parseTimeUnits = exports2.TIME_UNITS_PATTERN = exports2.parseYear = exports2.YEAR_PATTERN = exports2.parseOrdinalNumberPattern = exports2.ORDINAL_NUMBER_PATTERN = exports2.parseNumberPattern = exports2.NUMBER_PATTERN = exports2.TIME_UNIT_DICTIONARY = exports2.ORDINAL_WORD_DICTIONARY = exports2.INTEGER_WORD_DICTIONARY = exports2.MONTH_DICTIONARY = exports2.FULL_MONTH_NAME_DICTIONARY = exports2.WEEKDAY_DICTIONARY = exports2.REGEX_PARTS = void 0;
  const pattern_12 = pattern;
  const years_12 = years;
  exports2.REGEX_PARTS = {
    leftBoundary: "([^\\p{L}\\p{N}_]|^)",
    rightBoundary: "(?=[^\\p{L}\\p{N}_]|$)",
    flags: "iu"
  };
  exports2.WEEKDAY_DICTIONARY = {
    \u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435: 0,
    \u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u044F: 0,
    \u0432\u0441\u043A: 0,
    "\u0432\u0441\u043A.": 0,
    \u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A: 1,
    \u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A\u0430: 1,
    \u043F\u043D: 1,
    "\u043F\u043D.": 1,
    \u0432\u0442\u043E\u0440\u043D\u0438\u043A: 2,
    \u0432\u0442\u043E\u0440\u043D\u0438\u043A\u0430: 2,
    \u0432\u0442: 2,
    "\u0432\u0442.": 2,
    \u0441\u0440\u0435\u0434\u0430: 3,
    \u0441\u0440\u0435\u0434\u044B: 3,
    \u0441\u0440\u0435\u0434\u0443: 3,
    \u0441\u0440: 3,
    "\u0441\u0440.": 3,
    \u0447\u0435\u0442\u0432\u0435\u0440\u0433: 4,
    \u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430: 4,
    \u0447\u0442: 4,
    "\u0447\u0442.": 4,
    \u043F\u044F\u0442\u043D\u0438\u0446\u0430: 5,
    \u043F\u044F\u0442\u043D\u0438\u0446\u0443: 5,
    \u043F\u044F\u0442\u043D\u0438\u0446\u044B: 5,
    \u043F\u0442: 5,
    "\u043F\u0442.": 5,
    \u0441\u0443\u0431\u0431\u043E\u0442\u0430: 6,
    \u0441\u0443\u0431\u0431\u043E\u0442\u0443: 6,
    \u0441\u0443\u0431\u0431\u043E\u0442\u044B: 6,
    \u0441\u0431: 6,
    "\u0441\u0431.": 6
  };
  exports2.FULL_MONTH_NAME_DICTIONARY = {
    \u044F\u043D\u0432\u0430\u0440\u044C: 1,
    \u044F\u043D\u0432\u0430\u0440\u044F: 1,
    \u044F\u043D\u0432\u0430\u0440\u0435: 1,
    \u0444\u0435\u0432\u0440\u0430\u043B\u044C: 2,
    \u0444\u0435\u0432\u0440\u0430\u043B\u044F: 2,
    \u0444\u0435\u0432\u0440\u0430\u043B\u0435: 2,
    \u043C\u0430\u0440\u0442: 3,
    \u043C\u0430\u0440\u0442\u0430: 3,
    \u043C\u0430\u0440\u0442\u0435: 3,
    \u0430\u043F\u0440\u0435\u043B\u044C: 4,
    \u0430\u043F\u0440\u0435\u043B\u044F: 4,
    \u0430\u043F\u0440\u0435\u043B\u0435: 4,
    \u043C\u0430\u0439: 5,
    \u043C\u0430\u044F: 5,
    \u043C\u0430\u0435: 5,
    \u0438\u044E\u043D\u044C: 6,
    \u0438\u044E\u043D\u044F: 6,
    \u0438\u044E\u043D\u0435: 6,
    \u0438\u044E\u043B\u044C: 7,
    \u0438\u044E\u043B\u044F: 7,
    \u0438\u044E\u043B\u0435: 7,
    \u0430\u0432\u0433\u0443\u0441\u0442: 8,
    \u0430\u0432\u0433\u0443\u0441\u0442\u0430: 8,
    \u0430\u0432\u0433\u0443\u0441\u0442\u0435: 8,
    \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C: 9,
    \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F: 9,
    \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u0435: 9,
    \u043E\u043A\u0442\u044F\u0431\u0440\u044C: 10,
    \u043E\u043A\u0442\u044F\u0431\u0440\u044F: 10,
    \u043E\u043A\u0442\u044F\u0431\u0440\u0435: 10,
    \u043D\u043E\u044F\u0431\u0440\u044C: 11,
    \u043D\u043E\u044F\u0431\u0440\u044F: 11,
    \u043D\u043E\u044F\u0431\u0440\u0435: 11,
    \u0434\u0435\u043A\u0430\u0431\u0440\u044C: 12,
    \u0434\u0435\u043A\u0430\u0431\u0440\u044F: 12,
    \u0434\u0435\u043A\u0430\u0431\u0440\u0435: 12
  };
  exports2.MONTH_DICTIONARY = Object.assign(Object.assign({}, exports2.FULL_MONTH_NAME_DICTIONARY), { \u044F\u043D\u0432: 1, "\u044F\u043D\u0432.": 1, \u0444\u0435\u0432: 2, "\u0444\u0435\u0432.": 2, \u043C\u0430\u0440: 3, "\u043C\u0430\u0440.": 3, \u0430\u043F\u0440: 4, "\u0430\u043F\u0440.": 4, \u0430\u0432\u0433: 8, "\u0430\u0432\u0433.": 8, \u0441\u0435\u043D: 9, "\u0441\u0435\u043D.": 9, \u043E\u043A\u0442: 10, "\u043E\u043A\u0442.": 10, \u043D\u043E\u044F: 11, "\u043D\u043E\u044F.": 11, \u0434\u0435\u043A: 12, "\u0434\u0435\u043A.": 12 });
  exports2.INTEGER_WORD_DICTIONARY = {
    \u043E\u0434\u0438\u043D: 1,
    \u043E\u0434\u043D\u0430: 1,
    \u043E\u0434\u043D\u043E\u0439: 1,
    \u043E\u0434\u043D\u0443: 1,
    \u0434\u0432\u0435: 2,
    \u0434\u0432\u0430: 2,
    \u0434\u0432\u0443\u0445: 2,
    \u0442\u0440\u0438: 3,
    \u0442\u0440\u0435\u0445: 3,
    \u0442\u0440\u0451\u0445: 3,
    \u0447\u0435\u0442\u044B\u0440\u0435: 4,
    \u0447\u0435\u0442\u044B\u0440\u0435\u0445: 4,
    \u0447\u0435\u0442\u044B\u0440\u0451\u0445: 4,
    \u043F\u044F\u0442\u044C: 5,
    \u043F\u044F\u0442\u0438: 5,
    \u0448\u0435\u0441\u0442\u044C: 6,
    \u0448\u0435\u0441\u0442\u0438: 6,
    \u0441\u0435\u043C\u044C: 7,
    \u0441\u0435\u043C\u0438: 7,
    \u0432\u043E\u0441\u0435\u043C\u044C: 8,
    \u0432\u043E\u0441\u044C\u043C\u0438: 8,
    \u0434\u0435\u0432\u044F\u0442\u044C: 9,
    \u0434\u0435\u0432\u044F\u0442\u0438: 9,
    \u0434\u0435\u0441\u044F\u0442\u044C: 10,
    \u0434\u0435\u0441\u044F\u0442\u0438: 10,
    \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u044C: 11,
    \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u0438: 11,
    \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u044C: 12,
    \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u0438: 12
  };
  exports2.ORDINAL_WORD_DICTIONARY = {
    \u043F\u0435\u0440\u0432\u043E\u0435: 1,
    \u043F\u0435\u0440\u0432\u043E\u0433\u043E: 1,
    \u0432\u0442\u043E\u0440\u043E\u0435: 2,
    \u0432\u0442\u043E\u0440\u043E\u0433\u043E: 2,
    \u0442\u0440\u0435\u0442\u044C\u0435: 3,
    \u0442\u0440\u0435\u0442\u044C\u0435\u0433\u043E: 3,
    \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0435: 4,
    \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0433\u043E: 4,
    \u043F\u044F\u0442\u043E\u0435: 5,
    \u043F\u044F\u0442\u043E\u0433\u043E: 5,
    \u0448\u0435\u0441\u0442\u043E\u0435: 6,
    \u0448\u0435\u0441\u0442\u043E\u0433\u043E: 6,
    \u0441\u0435\u0434\u044C\u043C\u043E\u0435: 7,
    \u0441\u0435\u0434\u044C\u043C\u043E\u0433\u043E: 7,
    \u0432\u043E\u0441\u044C\u043C\u043E\u0435: 8,
    \u0432\u043E\u0441\u044C\u043C\u043E\u0433\u043E: 8,
    \u0434\u0435\u0432\u044F\u0442\u043E\u0435: 9,
    \u0434\u0435\u0432\u044F\u0442\u043E\u0433\u043E: 9,
    \u0434\u0435\u0441\u044F\u0442\u043E\u0435: 10,
    \u0434\u0435\u0441\u044F\u0442\u043E\u0433\u043E: 10,
    \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 11,
    \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 11,
    \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 12,
    \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 12,
    \u0442\u0440\u0438\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 13,
    \u0442\u0440\u0438\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 13,
    \u0447\u0435\u0442\u044B\u0440\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 14,
    \u0447\u0435\u0442\u044B\u0440\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 14,
    \u043F\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 15,
    \u043F\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 15,
    \u0448\u0435\u0441\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 16,
    \u0448\u0435\u0441\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 16,
    \u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 17,
    \u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 17,
    \u0432\u043E\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 18,
    \u0432\u043E\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 18,
    \u0434\u0435\u0432\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 19,
    \u0434\u0435\u0432\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 19,
    \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 20,
    \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 20,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0435": 21,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0433\u043E": 21,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u0442\u043E\u0440\u043E\u0435": 22,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u0442\u043E\u0440\u043E\u0433\u043E": 22,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0442\u0440\u0435\u0442\u044C\u0435": 23,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0442\u0440\u0435\u0442\u044C\u0435\u0433\u043E": 23,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0435": 24,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0433\u043E": 24,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u044F\u0442\u043E\u0435": 25,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u044F\u0442\u043E\u0433\u043E": 25,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0448\u0435\u0441\u0442\u043E\u0435": 26,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0448\u0435\u0441\u0442\u043E\u0433\u043E": 26,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0441\u0435\u0434\u044C\u043C\u043E\u0435": 27,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0441\u0435\u0434\u044C\u043C\u043E\u0433\u043E": 27,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u043E\u0441\u044C\u043C\u043E\u0435": 28,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u043E\u0441\u044C\u043C\u043E\u0433\u043E": 28,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0434\u0435\u0432\u044F\u0442\u043E\u0435": 29,
    "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0434\u0435\u0432\u044F\u0442\u043E\u0433\u043E": 29,
    "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u043E\u0435": 30,
    "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u043E\u0433\u043E": 30,
    "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0435": 31,
    "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0433\u043E": 31
  };
  exports2.TIME_UNIT_DICTIONARY = {
    \u0441\u0435\u043A: "second",
    \u0441\u0435\u043A\u0443\u043D\u0434\u0430: "second",
    \u0441\u0435\u043A\u0443\u043D\u0434: "second",
    \u0441\u0435\u043A\u0443\u043D\u0434\u044B: "second",
    \u0441\u0435\u043A\u0443\u043D\u0434\u0443: "second",
    \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0430: "second",
    \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0438: "second",
    \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u0435\u043A: "second",
    \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0443: "second",
    \u043C\u0438\u043D: "minute",
    \u043C\u0438\u043D\u0443\u0442\u0430: "minute",
    \u043C\u0438\u043D\u0443\u0442: "minute",
    \u043C\u0438\u043D\u0443\u0442\u044B: "minute",
    \u043C\u0438\u043D\u0443\u0442\u0443: "minute",
    \u043C\u0438\u043D\u0443\u0442\u043E\u043A: "minute",
    \u043C\u0438\u043D\u0443\u0442\u043A\u0438: "minute",
    \u043C\u0438\u043D\u0443\u0442\u043A\u0443: "minute",
    \u0447\u0430\u0441: "hour",
    \u0447\u0430\u0441\u043E\u0432: "hour",
    \u0447\u0430\u0441\u0430: "hour",
    \u0447\u0430\u0441\u0443: "hour",
    \u0447\u0430\u0441\u0438\u043A\u043E\u0432: "hour",
    \u0447\u0430\u0441\u0438\u043A\u0430: "hour",
    \u0447\u0430\u0441\u0438\u043A\u0435: "hour",
    \u0447\u0430\u0441\u0438\u043A: "hour",
    \u0434\u0435\u043D\u044C: "d",
    \u0434\u043D\u044F: "d",
    \u0434\u043D\u0435\u0439: "d",
    \u0441\u0443\u0442\u043E\u043A: "d",
    \u0441\u0443\u0442\u043A\u0438: "d",
    \u043D\u0435\u0434\u0435\u043B\u044F: "week",
    \u043D\u0435\u0434\u0435\u043B\u0435: "week",
    \u043D\u0435\u0434\u0435\u043B\u0438: "week",
    \u043D\u0435\u0434\u0435\u043B\u044E: "week",
    \u043D\u0435\u0434\u0435\u043B\u044C: "week",
    \u043D\u0435\u0434\u0435\u043B\u044C\u043A\u0435: "week",
    \u043D\u0435\u0434\u0435\u043B\u044C\u043A\u0438: "week",
    \u043D\u0435\u0434\u0435\u043B\u0435\u043A: "week",
    \u043C\u0435\u0441\u044F\u0446: "month",
    \u043C\u0435\u0441\u044F\u0446\u0435: "month",
    \u043C\u0435\u0441\u044F\u0446\u0435\u0432: "month",
    \u043C\u0435\u0441\u044F\u0446\u0430: "month",
    \u043A\u0432\u0430\u0440\u0442\u0430\u043B: "quarter",
    \u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0435: "quarter",
    \u043A\u0432\u0430\u0440\u0442\u0430\u043B\u043E\u0432: "quarter",
    \u0433\u043E\u0434: "year",
    \u0433\u043E\u0434\u0430: "year",
    \u0433\u043E\u0434\u0443: "year",
    \u0433\u043E\u0434\u043E\u0432: "year",
    \u043B\u0435\u0442: "year",
    \u0433\u043E\u0434\u0438\u043A: "year",
    \u0433\u043E\u0434\u0438\u043A\u0430: "year",
    \u0433\u043E\u0434\u0438\u043A\u043E\u0432: "year"
  };
  exports2.NUMBER_PATTERN = `(?:${pattern_12.matchAnyPattern(exports2.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|\u043F\u043E\u043B|\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E|\u043F\u0430\u0440(?:\u044B|\u0443)|\\s{0,3})`;
  function parseNumberPattern(match2) {
    const num = match2.toLowerCase();
    if (exports2.INTEGER_WORD_DICTIONARY[num] !== void 0) {
      return exports2.INTEGER_WORD_DICTIONARY[num];
    }
    if (num.match(/несколько/)) {
      return 3;
    } else if (num.match(/пол/)) {
      return 0.5;
    } else if (num.match(/пар/)) {
      return 2;
    } else if (num === "") {
      return 1;
    }
    return parseFloat(num);
  }
  exports2.parseNumberPattern = parseNumberPattern;
  exports2.ORDINAL_NUMBER_PATTERN = `(?:${pattern_12.matchAnyPattern(exports2.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:\u0433\u043E|\u043E\u0433\u043E|\u0435|\u043E\u0435)?)`;
  function parseOrdinalNumberPattern2(match2) {
    let num = match2.toLowerCase();
    if (exports2.ORDINAL_WORD_DICTIONARY[num] !== void 0) {
      return exports2.ORDINAL_WORD_DICTIONARY[num];
    }
    return parseInt(num);
  }
  exports2.parseOrdinalNumberPattern = parseOrdinalNumberPattern2;
  const year = "(?:\\s+(?:\u0433\u043E\u0434\u0443|\u0433\u043E\u0434\u0430|\u0433\u043E\u0434|\u0433|\u0433.))?";
  exports2.YEAR_PATTERN = `(?:[1-9][0-9]{0,3}${year}\\s*(?:\u043D.\u044D.|\u0434\u043E \u043D.\u044D.|\u043D. \u044D.|\u0434\u043E \u043D. \u044D.)|[1-2][0-9]{3}${year}|[5-9][0-9]${year})`;
  function parseYear2(match2) {
    if (/(год|года|г|г.)/i.test(match2)) {
      match2 = match2.replace(/(год|года|г|г.)/i, "");
    }
    if (/(до н.э.|до н. э.)/i.test(match2)) {
      match2 = match2.replace(/(до н.э.|до н. э.)/i, "");
      return -parseInt(match2);
    }
    if (/(н. э.|н.э.)/i.test(match2)) {
      match2 = match2.replace(/(н. э.|н.э.)/i, "");
      return parseInt(match2);
    }
    const rawYearNumber = parseInt(match2);
    return years_12.findMostLikelyADYear(rawYearNumber);
  }
  exports2.parseYear = parseYear2;
  const SINGLE_TIME_UNIT_PATTERN = `(${exports2.NUMBER_PATTERN})\\s{0,3}(${pattern_12.matchAnyPattern(exports2.TIME_UNIT_DICTIONARY)})`;
  const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
  exports2.TIME_UNITS_PATTERN = pattern_12.repeatedTimeunitPattern(`(?:(?:\u043E\u043A\u043E\u043B\u043E|\u043F\u0440\u0438\u043C\u0435\u0440\u043D\u043E)\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);
  function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match2) {
      collectDateTimeFragment(fragments, match2);
      remainingText = remainingText.substring(match2[0].length).trim();
      match2 = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
  }
  exports2.parseTimeUnits = parseTimeUnits;
  function collectDateTimeFragment(fragments, match2) {
    const num = parseNumberPattern(match2[1]);
    const unit = exports2.TIME_UNIT_DICTIONARY[match2[2].toLowerCase()];
    fragments[unit] = num;
  }
})(constants);
var hasRequiredRUTimeUnitWithinFormatParser;
function requireRUTimeUnitWithinFormatParser() {
  if (hasRequiredRUTimeUnitWithinFormatParser)
    return RUTimeUnitWithinFormatParser;
  hasRequiredRUTimeUnitWithinFormatParser = 1;
  Object.defineProperty(RUTimeUnitWithinFormatParser, "__esModule", { value: true });
  const constants_12 = constants;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const PATTERN2 = `(?:(?:\u043E\u043A\u043E\u043B\u043E|\u043F\u0440\u0438\u043C\u0435\u0440\u043D\u043E)\\s*(?:~\\s*)?)?(${constants_12.TIME_UNITS_PATTERN})${constants_12.REGEX_PARTS.rightBoundary}`;
  const PATTERN_WITH_PREFIX = new RegExp(`(?:\u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0435|\u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0438)\\s*${PATTERN2}`, constants_12.REGEX_PARTS.flags);
  const PATTERN_WITHOUT_PREFIX = new RegExp(PATTERN2, "i");
  class RUTimeUnitWithinFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
      return constants_12.REGEX_PARTS.leftBoundary;
    }
    innerPattern(context) {
      return context.option.forwardDate ? PATTERN_WITHOUT_PREFIX : PATTERN_WITH_PREFIX;
    }
    innerExtract(context, match2) {
      const timeUnits = constants_12.parseTimeUnits(match2[1]);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  RUTimeUnitWithinFormatParser.default = RUTimeUnitWithinFormatParser$1;
  return RUTimeUnitWithinFormatParser;
}
var RUMonthNameLittleEndianParser$1 = {};
Object.defineProperty(RUMonthNameLittleEndianParser$1, "__esModule", { value: true });
const years_1$1 = years;
const constants_1$1 = constants;
const constants_2$1 = constants;
const constants_3 = constants;
const pattern_1$1 = pattern;
const AbstractParserWithWordBoundary_1$1 = AbstractParserWithWordBoundary;
const PATTERN$1 = new RegExp(`(?:\u0441)?\\s*(${constants_3.ORDINAL_NUMBER_PATTERN})(?:\\s{0,3}(?:\u043F\u043E|-|\u2013|\u0434\u043E)?\\s{0,3}(${constants_3.ORDINAL_NUMBER_PATTERN}))?(?:-|\\/|\\s{0,3}(?:of)?\\s{0,3})(${pattern_1$1.matchAnyPattern(constants_1$1.MONTH_DICTIONARY)})(?:(?:-|\\/|,?\\s{0,3})(${constants_2$1.YEAR_PATTERN}(?![^\\s]\\d)))?${constants_1$1.REGEX_PARTS.rightBoundary}`, constants_1$1.REGEX_PARTS.flags);
const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const MONTH_NAME_GROUP$1 = 3;
const YEAR_GROUP$1 = 4;
class RUMonthNameLittleEndianParser extends AbstractParserWithWordBoundary_1$1.AbstractParserWithWordBoundaryChecking {
  patternLeftBoundary() {
    return constants_1$1.REGEX_PARTS.leftBoundary;
  }
  innerPattern() {
    return PATTERN$1;
  }
  innerExtract(context, match2) {
    const result = context.createParsingResult(match2.index, match2[0]);
    const month = constants_1$1.MONTH_DICTIONARY[match2[MONTH_NAME_GROUP$1].toLowerCase()];
    const day = constants_3.parseOrdinalNumberPattern(match2[DATE_GROUP]);
    if (day > 31) {
      match2.index = match2.index + match2[DATE_GROUP].length;
      return null;
    }
    result.start.assign("month", month);
    result.start.assign("day", day);
    if (match2[YEAR_GROUP$1]) {
      const yearNumber = constants_2$1.parseYear(match2[YEAR_GROUP$1]);
      result.start.assign("year", yearNumber);
    } else {
      const year = years_1$1.findYearClosestToRef(context.refDate, day, month);
      result.start.imply("year", year);
    }
    if (match2[DATE_TO_GROUP]) {
      const endDate = constants_3.parseOrdinalNumberPattern(match2[DATE_TO_GROUP]);
      result.end = result.start.clone();
      result.end.assign("day", endDate);
    }
    return result;
  }
}
RUMonthNameLittleEndianParser$1.default = RUMonthNameLittleEndianParser;
var RUMonthNameParser$1 = {};
Object.defineProperty(RUMonthNameParser$1, "__esModule", { value: true });
const constants_1 = constants;
const years_1 = years;
const pattern_1 = pattern;
const constants_2 = constants;
const AbstractParserWithWordBoundary_1 = AbstractParserWithWordBoundary;
const PATTERN = new RegExp(`((?:\u0432)\\s*)?(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})\\s*(?:[,-]?\\s*(${constants_2.YEAR_PATTERN})?)?(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`, constants_1.REGEX_PARTS.flags);
const MONTH_NAME_GROUP = 2;
const YEAR_GROUP = 3;
class RUMonthNameParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
  patternLeftBoundary() {
    return constants_1.REGEX_PARTS.leftBoundary;
  }
  innerPattern() {
    return PATTERN;
  }
  innerExtract(context, match2) {
    const monthName = match2[MONTH_NAME_GROUP].toLowerCase();
    if (match2[0].length <= 3 && !constants_1.FULL_MONTH_NAME_DICTIONARY[monthName]) {
      return null;
    }
    const result = context.createParsingResult(match2.index, match2.index + match2[0].length);
    result.start.imply("day", 1);
    const month = constants_1.MONTH_DICTIONARY[monthName];
    result.start.assign("month", month);
    if (match2[YEAR_GROUP]) {
      const year = constants_2.parseYear(match2[YEAR_GROUP]);
      result.start.assign("year", year);
    } else {
      const year = years_1.findYearClosestToRef(context.refDate, 1, month);
      result.start.imply("year", year);
    }
    return result;
  }
}
RUMonthNameParser$1.default = RUMonthNameParser;
var RUTimeExpressionParser = {};
var hasRequiredRUTimeExpressionParser;
function requireRUTimeExpressionParser() {
  if (hasRequiredRUTimeExpressionParser)
    return RUTimeExpressionParser;
  hasRequiredRUTimeExpressionParser = 1;
  Object.defineProperty(RUTimeExpressionParser, "__esModule", { value: true });
  const index_1 = requireDist();
  const AbstractTimeExpressionParser_1 = requireAbstractTimeExpressionParser();
  const constants_12 = constants;
  class RUTimeExpressionParser$1 extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
    constructor(strictMode) {
      super(strictMode);
    }
    patternFlags() {
      return constants_12.REGEX_PARTS.flags;
    }
    primaryPatternLeftBoundary() {
      return `(^|\\s|T|(?:[^\\p{L}\\p{N}_]))`;
    }
    followingPhase() {
      return `\\s*(?:\\-|\\\u2013|\\~|\\\u301C|\u0434\u043E|\u0438|\u043F\u043E|\\?)\\s*`;
    }
    primaryPrefix() {
      return `(?:(?:\u0432|\u0441)\\s*)??`;
    }
    primarySuffix() {
      return `(?:\\s*(?:\u0443\u0442\u0440\u0430|\u0432\u0435\u0447\u0435\u0440\u0430|\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F))?(?!\\/)${constants_12.REGEX_PARTS.rightBoundary}`;
    }
    extractPrimaryTimeComponents(context, match2) {
      const components = super.extractPrimaryTimeComponents(context, match2);
      if (components) {
        if (match2[0].endsWith("\u0432\u0435\u0447\u0435\u0440\u0430")) {
          const hour = components.get("hour");
          if (hour >= 6 && hour < 12) {
            components.assign("hour", components.get("hour") + 12);
            components.assign("meridiem", index_1.Meridiem.PM);
          } else if (hour < 6) {
            components.assign("meridiem", index_1.Meridiem.AM);
          }
        }
        if (match2[0].endsWith("\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F")) {
          components.assign("meridiem", index_1.Meridiem.PM);
          const hour = components.get("hour");
          if (hour >= 0 && hour <= 6) {
            components.assign("hour", components.get("hour") + 12);
          }
        }
        if (match2[0].endsWith("\u0443\u0442\u0440\u0430")) {
          components.assign("meridiem", index_1.Meridiem.AM);
          const hour = components.get("hour");
          if (hour < 12) {
            components.assign("hour", components.get("hour"));
          }
        }
      }
      return components;
    }
  }
  RUTimeExpressionParser.default = RUTimeExpressionParser$1;
  return RUTimeExpressionParser;
}
var RUTimeUnitAgoFormatParser = {};
var hasRequiredRUTimeUnitAgoFormatParser;
function requireRUTimeUnitAgoFormatParser() {
  if (hasRequiredRUTimeUnitAgoFormatParser)
    return RUTimeUnitAgoFormatParser;
  hasRequiredRUTimeUnitAgoFormatParser = 1;
  Object.defineProperty(RUTimeUnitAgoFormatParser, "__esModule", { value: true });
  const constants_12 = constants;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  const PATTERN2 = new RegExp(`(${constants_12.TIME_UNITS_PATTERN})\\s{0,5}\u043D\u0430\u0437\u0430\u0434(?=(?:\\W|$))`, constants_12.REGEX_PARTS.flags);
  class RUTimeUnitAgoFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
      return constants_12.REGEX_PARTS.leftBoundary;
    }
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const timeUnits = constants_12.parseTimeUnits(match2[1]);
      const outputTimeUnits = timeunits_1.reverseTimeUnits(timeUnits);
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
  }
  RUTimeUnitAgoFormatParser.default = RUTimeUnitAgoFormatParser$1;
  return RUTimeUnitAgoFormatParser;
}
var RUMergeDateRangeRefiner$1 = {};
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(RUMergeDateRangeRefiner$1, "__esModule", { value: true });
const AbstractMergeDateRangeRefiner_1 = __importDefault(AbstractMergeDateRangeRefiner$1);
class RUMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner_1.default {
  patternBetween() {
    return /^\s*(и до|и по|до|по|-)\s*$/i;
  }
}
RUMergeDateRangeRefiner$1.default = RUMergeDateRangeRefiner;
var RUMergeDateTimeRefiner = {};
var hasRequiredRUMergeDateTimeRefiner;
function requireRUMergeDateTimeRefiner() {
  if (hasRequiredRUMergeDateTimeRefiner)
    return RUMergeDateTimeRefiner;
  hasRequiredRUMergeDateTimeRefiner = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(RUMergeDateTimeRefiner, "__esModule", { value: true });
  const AbstractMergeDateTimeRefiner_1 = __importDefault2(requireAbstractMergeDateTimeRefiner());
  class RUMergeDateTimeRefiner$1 extends AbstractMergeDateTimeRefiner_1.default {
    patternBetween() {
      return new RegExp(`^\\s*(T|\u0432|,|-)?\\s*$`);
    }
  }
  RUMergeDateTimeRefiner.default = RUMergeDateTimeRefiner$1;
  return RUMergeDateTimeRefiner;
}
var RUCasualDateParser = {};
var hasRequiredRUCasualDateParser;
function requireRUCasualDateParser() {
  if (hasRequiredRUCasualDateParser)
    return RUCasualDateParser;
  hasRequiredRUCasualDateParser = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o, k22, { enumerable: true, get: function() {
      return m3[k2];
    } });
  } : function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o[k22] = m3[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(RUCasualDateParser, "__esModule", { value: true });
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const references = __importStar(requireCasualReferences());
  const constants_12 = constants;
  const PATTERN2 = new RegExp(`(?:\u0441|\u0441\u043E)?\\s*(\u0441\u0435\u0433\u043E\u0434\u043D\u044F|\u0432\u0447\u0435\u0440\u0430|\u0437\u0430\u0432\u0442\u0440\u0430|\u043F\u043E\u0441\u043B\u0435\u0437\u0430\u0432\u0442\u0440\u0430|\u043F\u043E\u0437\u0430\u0432\u0447\u0435\u0440\u0430)${constants_12.REGEX_PARTS.rightBoundary}`, constants_12.REGEX_PARTS.flags);
  class RUCasualDateParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
      return constants_12.REGEX_PARTS.leftBoundary;
    }
    innerPattern(context) {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const lowerText = match2[1].toLowerCase();
      const component = context.createParsingComponents();
      switch (lowerText) {
        case "\u0441\u0435\u0433\u043E\u0434\u043D\u044F":
          return references.today(context.reference);
        case "\u0432\u0447\u0435\u0440\u0430":
          return references.yesterday(context.reference);
        case "\u0437\u0430\u0432\u0442\u0440\u0430":
          return references.tomorrow(context.reference);
        case "\u043F\u043E\u0441\u043B\u0435\u0437\u0430\u0432\u0442\u0440\u0430":
          return references.theDayAfter(context.reference, 2);
        case "\u043F\u043E\u0437\u0430\u0432\u0447\u0435\u0440\u0430":
          return references.theDayBefore(context.reference, 2);
      }
      return component;
    }
  }
  RUCasualDateParser.default = RUCasualDateParser$1;
  return RUCasualDateParser;
}
var RUCasualTimeParser = {};
var hasRequiredRUCasualTimeParser;
function requireRUCasualTimeParser() {
  if (hasRequiredRUCasualTimeParser)
    return RUCasualTimeParser;
  hasRequiredRUCasualTimeParser = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o, k22, { enumerable: true, get: function() {
      return m3[k2];
    } });
  } : function(o, m3, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o[k22] = m3[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(RUCasualTimeParser, "__esModule", { value: true });
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const references = __importStar(requireCasualReferences());
  const dayjs_12 = requireDayjs();
  const dayjs_2 = __importDefault2(dayjs_min.exports);
  const constants_12 = constants;
  const PATTERN2 = new RegExp(`(\u0441\u0435\u0439\u0447\u0430\u0441|\u043F\u0440\u043E\u0448\u043B\u044B\u043C\\s*\u0432\u0435\u0447\u0435\u0440\u043E\u043C|\u043F\u0440\u043E\u0448\u043B\u043E\u0439\\s*\u043D\u043E\u0447\u044C\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439\\s*\u043D\u043E\u0447\u044C\u044E|\u0441\u0435\u0433\u043E\u0434\u043D\u044F\\s*\u043D\u043E\u0447\u044C\u044E|\u044D\u0442\u043E\u0439\\s*\u043D\u043E\u0447\u044C\u044E|\u043D\u043E\u0447\u044C\u044E|\u044D\u0442\u0438\u043C \u0443\u0442\u0440\u043E\u043C|\u0443\u0442\u0440\u043E\u043C|\u0443\u0442\u0440\u0430|\u0432\\s*\u043F\u043E\u043B\u0434\u0435\u043D\u044C|\u0432\u0435\u0447\u0435\u0440\u043E\u043C|\u0432\u0435\u0447\u0435\u0440\u0430|\u0432\\s*\u043F\u043E\u043B\u043D\u043E\u0447\u044C)${constants_12.REGEX_PARTS.rightBoundary}`, constants_12.REGEX_PARTS.flags);
  class RUCasualTimeParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
      return constants_12.REGEX_PARTS.leftBoundary;
    }
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      let targetDate = dayjs_2.default(context.refDate);
      const lowerText = match2[0].toLowerCase();
      const component = context.createParsingComponents();
      if (lowerText === "\u0441\u0435\u0439\u0447\u0430\u0441") {
        return references.now(context.reference);
      }
      if (lowerText === "\u0432\u0435\u0447\u0435\u0440\u043E\u043C" || lowerText === "\u0432\u0435\u0447\u0435\u0440\u0430") {
        return references.evening(context.reference);
      }
      if (lowerText.endsWith("\u0443\u0442\u0440\u043E\u043C") || lowerText.endsWith("\u0443\u0442\u0440\u0430")) {
        return references.morning(context.reference);
      }
      if (lowerText.match(/в\s*полдень/)) {
        return references.noon(context.reference);
      }
      if (lowerText.match(/прошлой\s*ночью/)) {
        return references.lastNight(context.reference);
      }
      if (lowerText.match(/прошлым\s*вечером/)) {
        return references.yesterdayEvening(context.reference);
      }
      if (lowerText.match(/следующей\s*ночью/)) {
        const daysToAdd = targetDate.hour() < 22 ? 1 : 2;
        targetDate = targetDate.add(daysToAdd, "day");
        dayjs_12.assignSimilarDate(component, targetDate);
        component.imply("hour", 0);
      }
      if (lowerText.match(/в\s*полночь/) || lowerText.endsWith("\u043D\u043E\u0447\u044C\u044E")) {
        return references.midnight(context.reference);
      }
      return component;
    }
  }
  RUCasualTimeParser.default = RUCasualTimeParser$1;
  return RUCasualTimeParser;
}
var RUWeekdayParser = {};
var hasRequiredRUWeekdayParser;
function requireRUWeekdayParser() {
  if (hasRequiredRUWeekdayParser)
    return RUWeekdayParser;
  hasRequiredRUWeekdayParser = 1;
  Object.defineProperty(RUWeekdayParser, "__esModule", { value: true });
  const constants_12 = constants;
  const pattern_12 = pattern;
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const weekdays_1 = requireWeekdays();
  const PATTERN2 = new RegExp(`(?:(?:,|\\(|\uFF08)\\s*)?(?:\u0432\\s*?)?(?:(\u044D\u0442\u0443|\u044D\u0442\u043E\u0442|\u043F\u0440\u043E\u0448\u043B\u044B\u0439|\u043F\u0440\u043E\u0448\u043B\u0443\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0433\u043E)\\s*)?(${pattern_12.matchAnyPattern(constants_12.WEEKDAY_DICTIONARY)})(?:\\s*(?:,|\\)|\uFF09))?(?:\\s*\u043D\u0430\\s*(\u044D\u0442\u043E\u0439|\u043F\u0440\u043E\u0448\u043B\u043E\u0439|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439)\\s*\u043D\u0435\u0434\u0435\u043B\u0435)?${constants_12.REGEX_PARTS.rightBoundary}`, constants_12.REGEX_PARTS.flags);
  const PREFIX_GROUP2 = 1;
  const WEEKDAY_GROUP = 2;
  const POSTFIX_GROUP = 3;
  class RUWeekdayParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
      return PATTERN2;
    }
    patternLeftBoundary() {
      return constants_12.REGEX_PARTS.leftBoundary;
    }
    innerExtract(context, match2) {
      const dayOfWeek = match2[WEEKDAY_GROUP].toLowerCase();
      const weekday = constants_12.WEEKDAY_DICTIONARY[dayOfWeek];
      const prefix = match2[PREFIX_GROUP2];
      const postfix = match2[POSTFIX_GROUP];
      let modifierWord = prefix || postfix;
      modifierWord = modifierWord || "";
      modifierWord = modifierWord.toLowerCase();
      let modifier = null;
      if (modifierWord == "\u043F\u0440\u043E\u0448\u043B\u044B\u0439" || modifierWord == "\u043F\u0440\u043E\u0448\u043B\u0443\u044E" || modifierWord == "\u043F\u0440\u043E\u0448\u043B\u043E\u0439") {
        modifier = "last";
      } else if (modifierWord == "\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439" || modifierWord == "\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E" || modifierWord == "\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439" || modifierWord == "\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0433\u043E") {
        modifier = "next";
      } else if (modifierWord == "\u044D\u0442\u043E\u0442" || modifierWord == "\u044D\u0442\u0443" || modifierWord == "\u044D\u0442\u043E\u0439") {
        modifier = "this";
      }
      return weekdays_1.createParsingComponentsAtWeekday(context.reference, weekday, modifier);
    }
  }
  RUWeekdayParser.default = RUWeekdayParser$1;
  return RUWeekdayParser;
}
var RURelativeDateFormatParser = {};
var hasRequiredRURelativeDateFormatParser;
function requireRURelativeDateFormatParser() {
  if (hasRequiredRURelativeDateFormatParser)
    return RURelativeDateFormatParser;
  hasRequiredRURelativeDateFormatParser = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(RURelativeDateFormatParser, "__esModule", { value: true });
  const constants_12 = constants;
  const results_1 = requireResults();
  const dayjs_12 = __importDefault2(dayjs_min.exports);
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const pattern_12 = pattern;
  const PATTERN2 = new RegExp(`(\u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u043C|\u043D\u0430 \u043F\u0440\u043E\u0448\u043B\u043E\u0439|\u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439|\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u043C|\u043D\u0430 \u044D\u0442\u043E\u0439|\u0432 \u044D\u0442\u043E\u043C)\\s*(${pattern_12.matchAnyPattern(constants_12.TIME_UNIT_DICTIONARY)})(?=\\s*)${constants_12.REGEX_PARTS.rightBoundary}`, constants_12.REGEX_PARTS.flags);
  const MODIFIER_WORD_GROUP = 1;
  const RELATIVE_WORD_GROUP = 2;
  class RURelativeDateFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
      return constants_12.REGEX_PARTS.leftBoundary;
    }
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const modifier = match2[MODIFIER_WORD_GROUP].toLowerCase();
      const unitWord = match2[RELATIVE_WORD_GROUP].toLowerCase();
      const timeunit = constants_12.TIME_UNIT_DICTIONARY[unitWord];
      if (modifier == "\u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439" || modifier == "\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u043C") {
        const timeUnits = {};
        timeUnits[timeunit] = 1;
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
      if (modifier == "\u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u043C" || modifier == "\u043D\u0430 \u043F\u0440\u043E\u0448\u043B\u043E\u0439") {
        const timeUnits = {};
        timeUnits[timeunit] = -1;
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
      const components = context.createParsingComponents();
      let date = dayjs_12.default(context.reference.instant);
      if (timeunit.match(/week/i)) {
        date = date.add(-date.get("d"), "d");
        components.imply("day", date.date());
        components.imply("month", date.month() + 1);
        components.imply("year", date.year());
      } else if (timeunit.match(/month/i)) {
        date = date.add(-date.date() + 1, "d");
        components.imply("day", date.date());
        components.assign("year", date.year());
        components.assign("month", date.month() + 1);
      } else if (timeunit.match(/year/i)) {
        date = date.add(-date.date() + 1, "d");
        date = date.add(-date.month(), "month");
        components.imply("day", date.date());
        components.imply("month", date.month() + 1);
        components.assign("year", date.year());
      }
      return components;
    }
  }
  RURelativeDateFormatParser.default = RURelativeDateFormatParser$1;
  return RURelativeDateFormatParser;
}
var RUTimeUnitCasualRelativeFormatParser = {};
var hasRequiredRUTimeUnitCasualRelativeFormatParser;
function requireRUTimeUnitCasualRelativeFormatParser() {
  if (hasRequiredRUTimeUnitCasualRelativeFormatParser)
    return RUTimeUnitCasualRelativeFormatParser;
  hasRequiredRUTimeUnitCasualRelativeFormatParser = 1;
  Object.defineProperty(RUTimeUnitCasualRelativeFormatParser, "__esModule", { value: true });
  const constants_12 = constants;
  const results_1 = requireResults();
  const AbstractParserWithWordBoundary_12 = AbstractParserWithWordBoundary;
  const timeunits_1 = timeunits;
  const PATTERN2 = new RegExp(`(\u044D\u0442\u0438|\u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435|\u043F\u0440\u043E\u0448\u043B\u044B\u0435|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0435|\u043F\u043E\u0441\u043B\u0435|\u0447\u0435\u0440\u0435\u0437|\\+|-)\\s*(${constants_12.TIME_UNITS_PATTERN})${constants_12.REGEX_PARTS.rightBoundary}`, constants_12.REGEX_PARTS.flags);
  class RUTimeUnitCasualRelativeFormatParser$1 extends AbstractParserWithWordBoundary_12.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
      return constants_12.REGEX_PARTS.leftBoundary;
    }
    innerPattern() {
      return PATTERN2;
    }
    innerExtract(context, match2) {
      const prefix = match2[1].toLowerCase();
      let timeUnits = constants_12.parseTimeUnits(match2[2]);
      switch (prefix) {
        case "\u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435":
        case "\u043F\u0440\u043E\u0448\u043B\u044B\u0435":
        case "-":
          timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
          break;
      }
      return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
  }
  RUTimeUnitCasualRelativeFormatParser.default = RUTimeUnitCasualRelativeFormatParser$1;
  return RUTimeUnitCasualRelativeFormatParser;
}
var hasRequiredRu;
function requireRu() {
  if (hasRequiredRu)
    return ru;
  hasRequiredRu = 1;
  (function(exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfiguration = exports2.createCasualConfiguration = exports2.parseDate = exports2.parse = exports2.strict = exports2.casual = void 0;
    const RUTimeUnitWithinFormatParser_1 = __importDefault2(requireRUTimeUnitWithinFormatParser());
    const RUMonthNameLittleEndianParser_1 = __importDefault2(RUMonthNameLittleEndianParser$1);
    const RUMonthNameParser_1 = __importDefault2(RUMonthNameParser$1);
    const RUTimeExpressionParser_1 = __importDefault2(requireRUTimeExpressionParser());
    const RUTimeUnitAgoFormatParser_1 = __importDefault2(requireRUTimeUnitAgoFormatParser());
    const RUMergeDateRangeRefiner_1 = __importDefault2(RUMergeDateRangeRefiner$1);
    const RUMergeDateTimeRefiner_1 = __importDefault2(requireRUMergeDateTimeRefiner());
    const configurations_1 = requireConfigurations();
    const RUCasualDateParser_1 = __importDefault2(requireRUCasualDateParser());
    const RUCasualTimeParser_1 = __importDefault2(requireRUCasualTimeParser());
    const RUWeekdayParser_1 = __importDefault2(requireRUWeekdayParser());
    const RURelativeDateFormatParser_1 = __importDefault2(requireRURelativeDateFormatParser());
    const chrono_1 = requireChrono();
    const SlashDateFormatParser_1 = __importDefault2(SlashDateFormatParser$1);
    const RUTimeUnitCasualRelativeFormatParser_1 = __importDefault2(requireRUTimeUnitCasualRelativeFormatParser());
    exports2.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports2.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
    function createCasualConfiguration() {
      const option = createConfiguration(false);
      option.parsers.unshift(new RUCasualDateParser_1.default());
      option.parsers.unshift(new RUCasualTimeParser_1.default());
      option.parsers.unshift(new RUMonthNameParser_1.default());
      option.parsers.unshift(new RURelativeDateFormatParser_1.default());
      option.parsers.unshift(new RUTimeUnitCasualRelativeFormatParser_1.default());
      return option;
    }
    exports2.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(true),
          new RUTimeUnitWithinFormatParser_1.default(),
          new RUMonthNameLittleEndianParser_1.default(),
          new RUWeekdayParser_1.default(),
          new RUTimeExpressionParser_1.default(strictMode),
          new RUTimeUnitAgoFormatParser_1.default()
        ],
        refiners: [new RUMergeDateTimeRefiner_1.default(), new RUMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports2.createConfiguration = createConfiguration;
  })(ru);
  return ru;
}
var hasRequiredDist;
function requireDist() {
  if (hasRequiredDist)
    return dist;
  hasRequiredDist = 1;
  (function(exports2) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      Object.defineProperty(o, k22, { enumerable: true, get: function() {
        return m3[k2];
      } });
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseDate = exports2.parse = exports2.casual = exports2.strict = exports2.ru = exports2.zh = exports2.nl = exports2.pt = exports2.ja = exports2.fr = exports2.de = exports2.Weekday = exports2.Meridiem = exports2.Chrono = exports2.en = void 0;
    const en2 = __importStar(requireEn());
    exports2.en = en2;
    const chrono_1 = requireChrono();
    Object.defineProperty(exports2, "Chrono", { enumerable: true, get: function() {
      return chrono_1.Chrono;
    } });
    (function(Meridiem) {
      Meridiem[Meridiem["AM"] = 0] = "AM";
      Meridiem[Meridiem["PM"] = 1] = "PM";
    })(exports2.Meridiem || (exports2.Meridiem = {}));
    (function(Weekday) {
      Weekday[Weekday["SUNDAY"] = 0] = "SUNDAY";
      Weekday[Weekday["MONDAY"] = 1] = "MONDAY";
      Weekday[Weekday["TUESDAY"] = 2] = "TUESDAY";
      Weekday[Weekday["WEDNESDAY"] = 3] = "WEDNESDAY";
      Weekday[Weekday["THURSDAY"] = 4] = "THURSDAY";
      Weekday[Weekday["FRIDAY"] = 5] = "FRIDAY";
      Weekday[Weekday["SATURDAY"] = 6] = "SATURDAY";
    })(exports2.Weekday || (exports2.Weekday = {}));
    const de2 = __importStar(requireDe());
    exports2.de = de2;
    const fr2 = __importStar(requireFr());
    exports2.fr = fr2;
    const ja2 = __importStar(requireJa());
    exports2.ja = ja2;
    const pt2 = __importStar(requirePt());
    exports2.pt = pt2;
    const nl2 = __importStar(requireNl());
    exports2.nl = nl2;
    const zh2 = __importStar(requireZh());
    exports2.zh = zh2;
    const ru2 = __importStar(requireRu());
    exports2.ru = ru2;
    exports2.strict = en2.strict;
    exports2.casual = en2.casual;
    function parse2(text2, ref, option) {
      return exports2.casual.parse(text2, ref, option);
    }
    exports2.parse = parse2;
    function parseDate(text2, ref, option) {
      return exports2.casual.parseDate(text2, ref, option);
    }
    exports2.parseDate = parseDate;
  })(dist);
  return dist;
}
var distExports = requireDist();
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function _typeof$y(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$y = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$y = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$y(obj);
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof$y(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}
function _typeof$x(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$x = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$x = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$x(obj);
}
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof$x(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}
function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}
var roundingMap = {
  ceil: Math.ceil,
  round: Math.round,
  floor: Math.floor,
  trunc: function trunc(value) {
    return value < 0 ? Math.ceil(value) : Math.floor(value);
  }
};
var defaultRoundingMethod = "trunc";
function getRoundingMethod(method) {
  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
}
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return endOfDay(date).getTime() === endOfMonth(date).getTime();
}
function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  var result;
  if (difference < 1) {
    result = 0;
  } else {
    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
      dateLeft.setDate(30);
    }
    dateLeft.setMonth(dateLeft.getMonth() - sign * difference);
    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;
    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
      isLastMonthNotFull = false;
    }
    result = sign * (difference - Number(isLastMonthNotFull));
  }
  return result === 0 ? 0 : result;
}
function differenceInSeconds(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function endOfToday() {
  return endOfDay(Date.now());
}
function endOfTomorrow() {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth();
  var day = now.getDate();
  var date = new Date(0);
  date.setFullYear(year, month, day + 1);
  date.setHours(23, 59, 59, 999);
  return date;
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}
var formatters$2 = {
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
const formatters$3 = formatters$2;
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return formatters$3.y(date, token);
  },
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return formatters$3.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return formatters$3.d(date, token);
  },
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return formatters$3.h(date, token);
  },
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return formatters$3.H(date, token);
  },
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return formatters$3.m(date, token);
  },
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return formatters$3.s(date, token);
  },
  S: function S2(date, token) {
    return formatters$3.S(date, token);
  },
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset2, dirtyDelimiter) {
  var sign = offset2 > 0 ? "-" : "+";
  var absOffset = Math.abs(offset2);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset2, dirtyDelimiter) {
  if (offset2 % 60 === 0) {
    var sign = offset2 > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset2) / 60, 2);
  }
  return formatTimezone(offset2, dirtyDelimiter);
}
function formatTimezone(offset2, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset2 > 0 ? "-" : "+";
  var absOffset = Math.abs(offset2);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
const formatters$1 = formatters;
var dateLongFormatter = function dateLongFormatter2(pattern2, formatLong2) {
  switch (pattern2) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern2, formatLong2) {
  switch (pattern2) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern2, formatLong2) {
  var matchResult = pattern2.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern2, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const longFormatters$1 = longFormatters;
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance$1 = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
const formatDistance$2 = formatDistance$1;
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong$1 = formatLong;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
const formatRelative$1 = formatRelative;
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize$1 = localize;
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern2) {
      return pattern2.test(matchedString);
    }) : findKey(parsePatterns, function(pattern2) {
      return pattern2.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match$1 = match;
var locale = {
  code: "en-US",
  formatDistance: formatDistance$2,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const enUS = locale;
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
function format$1(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp$1).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp$1).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString$1(substring);
    }
    var formatter = formatters$1[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString$1(input) {
  var matched = input.match(escapedStringRegExp$1);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp$1, "'");
}
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      target[property] = object[property];
    }
  }
  return target;
}
function cloneObject(object) {
  return assign({}, object);
}
var MINUTES_IN_DAY = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;
function formatDistance2(dirtyDate, dirtyBaseDate, options) {
  var _ref, _options$locale;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  if (!locale2.formatDistance) {
    throw new RangeError("locale must contain formatDistance property");
  }
  var comparison = compareAsc(dirtyDate, dirtyBaseDate);
  if (isNaN(comparison)) {
    throw new RangeError("Invalid time value");
  }
  var localizeOptions = assign(cloneObject(options), {
    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
    comparison
  });
  var dateLeft;
  var dateRight;
  if (comparison > 0) {
    dateLeft = toDate(dirtyBaseDate);
    dateRight = toDate(dirtyDate);
  } else {
    dateLeft = toDate(dirtyDate);
    dateRight = toDate(dirtyBaseDate);
  }
  var seconds = differenceInSeconds(dateRight, dateLeft);
  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1e3;
  var minutes = Math.round((seconds - offsetInSeconds) / 60);
  var months;
  if (minutes < 2) {
    if (options !== null && options !== void 0 && options.includeSeconds) {
      if (seconds < 5) {
        return locale2.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale2.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale2.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale2.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale2.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale2.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }
  } else if (minutes < 45) {
    return locale2.formatDistance("xMinutes", minutes, localizeOptions);
  } else if (minutes < 90) {
    return locale2.formatDistance("aboutXHours", 1, localizeOptions);
  } else if (minutes < MINUTES_IN_DAY) {
    var hours = Math.round(minutes / 60);
    return locale2.formatDistance("aboutXHours", hours, localizeOptions);
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return locale2.formatDistance("xDays", 1, localizeOptions);
  } else if (minutes < MINUTES_IN_MONTH) {
    var days = Math.round(minutes / MINUTES_IN_DAY);
    return locale2.formatDistance("xDays", days, localizeOptions);
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH);
    return locale2.formatDistance("aboutXMonths", months, localizeOptions);
  }
  months = differenceInMonths(dateRight, dateLeft);
  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
    return locale2.formatDistance("xMonths", nearestMonth, localizeOptions);
  } else {
    var monthsSinceStartOfYear = months % 12;
    var years2 = Math.floor(months / 12);
    if (monthsSinceStartOfYear < 3) {
      return locale2.formatDistance("aboutXYears", years2, localizeOptions);
    } else if (monthsSinceStartOfYear < 9) {
      return locale2.formatDistance("overXYears", years2, localizeOptions);
    } else {
      return locale2.formatDistance("almostXYears", years2 + 1, localizeOptions);
    }
  }
}
function formatDistanceToNow(dirtyDate, options) {
  requiredArgs(1, arguments);
  return formatDistance2(dirtyDate, Date.now(), options);
}
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}
function _typeof$w(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$w = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$w = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$w(obj);
}
function _inherits$v(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$v(subClass, superClass);
}
function _setPrototypeOf$v(o, p) {
  _setPrototypeOf$v = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$v(o, p);
}
function _createSuper$v(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$v();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$v(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$v(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$v(this, result);
  };
}
function _possibleConstructorReturn$v(self2, call) {
  if (call && (_typeof$w(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$v(self2);
}
function _assertThisInitialized$v(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$v() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$v(o) {
  _getPrototypeOf$v = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$v(o);
}
function _classCallCheck$w(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$w(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$w(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$w(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$w(Constructor, staticProps);
  return Constructor;
}
function _defineProperty$v(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /* @__PURE__ */ function() {
  function Setter2() {
    _classCallCheck$w(this, Setter2);
    _defineProperty$v(this, "subPriority", 0);
  }
  _createClass$w(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = /* @__PURE__ */ function(_Setter) {
  _inherits$v(ValueSetter2, _Setter);
  var _super = _createSuper$v(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck$w(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass$w(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
  _inherits$v(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper$v(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck$w(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty$v(_assertThisInitialized$v(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty$v(_assertThisInitialized$v(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass$w(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);
function _classCallCheck$v(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$v(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$v(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$v(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$v(Constructor, staticProps);
  return Constructor;
}
var Parser = /* @__PURE__ */ function() {
  function Parser2() {
    _classCallCheck$v(this, Parser2);
  }
  _createClass$v(Parser2, [{
    key: "run",
    value: function run2(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();
function _typeof$v(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$v = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$v = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$v(obj);
}
function _classCallCheck$u(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$u(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$u(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$u(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$u(Constructor, staticProps);
  return Constructor;
}
function _inherits$u(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$u(subClass, superClass);
}
function _setPrototypeOf$u(o, p) {
  _setPrototypeOf$u = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$u(o, p);
}
function _createSuper$u(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$u();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$u(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$u(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$u(this, result);
  };
}
function _possibleConstructorReturn$u(self2, call) {
  if (call && (_typeof$v(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$u(self2);
}
function _assertThisInitialized$u(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$u() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$u(o) {
  _getPrototypeOf$u = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$u(o);
}
function _defineProperty$u(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var EraParser = /* @__PURE__ */ function(_Parser) {
  _inherits$u(EraParser2, _Parser);
  var _super = _createSuper$u(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck$u(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$u(_assertThisInitialized$u(_this), "priority", 140);
    _defineProperty$u(_assertThisInitialized$u(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass$u(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  date: /^(3[0-1]|[0-2]?\d)/,
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  week: /^(5[0-3]|[0-4]?\d)/,
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  hour11h: /^(1[0-1]|0?\d)/,
  hour12h: /^(1[0-2]|0?\d)/,
  minute: /^[0-5]?\d/,
  second: /^[0-5]?\d/,
  singleDigit: /^\d/,
  twoDigits: /^\d{1,2}/,
  threeDigits: /^\d{1,3}/,
  fourDigits: /^\d{1,4}/,
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  twoDigitsSigned: /^-?\d{1,2}/,
  threeDigitsSigned: /^-?\d{1,3}/,
  fourDigitsSigned: /^-?\d{1,4}/
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern2, dateString) {
  var matchResult = dateString.match(pattern2);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern2, dateString) {
  var matchResult = dateString.match(pattern2);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function _typeof$u(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$u = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$u = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$u(obj);
}
function _classCallCheck$t(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$t(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$t(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$t(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$t(Constructor, staticProps);
  return Constructor;
}
function _inherits$t(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$t(subClass, superClass);
}
function _setPrototypeOf$t(o, p) {
  _setPrototypeOf$t = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$t(o, p);
}
function _createSuper$t(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$t();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$t(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$t(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$t(this, result);
  };
}
function _possibleConstructorReturn$t(self2, call) {
  if (call && (_typeof$u(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$t(self2);
}
function _assertThisInitialized$t(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$t() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$t(o) {
  _getPrototypeOf$t = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$t(o);
}
function _defineProperty$t(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var YearParser = /* @__PURE__ */ function(_Parser) {
  _inherits$t(YearParser2, _Parser);
  var _super = _createSuper$t(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck$t(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$t(_assertThisInitialized$t(_this), "priority", 130);
    _defineProperty$t(_assertThisInitialized$t(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$t(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);
function _typeof$t(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$t = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$t = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$t(obj);
}
function _classCallCheck$s(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$s(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$s(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$s(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$s(Constructor, staticProps);
  return Constructor;
}
function _inherits$s(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$s(subClass, superClass);
}
function _setPrototypeOf$s(o, p) {
  _setPrototypeOf$s = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$s(o, p);
}
function _createSuper$s(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$s();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$s(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$s(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$s(this, result);
  };
}
function _possibleConstructorReturn$s(self2, call) {
  if (call && (_typeof$t(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$s(self2);
}
function _assertThisInitialized$s(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$s() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$s(o) {
  _getPrototypeOf$s = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$s(o);
}
function _defineProperty$s(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits$s(LocalWeekYearParser2, _Parser);
  var _super = _createSuper$s(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck$s(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$s(_assertThisInitialized$s(_this), "priority", 130);
    _defineProperty$s(_assertThisInitialized$s(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass$s(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);
function _typeof$s(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$s = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$s = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$s(obj);
}
function _classCallCheck$r(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$r(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$r(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$r(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$r(Constructor, staticProps);
  return Constructor;
}
function _inherits$r(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$r(subClass, superClass);
}
function _setPrototypeOf$r(o, p) {
  _setPrototypeOf$r = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$r(o, p);
}
function _createSuper$r(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$r(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$r(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$r(this, result);
  };
}
function _possibleConstructorReturn$r(self2, call) {
  if (call && (_typeof$s(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$r(self2);
}
function _assertThisInitialized$r(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$r() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$r(o) {
  _getPrototypeOf$r = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$r(o);
}
function _defineProperty$r(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits$r(ISOWeekYearParser2, _Parser);
  var _super = _createSuper$r(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck$r(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$r(_assertThisInitialized$r(_this), "priority", 130);
    _defineProperty$r(_assertThisInitialized$r(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$r(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);
function _typeof$r(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$r = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$r = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$r(obj);
}
function _classCallCheck$q(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$q(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$q(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$q(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$q(Constructor, staticProps);
  return Constructor;
}
function _inherits$q(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$q(subClass, superClass);
}
function _setPrototypeOf$q(o, p) {
  _setPrototypeOf$q = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$q(o, p);
}
function _createSuper$q(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$q(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$q(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$q(this, result);
  };
}
function _possibleConstructorReturn$q(self2, call) {
  if (call && (_typeof$r(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$q(self2);
}
function _assertThisInitialized$q(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$q() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$q(o) {
  _getPrototypeOf$q = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$q(o);
}
function _defineProperty$q(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits$q(ExtendedYearParser2, _Parser);
  var _super = _createSuper$q(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck$q(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$q(_assertThisInitialized$q(_this), "priority", 130);
    _defineProperty$q(_assertThisInitialized$q(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$q(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);
function _typeof$q(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$q = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$q = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$q(obj);
}
function _classCallCheck$p(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$p(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$p(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$p(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$p(Constructor, staticProps);
  return Constructor;
}
function _inherits$p(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$p(subClass, superClass);
}
function _setPrototypeOf$p(o, p) {
  _setPrototypeOf$p = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$p(o, p);
}
function _createSuper$p(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$p(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$p(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$p(this, result);
  };
}
function _possibleConstructorReturn$p(self2, call) {
  if (call && (_typeof$q(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$p(self2);
}
function _assertThisInitialized$p(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$p() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$p(o) {
  _getPrototypeOf$p = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$p(o);
}
function _defineProperty$p(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var QuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits$p(QuarterParser2, _Parser);
  var _super = _createSuper$p(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck$p(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$p(_assertThisInitialized$p(_this), "priority", 120);
    _defineProperty$p(_assertThisInitialized$p(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$p(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);
function _typeof$p(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$p = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$p = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$p(obj);
}
function _classCallCheck$o(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$o(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$o(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$o(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$o(Constructor, staticProps);
  return Constructor;
}
function _inherits$o(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$o(subClass, superClass);
}
function _setPrototypeOf$o(o, p) {
  _setPrototypeOf$o = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$o(o, p);
}
function _createSuper$o(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$o(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$o(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$o(this, result);
  };
}
function _possibleConstructorReturn$o(self2, call) {
  if (call && (_typeof$p(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$o(self2);
}
function _assertThisInitialized$o(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$o() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$o(o) {
  _getPrototypeOf$o = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$o(o);
}
function _defineProperty$o(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits$o(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper$o(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck$o(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$o(_assertThisInitialized$o(_this), "priority", 120);
    _defineProperty$o(_assertThisInitialized$o(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$o(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);
function _typeof$o(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$o = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$o = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$o(obj);
}
function _classCallCheck$n(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$n(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$n(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$n(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$n(Constructor, staticProps);
  return Constructor;
}
function _inherits$n(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$n(subClass, superClass);
}
function _setPrototypeOf$n(o, p) {
  _setPrototypeOf$n = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$n(o, p);
}
function _createSuper$n(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$n(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$n(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$n(this, result);
  };
}
function _possibleConstructorReturn$n(self2, call) {
  if (call && (_typeof$o(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$n(self2);
}
function _assertThisInitialized$n(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$n() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$n(o) {
  _getPrototypeOf$n = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$n(o);
}
function _defineProperty$n(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var MonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits$n(MonthParser2, _Parser);
  var _super = _createSuper$n(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck$n(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$n(_assertThisInitialized$n(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty$n(_assertThisInitialized$n(_this), "priority", 110);
    return _this;
  }
  _createClass$n(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);
function _typeof$n(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$n = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$n = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$n(obj);
}
function _classCallCheck$m(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$m(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$m(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$m(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$m(Constructor, staticProps);
  return Constructor;
}
function _inherits$m(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$m(subClass, superClass);
}
function _setPrototypeOf$m(o, p) {
  _setPrototypeOf$m = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$m(o, p);
}
function _createSuper$m(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$m(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$m(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$m(this, result);
  };
}
function _possibleConstructorReturn$m(self2, call) {
  if (call && (_typeof$n(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$m(self2);
}
function _assertThisInitialized$m(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$m() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$m(o) {
  _getPrototypeOf$m = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$m(o);
}
function _defineProperty$m(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits$m(StandAloneMonthParser2, _Parser);
  var _super = _createSuper$m(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck$m(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$m(_assertThisInitialized$m(_this), "priority", 110);
    _defineProperty$m(_assertThisInitialized$m(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$m(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
function _typeof$m(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$m = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$m = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$m(obj);
}
function _classCallCheck$l(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$l(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$l(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$l(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$l(Constructor, staticProps);
  return Constructor;
}
function _inherits$l(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$l(subClass, superClass);
}
function _setPrototypeOf$l(o, p) {
  _setPrototypeOf$l = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$l(o, p);
}
function _createSuper$l(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$l(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$l(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$l(this, result);
  };
}
function _possibleConstructorReturn$l(self2, call) {
  if (call && (_typeof$m(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$l(self2);
}
function _assertThisInitialized$l(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$l() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$l(o) {
  _getPrototypeOf$l = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$l(o);
}
function _defineProperty$l(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits$l(LocalWeekParser2, _Parser);
  var _super = _createSuper$l(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck$l(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$l(_assertThisInitialized$l(_this), "priority", 100);
    _defineProperty$l(_assertThisInitialized$l(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass$l(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
function _typeof$l(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$l = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$l = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$l(obj);
}
function _classCallCheck$k(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$k(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$k(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$k(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$k(Constructor, staticProps);
  return Constructor;
}
function _inherits$k(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$k(subClass, superClass);
}
function _setPrototypeOf$k(o, p) {
  _setPrototypeOf$k = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$k(o, p);
}
function _createSuper$k(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$k(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$k(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$k(this, result);
  };
}
function _possibleConstructorReturn$k(self2, call) {
  if (call && (_typeof$l(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$k(self2);
}
function _assertThisInitialized$k(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$k() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$k(o) {
  _getPrototypeOf$k = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$k(o);
}
function _defineProperty$k(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits$k(ISOWeekParser2, _Parser);
  var _super = _createSuper$k(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck$k(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$k(_assertThisInitialized$k(_this), "priority", 100);
    _defineProperty$k(_assertThisInitialized$k(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$k(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);
function _typeof$k(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$k = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$k = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$k(obj);
}
function _classCallCheck$j(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$j(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$j(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$j(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$j(Constructor, staticProps);
  return Constructor;
}
function _inherits$j(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$j(subClass, superClass);
}
function _setPrototypeOf$j(o, p) {
  _setPrototypeOf$j = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$j(o, p);
}
function _createSuper$j(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$j(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$j(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$j(this, result);
  };
}
function _possibleConstructorReturn$j(self2, call) {
  if (call && (_typeof$k(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$j(self2);
}
function _assertThisInitialized$j(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$j() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$j(o) {
  _getPrototypeOf$j = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$j(o);
}
function _defineProperty$j(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = /* @__PURE__ */ function(_Parser) {
  _inherits$j(DateParser2, _Parser);
  var _super = _createSuper$j(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck$j(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$j(_assertThisInitialized$j(_this), "priority", 90);
    _defineProperty$j(_assertThisInitialized$j(_this), "subPriority", 1);
    _defineProperty$j(_assertThisInitialized$j(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$j(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);
function _typeof$j(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$j = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$j = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$j(obj);
}
function _classCallCheck$i(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$i(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$i(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$i(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$i(Constructor, staticProps);
  return Constructor;
}
function _inherits$i(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$i(subClass, superClass);
}
function _setPrototypeOf$i(o, p) {
  _setPrototypeOf$i = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$i(o, p);
}
function _createSuper$i(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$i(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$i(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$i(this, result);
  };
}
function _possibleConstructorReturn$i(self2, call) {
  if (call && (_typeof$j(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$i(self2);
}
function _assertThisInitialized$i(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$i() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$i(o) {
  _getPrototypeOf$i = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$i(o);
}
function _defineProperty$i(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits$i(DayOfYearParser2, _Parser);
  var _super = _createSuper$i(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck$i(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$i(_assertThisInitialized$i(_this), "priority", 90);
    _defineProperty$i(_assertThisInitialized$i(_this), "subpriority", 1);
    _defineProperty$i(_assertThisInitialized$i(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$i(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
function _typeof$i(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$i = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$i = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$i(obj);
}
function _classCallCheck$h(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$h(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$h(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$h(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$h(Constructor, staticProps);
  return Constructor;
}
function _inherits$h(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$h(subClass, superClass);
}
function _setPrototypeOf$h(o, p) {
  _setPrototypeOf$h = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$h(o, p);
}
function _createSuper$h(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$h(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$h(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$h(this, result);
  };
}
function _possibleConstructorReturn$h(self2, call) {
  if (call && (_typeof$i(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$h(self2);
}
function _assertThisInitialized$h(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$h() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$h(o) {
  _getPrototypeOf$h = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$h(o);
}
function _defineProperty$h(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayParser = /* @__PURE__ */ function(_Parser) {
  _inherits$h(DayParser2, _Parser);
  var _super = _createSuper$h(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck$h(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$h(_assertThisInitialized$h(_this), "priority", 90);
    _defineProperty$h(_assertThisInitialized$h(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$h(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);
function _typeof$h(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$h = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$h = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$h(obj);
}
function _classCallCheck$g(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$g(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$g(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$g(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$g(Constructor, staticProps);
  return Constructor;
}
function _inherits$g(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$g(subClass, superClass);
}
function _setPrototypeOf$g(o, p) {
  _setPrototypeOf$g = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$g(o, p);
}
function _createSuper$g(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$g(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$g(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$g(this, result);
  };
}
function _possibleConstructorReturn$g(self2, call) {
  if (call && (_typeof$h(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$g(self2);
}
function _assertThisInitialized$g(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$g() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$g(o) {
  _getPrototypeOf$g = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$g(o);
}
function _defineProperty$g(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits$g(LocalDayParser2, _Parser);
  var _super = _createSuper$g(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck$g(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$g(_assertThisInitialized$g(_this), "priority", 90);
    _defineProperty$g(_assertThisInitialized$g(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass$g(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);
function _typeof$g(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$g = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$g = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$g(obj);
}
function _classCallCheck$f(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$f(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$f(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$f(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$f(Constructor, staticProps);
  return Constructor;
}
function _inherits$f(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$f(subClass, superClass);
}
function _setPrototypeOf$f(o, p) {
  _setPrototypeOf$f = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$f(o, p);
}
function _createSuper$f(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$f(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$f(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$f(this, result);
  };
}
function _possibleConstructorReturn$f(self2, call) {
  if (call && (_typeof$g(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$f(self2);
}
function _assertThisInitialized$f(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$f() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$f(o) {
  _getPrototypeOf$f = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$f(o);
}
function _defineProperty$f(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits$f(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper$f(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck$f(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$f(_assertThisInitialized$f(_this), "priority", 90);
    _defineProperty$f(_assertThisInitialized$f(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass$f(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
function _typeof$f(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$f = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$f = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$f(obj);
}
function _classCallCheck$e(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$e(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$e(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$e(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$e(Constructor, staticProps);
  return Constructor;
}
function _inherits$e(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$e(subClass, superClass);
}
function _setPrototypeOf$e(o, p) {
  _setPrototypeOf$e = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$e(o, p);
}
function _createSuper$e(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$e(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$e(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$e(this, result);
  };
}
function _possibleConstructorReturn$e(self2, call) {
  if (call && (_typeof$f(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$e(self2);
}
function _assertThisInitialized$e(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$e() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$e(o) {
  _getPrototypeOf$e = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$e(o);
}
function _defineProperty$e(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISODayParser = /* @__PURE__ */ function(_Parser) {
  _inherits$e(ISODayParser2, _Parser);
  var _super = _createSuper$e(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck$e(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$e(_assertThisInitialized$e(_this), "priority", 90);
    _defineProperty$e(_assertThisInitialized$e(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass$e(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);
function _typeof$e(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$e = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$e = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$e(obj);
}
function _classCallCheck$d(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$d(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$d(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$d(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$d(Constructor, staticProps);
  return Constructor;
}
function _inherits$d(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$d(subClass, superClass);
}
function _setPrototypeOf$d(o, p) {
  _setPrototypeOf$d = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$d(o, p);
}
function _createSuper$d(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$d(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$d(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$d(this, result);
  };
}
function _possibleConstructorReturn$d(self2, call) {
  if (call && (_typeof$e(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$d(self2);
}
function _assertThisInitialized$d(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$d() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$d(o) {
  _getPrototypeOf$d = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$d(o);
}
function _defineProperty$d(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var AMPMParser = /* @__PURE__ */ function(_Parser) {
  _inherits$d(AMPMParser2, _Parser);
  var _super = _createSuper$d(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck$d(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$d(_assertThisInitialized$d(_this), "priority", 80);
    _defineProperty$d(_assertThisInitialized$d(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass$d(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);
function _typeof$d(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$d = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$d = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$d(obj);
}
function _classCallCheck$c(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$c(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$c(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$c(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$c(Constructor, staticProps);
  return Constructor;
}
function _inherits$c(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$c(subClass, superClass);
}
function _setPrototypeOf$c(o, p) {
  _setPrototypeOf$c = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$c(o, p);
}
function _createSuper$c(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$c(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$c(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$c(this, result);
  };
}
function _possibleConstructorReturn$c(self2, call) {
  if (call && (_typeof$d(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$c(self2);
}
function _assertThisInitialized$c(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$c() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$c(o) {
  _getPrototypeOf$c = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$c(o);
}
function _defineProperty$c(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
  _inherits$c(AMPMMidnightParser2, _Parser);
  var _super = _createSuper$c(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck$c(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$c(_assertThisInitialized$c(_this), "priority", 80);
    _defineProperty$c(_assertThisInitialized$c(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass$c(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);
function _typeof$c(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$c = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$c = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$c(obj);
}
function _classCallCheck$b(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$b(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$b(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$b(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$b(Constructor, staticProps);
  return Constructor;
}
function _inherits$b(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$b(subClass, superClass);
}
function _setPrototypeOf$b(o, p) {
  _setPrototypeOf$b = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$b(o, p);
}
function _createSuper$b(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$b(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$b(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$b(this, result);
  };
}
function _possibleConstructorReturn$b(self2, call) {
  if (call && (_typeof$c(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$b(self2);
}
function _assertThisInitialized$b(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$b() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$b(o) {
  _getPrototypeOf$b = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$b(o);
}
function _defineProperty$b(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
  _inherits$b(DayPeriodParser2, _Parser);
  var _super = _createSuper$b(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck$b(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$b(_assertThisInitialized$b(_this), "priority", 80);
    _defineProperty$b(_assertThisInitialized$b(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass$b(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);
function _typeof$b(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$b = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$b = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$b(obj);
}
function _classCallCheck$a(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$a(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$a(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$a(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$a(Constructor, staticProps);
  return Constructor;
}
function _inherits$a(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$a(subClass, superClass);
}
function _setPrototypeOf$a(o, p) {
  _setPrototypeOf$a = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$a(o, p);
}
function _createSuper$a(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$a(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$a(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$a(this, result);
  };
}
function _possibleConstructorReturn$a(self2, call) {
  if (call && (_typeof$b(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$a(self2);
}
function _assertThisInitialized$a(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$a() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$a(o) {
  _getPrototypeOf$a = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$a(o);
}
function _defineProperty$a(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
  _inherits$a(Hour1to12Parser2, _Parser);
  var _super = _createSuper$a(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck$a(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$a(_assertThisInitialized$a(_this), "priority", 70);
    _defineProperty$a(_assertThisInitialized$a(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass$a(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);
function _typeof$a(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$a = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$a = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$a(obj);
}
function _classCallCheck$9(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$9(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$9(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$9(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$9(Constructor, staticProps);
  return Constructor;
}
function _inherits$9(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$9(subClass, superClass);
}
function _setPrototypeOf$9(o, p) {
  _setPrototypeOf$9 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$9(o, p);
}
function _createSuper$9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$9(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$9(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$9(this, result);
  };
}
function _possibleConstructorReturn$9(self2, call) {
  if (call && (_typeof$a(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$9(self2);
}
function _assertThisInitialized$9(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$9() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$9(o) {
  _getPrototypeOf$9 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$9(o);
}
function _defineProperty$9(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
  _inherits$9(Hour0to23Parser2, _Parser);
  var _super = _createSuper$9(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck$9(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$9(_assertThisInitialized$9(_this), "priority", 70);
    _defineProperty$9(_assertThisInitialized$9(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass$9(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);
function _typeof$9(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$9 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$9 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$9(obj);
}
function _classCallCheck$8(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$8(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$8(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$8(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$8(Constructor, staticProps);
  return Constructor;
}
function _inherits$8(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$8(subClass, superClass);
}
function _setPrototypeOf$8(o, p) {
  _setPrototypeOf$8 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$8(o, p);
}
function _createSuper$8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$8(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$8(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$8(this, result);
  };
}
function _possibleConstructorReturn$8(self2, call) {
  if (call && (_typeof$9(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$8(self2);
}
function _assertThisInitialized$8(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$8() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$8(o) {
  _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$8(o);
}
function _defineProperty$8(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
  _inherits$8(Hour0To11Parser2, _Parser);
  var _super = _createSuper$8(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck$8(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$8(_assertThisInitialized$8(_this), "priority", 70);
    _defineProperty$8(_assertThisInitialized$8(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass$8(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);
function _typeof$8(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$8 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$8 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$8(obj);
}
function _classCallCheck$7(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$7(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$7(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$7(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$7(Constructor, staticProps);
  return Constructor;
}
function _inherits$7(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$7(subClass, superClass);
}
function _setPrototypeOf$7(o, p) {
  _setPrototypeOf$7 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$7(o, p);
}
function _createSuper$7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$7(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$7(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$7(this, result);
  };
}
function _possibleConstructorReturn$7(self2, call) {
  if (call && (_typeof$8(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$7(self2);
}
function _assertThisInitialized$7(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$7() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$7(o) {
  _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$7(o);
}
function _defineProperty$7(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
  _inherits$7(Hour1To24Parser2, _Parser);
  var _super = _createSuper$7(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck$7(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$7(_assertThisInitialized$7(_this), "priority", 70);
    _defineProperty$7(_assertThisInitialized$7(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass$7(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);
function _typeof$7(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$7 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$7 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$7(obj);
}
function _classCallCheck$6(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$6(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$6(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$6(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$6(Constructor, staticProps);
  return Constructor;
}
function _inherits$6(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$6(subClass, superClass);
}
function _setPrototypeOf$6(o, p) {
  _setPrototypeOf$6 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$6(o, p);
}
function _createSuper$6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$6(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$6(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$6(this, result);
  };
}
function _possibleConstructorReturn$6(self2, call) {
  if (call && (_typeof$7(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$6(self2);
}
function _assertThisInitialized$6(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$6() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$6(o) {
  _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$6(o);
}
function _defineProperty$6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var MinuteParser = /* @__PURE__ */ function(_Parser) {
  _inherits$6(MinuteParser2, _Parser);
  var _super = _createSuper$6(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck$6(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$6(_assertThisInitialized$6(_this), "priority", 60);
    _defineProperty$6(_assertThisInitialized$6(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass$6(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);
function _typeof$6(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$6 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$6 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$6(obj);
}
function _classCallCheck$5(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$5(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$5(Constructor, staticProps);
  return Constructor;
}
function _inherits$5(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$5(subClass, superClass);
}
function _setPrototypeOf$5(o, p) {
  _setPrototypeOf$5 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$5(o, p);
}
function _createSuper$5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$5(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$5(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$5(this, result);
  };
}
function _possibleConstructorReturn$5(self2, call) {
  if (call && (_typeof$6(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$5(self2);
}
function _assertThisInitialized$5(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$5(o) {
  _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$5(o);
}
function _defineProperty$5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var SecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits$5(SecondParser2, _Parser);
  var _super = _createSuper$5(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck$5(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$5(_assertThisInitialized$5(_this), "priority", 50);
    _defineProperty$5(_assertThisInitialized$5(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass$5(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);
function _typeof$5(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$5 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$5 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$5(obj);
}
function _classCallCheck$4(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$4(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$4(Constructor, staticProps);
  return Constructor;
}
function _inherits$4(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$4(subClass, superClass);
}
function _setPrototypeOf$4(o, p) {
  _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$4(o, p);
}
function _createSuper$4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$4(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$4(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$4(this, result);
  };
}
function _possibleConstructorReturn$4(self2, call) {
  if (call && (_typeof$5(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$4(self2);
}
function _assertThisInitialized$4(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$4(o) {
  _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$4(o);
}
function _defineProperty$4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits$4(FractionOfSecondParser2, _Parser);
  var _super = _createSuper$4(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck$4(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$4(_assertThisInitialized$4(_this), "priority", 30);
    _defineProperty$4(_assertThisInitialized$4(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass$4(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);
function _typeof$4(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$4 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$4 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$4(obj);
}
function _classCallCheck$3(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$3(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$3(Constructor, staticProps);
  return Constructor;
}
function _inherits$3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$3(subClass, superClass);
}
function _setPrototypeOf$3(o, p) {
  _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$3(o, p);
}
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$3(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$3(this, result);
  };
}
function _possibleConstructorReturn$3(self2, call) {
  if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$3(self2);
}
function _assertThisInitialized$3(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$3(o) {
  _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$3(o);
}
function _defineProperty$3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
  _inherits$3(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper$3(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck$3(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$3(_assertThisInitialized$3(_this), "priority", 10);
    _defineProperty$3(_assertThisInitialized$3(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass$3(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);
function _typeof$3(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$3 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$3 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$3(obj);
}
function _classCallCheck$2(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$2(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$2(Constructor, staticProps);
  return Constructor;
}
function _inherits$2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$2(subClass, superClass);
}
function _setPrototypeOf$2(o, p) {
  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$2(o, p);
}
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$2(this, result);
  };
}
function _possibleConstructorReturn$2(self2, call) {
  if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$2(self2);
}
function _assertThisInitialized$2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$2(o) {
  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$2(o);
}
function _defineProperty$2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
  _inherits$2(ISOTimezoneParser2, _Parser);
  var _super = _createSuper$2(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck$2(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$2(_assertThisInitialized$2(_this), "priority", 10);
    _defineProperty$2(_assertThisInitialized$2(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass$2(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);
function _typeof$2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$2 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$2 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$2(obj);
}
function _classCallCheck$1(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1(Constructor, staticProps);
  return Constructor;
}
function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf$1(subClass, superClass);
}
function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$1(o, p);
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$1(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$1(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$1(this, result);
  };
}
function _possibleConstructorReturn$1(self2, call) {
  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$1(self2);
}
function _assertThisInitialized$1(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$1(o);
}
function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits$1(TimestampSecondsParser2, _Parser);
  var _super = _createSuper$1(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck$1(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$1(_assertThisInitialized$1(_this), "priority", 40);
    _defineProperty$1(_assertThisInitialized$1(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass$1(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$1 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$1(obj);
}
function _classCallCheck(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i2 >= o.length)
          return { done: true };
        return { done: false, value: o[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s3() {
    it = o[Symbol.iterator]();
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : enUS;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters$1) {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a3, b2) {
    return b2 - a3;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a3, b2) {
      return b2.subPriority - a3.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
function isToday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, Date.now());
}
function isTomorrow(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, addDays(Date.now(), 1));
}
function isWithinInterval(dirtyDate, interval) {
  requiredArgs(2, arguments);
  var time = toDate(dirtyDate).getTime();
  var startTime = toDate(interval.start).getTime();
  var endTime = toDate(interval.end).getTime();
  if (!(startTime <= endTime)) {
    throw new RangeError("Invalid interval");
  }
  return time >= startTime && time <= endTime;
}
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}
function isYesterday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, subDays(Date.now(), 1));
}
function startOfYesterday() {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth();
  var day = now.getDate();
  var date = new Date(0);
  date.setFullYear(year, month, day - 1);
  date.setHours(0, 0, 0, 0);
  return date;
}
class Task {
  constructor(id, title, due_date, complete = false, project, scheduled_date, completed_date, created_date, effort) {
    this.title = title;
    this.due_date = due_date;
    this.complete = complete;
    this.project = project;
    this.scheduled_date = scheduled_date;
    this.completed_date = completed_date;
    this.created_date = created_date;
    this.effort = effort;
    if (id) {
      this.id = id;
    } else {
      this.id = this.createId();
    }
  }
  isOverdue() {
    if (!this.due_date) {
      return false;
    }
    return startOfDay(new Date()) > this.due_date;
  }
  filename() {
    return `task-${this.id}`;
  }
  filepath() {
    return `tasks/${this.id}.md`;
  }
  static fromFileContent(fileContent) {
    var _a;
    const FRONTMATTER_REGEX = /^\n*---[^\n]*\n+(?<fm>.+?)\n+---.*/s;
    const result = fileContent.match(FRONTMATTER_REGEX);
    const yamlString = ((_a = result == null ? void 0 : result.groups) == null ? void 0 : _a.fm) || "";
    const params = obsidian.parseYaml(yamlString);
    const restOfFile = fileContent.split("---")[2].trim();
    const title = restOfFile.split("\n").find((row) => row.trim() !== "", "Untitled Task") || "Untitled Task";
    return new Task(
      params.id,
      title,
      params.due_date && parse(params.due_date, "yyyy-MM-dd", new Date()),
      params.complete ? true : false,
      params.project,
      params.scheduled_date && parse(params.scheduled_date, "yyyy-MM-dd", new Date()),
      params.completed_date && parse(params.completed_date, "yyyy-MM-dd", new Date()),
      params.created_date && parse(params.created_date, "yyyy-MM-dd", new Date()),
      params.effort
    );
  }
  toFileContent() {
    const frontMatter = [];
    if (this.due_date) {
      frontMatter.push(`due_date: '${format$1(this.due_date, "yyyy-MM-dd")}'`);
    }
    if (this.scheduled_date) {
      frontMatter.push(`scheduled_date: '${format$1(this.scheduled_date, "yyyy-MM-dd")}'`);
    }
    if (this.completed_date) {
      frontMatter.push(`completed_date: '${format$1(this.completed_date, "yyyy-MM-dd")}'`);
    }
    if (this.created_date) {
      frontMatter.push(`created_date: '${format$1(this.created_date, "yyyy-MM-dd")}'`);
    }
    frontMatter.push(`id: '${this.id}'`);
    frontMatter.push(`complete: ${this.complete.toString()}`);
    if (this.effort) {
      frontMatter.push(`effort: ${this.effort}`);
    }
    if (this.project) {
      frontMatter.push(`project: ${this.project}`);
    }
    const contents = [];
    if (frontMatter.length > 0) {
      contents.push("---");
      contents.push(...frontMatter);
      contents.push("---");
      contents.push("");
    }
    contents.push(this.title);
    contents.push("---");
    return contents.join("\n");
  }
  createId() {
    let result = "task-";
    const characters = "abcdefghijklmnopqrstuvwxyz0123456789";
    const charactersLength = characters.length;
    for (let i2 = 0; i2 < 4; i2++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }
}
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getNodeName(element2) {
  return element2 ? (element2.nodeName || "").toLowerCase() : null;
}
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element2 = state.elements[name];
    if (!isHTMLElement(element2) || !getNodeName(element2)) {
      return;
    }
    Object.assign(element2.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element2.removeAttribute(name2);
      } else {
        element2.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element2 = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element2) || !getNodeName(element2)) {
        return;
      }
      Object.assign(element2.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element2.removeAttribute(attribute);
      });
    });
  };
}
const applyStyles$1 = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect$2,
  requires: ["computeStyles"]
};
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function getBoundingClientRect(element2, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element2.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element2)) {
    scaleX = element2.offsetWidth > 0 ? round(clientRect.width) / element2.offsetWidth || 1 : 1;
    scaleY = element2.offsetHeight > 0 ? round(clientRect.height) / element2.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element2) ? getWindow(element2) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x2 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y3 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y3,
    right: x2 + width,
    bottom: y3 + height,
    left: x2,
    x: x2,
    y: y3
  };
}
function getLayoutRect(element2) {
  var clientRect = getBoundingClientRect(element2);
  var width = element2.offsetWidth;
  var height = element2.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element2.offsetLeft,
    y: element2.offsetTop,
    width,
    height
  };
}
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getComputedStyle(element2) {
  return getWindow(element2).getComputedStyle(element2);
}
function isTableElement(element2) {
  return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
}
function getDocumentElement(element2) {
  return ((isElement(element2) ? element2.ownerDocument : element2.document) || window.document).documentElement;
}
function getParentNode(element2) {
  if (getNodeName(element2) === "html") {
    return element2;
  }
  return element2.assignedSlot || element2.parentNode || (isShadowRoot(element2) ? element2.host : null) || getDocumentElement(element2);
}
function getTrueOffsetParent(element2) {
  if (!isHTMLElement(element2) || getComputedStyle(element2).position === "fixed") {
    return null;
  }
  return element2.offsetParent;
}
function getContainingBlock(element2) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element2)) {
    var elementCss = getComputedStyle(element2);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element2);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element2) {
  var window2 = getWindow(element2);
  var offsetParent = getTrueOffsetParent(element2);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element2) || window2;
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$1(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (process.env.NODE_ENV !== "production") {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (process.env.NODE_ENV !== "production") {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
const arrow$1 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect$1,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function getVariation(placement) {
  return placement.split("-")[1];
}
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x2 = _ref.x, y3 = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x2 * dpr) / dpr || 0,
    y: round(y3 * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x2 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y3 = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x: x2,
    y: y3
  }) : {
    x: x2,
    y: y3
  };
  x2 = _ref3.x;
  y3 = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y3 -= offsetY - popperRect.height;
      y3 *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x2 -= offsetX - popperRect.width;
      x2 *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x2,
    y: y3
  }) : {
    x: x2,
    y: y3
  };
  x2 = _ref4.x;
  y3 = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y3 + "px)" : "translate3d(" + x2 + "px, " + y3 + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y3 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (process.env.NODE_ENV !== "production") {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
const computeStyles$1 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var passive = {
  passive: true
};
function effect(_ref) {
  var state = _ref.state, instance2 = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance2.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance2.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance2.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance2.update, passive);
    }
  };
}
const eventListeners = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect,
  data: {}
};
var hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash[matched];
  });
}
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
}
function getViewportRect(element2, strategy) {
  var win = getWindow(element2);
  var html = getDocumentElement(element2);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x2 = 0;
  var y3 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y3 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2 + getWindowScrollBarX(element2),
    y: y3
  };
}
function getDocumentRect(element2) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element2);
  var winScroll = getWindowScroll(element2);
  var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x2 = -winScroll.scrollLeft + getWindowScrollBarX(element2);
  var y3 = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x2 += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y3
  };
}
function isScrollParent(element2) {
  var _getComputedStyle = getComputedStyle(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
function listScrollParents(element2, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element2);
  var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element2, strategy) {
  var rect = getBoundingClientRect(element2, false, strategy === "fixed");
  rect.top = rect.top + element2.clientTop;
  rect.left = rect.left + element2.clientLeft;
  rect.bottom = rect.top + element2.clientHeight;
  rect.right = rect.left + element2.clientWidth;
  rect.width = element2.clientWidth;
  rect.height = element2.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element2, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element2, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
}
function getClippingParents(element2) {
  var clippingParents2 = listScrollParents(getParentNode(element2));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element2).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element2, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element2, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element2, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element2.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element2.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element2[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element2[len] / 2);
        break;
    }
  }
  return offsets;
}
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element2 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
    if (process.env.NODE_ENV !== "production") {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a3, b2) {
    return overflows[a3] - overflows[b2];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i2 = 0; i2 < placements2.length; i2++) {
    var placement = placements2[i2];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
const flip$1 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
const hide$1 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x2 = _data$state$placement.x, y3 = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x2;
    state.modifiersData.popperOffsets.y += y3;
  }
  state.modifiersData[name] = data;
}
const offset$1 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
const popperOffsets$1 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min$1 = offset2 + overflow[mainSide];
    var max$1 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset2, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
const preventOverflow$1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
function getHTMLElementScroll(element2) {
  return {
    scrollLeft: element2.scrollLeft,
    scrollTop: element2.scrollTop
  };
}
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
function isElementScaled(element2) {
  var rect = element2.getBoundingClientRect();
  var scaleX = round(rect.width) / element2.offsetWidth || 1;
  var scaleY = round(rect.height) / element2.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c2) {
    return p.replace(/%s/, c2);
  }, str);
}
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
      return self2.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s3) {
            return '"' + s3 + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element2) {
    return !(element2 && typeof element2.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions2;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance2 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions2, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m3) {
          return m3.enabled;
        });
        if (process.env.NODE_ENV !== "production") {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance2.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (process.env.NODE_ENV !== "production") {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (process.env.NODE_ENV !== "production") {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance: instance2
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance2.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (process.env.NODE_ENV !== "production") {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance2;
    }
    instance2.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
        if (typeof effect2 === "function") {
          var cleanupFn = effect2({
            state,
            name,
            instance: instance2,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance2;
  };
}
var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});
function create_fragment$c(ctx) {
  let div;
  let portal_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[2].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[1], null);
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      div.hidden = true;
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = action_destroyer(portal_action = portal.call(null, div, ctx[0]));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 2)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[1],
            !current ? get_all_dirty_from_scope(ctx2[1]) : get_slot_changes(default_slot_template, ctx2[1], dirty, null),
            null
          );
        }
      }
      if (portal_action && is_function(portal_action.update) && dirty & 1)
        portal_action.update.call(null, ctx2[0]);
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function portal(el, target = "body") {
  let targetEl;
  async function update2(newTarget) {
    target = newTarget;
    if (typeof target === "string") {
      targetEl = document.querySelector(target);
      if (targetEl === null) {
        await tick();
        targetEl = document.querySelector(target);
      }
      if (targetEl === null) {
        throw new Error(`No element found matching css selector: "${target}"`);
      }
    } else if (target instanceof HTMLElement) {
      targetEl = target;
    } else {
      throw new TypeError(`Unknown portal target type: ${target === null ? "null" : typeof target}. Allowed types: string (CSS selector) or HTMLElement.`);
    }
    targetEl.appendChild(el);
    el.hidden = false;
  }
  function destroy() {
    if (el.parentNode) {
      el.parentNode.removeChild(el);
    }
  }
  update2(target);
  return { update: update2, destroy };
}
function instance$c($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { target = "body" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("target" in $$props2)
      $$invalidate(0, target = $$props2.target);
    if ("$$scope" in $$props2)
      $$invalidate(1, $$scope = $$props2.$$scope);
  };
  return [target, $$scope, slots];
}
class Portal extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$c, create_fragment$c, safe_not_equal, { target: 0 });
  }
}
function useClickOutside(element2, { onClickOutside, anchorEl, open }) {
  function onClick(event) {
    if (open && !anchorEl.contains(event.target) && !element2.contains(event.target)) {
      onClickOutside();
    }
  }
  document.body.addEventListener("click", onClick);
  return {
    update(props) {
      onClickOutside = props.onClickOutside;
    },
    destroy() {
      document.body.removeEventListener("click", onClick);
    }
  };
}
const Popover_svelte_svelte_type_style_lang = "";
function create_if_block$7(ctx) {
  let portal2;
  let current;
  portal2 = new Portal({
    props: {
      target: document.body,
      $$slots: { default: [create_default_slot$4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(portal2.$$.fragment);
    },
    m(target, anchor) {
      mount_component(portal2, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const portal_changes = {};
      if (dirty & 527) {
        portal_changes.$$scope = { dirty, ctx: ctx2 };
      }
      portal2.$set(portal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(portal2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(portal2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(portal2, detaching);
    }
  };
}
function create_default_slot$4(ctx) {
  let div;
  let div_class_value;
  let useClickOutside_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[6].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[9], null);
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", div_class_value = null_to_empty(ctx[2]) + " svelte-1xg3ic1");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[7](div);
      current = true;
      if (!mounted) {
        dispose = action_destroyer(useClickOutside_action = useClickOutside.call(null, div, {
          open: ctx[0],
          anchorEl: ctx[1],
          onClickOutside: ctx[8]
        }));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[9],
            !current ? get_all_dirty_from_scope(ctx2[9]) : get_slot_changes(default_slot_template, ctx2[9], dirty, null),
            null
          );
        }
      }
      if (!current || dirty & 4 && div_class_value !== (div_class_value = null_to_empty(ctx2[2]) + " svelte-1xg3ic1")) {
        attr(div, "class", div_class_value);
      }
      if (useClickOutside_action && is_function(useClickOutside_action.update) && dirty & 3)
        useClickOutside_action.update.call(null, {
          open: ctx2[0],
          anchorEl: ctx2[1],
          onClickOutside: ctx2[8]
        });
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (default_slot)
        default_slot.d(detaching);
      ctx[7](null);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$b(ctx) {
  let if_block_anchor;
  let current;
  let if_block = ctx[0] && create_if_block$7(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$7(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance$b($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { anchorEl } = $$props;
  let { open } = $$props;
  let { className = "popover layer" } = $$props;
  let { onClose = () => {
  } } = $$props;
  let { placement = "bottom-start" } = $$props;
  let popperEl;
  let popper2 = null;
  const params = {
    placement,
    modifiers: [
      {
        name: "offset",
        options: { offset: [0, 4] }
      }
    ]
  };
  onDestroy(() => {
    if (popper2) {
      popper2.destroy();
    }
  });
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      popperEl = $$value;
      $$invalidate(3, popperEl);
    });
  }
  const useClickOutside_function = () => $$invalidate(0, open = false);
  $$self.$$set = ($$props2) => {
    if ("anchorEl" in $$props2)
      $$invalidate(1, anchorEl = $$props2.anchorEl);
    if ("open" in $$props2)
      $$invalidate(0, open = $$props2.open);
    if ("className" in $$props2)
      $$invalidate(2, className = $$props2.className);
    if ("onClose" in $$props2)
      $$invalidate(4, onClose = $$props2.onClose);
    if ("placement" in $$props2)
      $$invalidate(5, placement = $$props2.placement);
    if ("$$scope" in $$props2)
      $$invalidate(9, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 10) {
      {
        if (anchorEl && popperEl) {
          popper2 = createPopper(anchorEl, popperEl, params);
        }
      }
    }
    if ($$self.$$.dirty & 17) {
      if (!open) {
        onClose();
      }
    }
  };
  return [
    open,
    anchorEl,
    className,
    popperEl,
    onClose,
    placement,
    slots,
    div_binding,
    useClickOutside_function,
    $$scope
  ];
}
class Popover extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$b, create_fragment$b, safe_not_equal, {
      anchorEl: 1,
      open: 0,
      className: 2,
      onClose: 4,
      placement: 5
    });
  }
}
function create_default_slot$3(ctx) {
  let current;
  const default_slot_template = ctx[4].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[5], null);
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[5],
            !current ? get_all_dirty_from_scope(ctx2[5]) : get_slot_changes(default_slot_template, ctx2[5], dirty, null),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment$a(ctx) {
  let popover;
  let current;
  popover = new Popover({
    props: {
      anchorEl: ctx[0],
      open: ctx[1],
      placement: ctx[3],
      className: "menu",
      onClose: ctx[2],
      $$slots: { default: [create_default_slot$3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(popover.$$.fragment);
    },
    m(target, anchor) {
      mount_component(popover, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const popover_changes = {};
      if (dirty & 1)
        popover_changes.anchorEl = ctx2[0];
      if (dirty & 2)
        popover_changes.open = ctx2[1];
      if (dirty & 8)
        popover_changes.placement = ctx2[3];
      if (dirty & 4)
        popover_changes.onClose = ctx2[2];
      if (dirty & 32) {
        popover_changes.$$scope = { dirty, ctx: ctx2 };
      }
      popover.$set(popover_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(popover.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(popover.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(popover, detaching);
    }
  };
}
function instance$a($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { anchorEl } = $$props;
  let { open } = $$props;
  let { onClose = () => {
  } } = $$props;
  let { placement = "bottom-start" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("anchorEl" in $$props2)
      $$invalidate(0, anchorEl = $$props2.anchorEl);
    if ("open" in $$props2)
      $$invalidate(1, open = $$props2.open);
    if ("onClose" in $$props2)
      $$invalidate(2, onClose = $$props2.onClose);
    if ("placement" in $$props2)
      $$invalidate(3, placement = $$props2.placement);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  return [anchorEl, open, onClose, placement, slots, $$scope];
}
class Menu extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$a, create_fragment$a, safe_not_equal, {
      anchorEl: 0,
      open: 1,
      onClose: 2,
      placement: 3
    });
  }
}
const Switch_svelte_svelte_type_style_lang = "";
function create_fragment$9(ctx) {
  let div;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<input type="checkbox"/>`;
      attr(div, "class", "checkbox-container svelte-1i6m2hn");
      toggle_class(div, "disabled", ctx[1]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      ctx[4](div);
      if (!mounted) {
        dispose = [
          listen(div, "click", ctx[5]),
          listen(div, "keypress", ctx[3])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 2) {
        toggle_class(div, "disabled", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      ctx[4](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  let { checked } = $$props;
  let { disabled = false } = $$props;
  let ref;
  const dispatch = createEventDispatcher();
  function keypress_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(2, ref);
    });
  }
  const click_handler = () => {
    if (!disabled) {
      $$invalidate(0, checked = !checked);
    }
  };
  $$self.$$set = ($$props2) => {
    if ("checked" in $$props2)
      $$invalidate(0, checked = $$props2.checked);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      dispatch("check", checked);
    }
    if ($$self.$$.dirty & 5) {
      {
        if (ref) {
          if (checked) {
            ref.classList.add("is-enabled");
          } else {
            ref.classList.remove("is-enabled");
          }
        }
      }
    }
  };
  return [checked, disabled, ref, keypress_handler, div_binding, click_handler];
}
class Switch extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$9, create_fragment$9, safe_not_equal, { checked: 0, disabled: 1 });
  }
}
const Icon_svelte_svelte_type_style_lang = "";
const IconButton_svelte_svelte_type_style_lang = "";
function useIcon(node, name) {
  obsidian.setIcon(node, name);
  return {
    update(name2) {
      obsidian.setIcon(node, name2);
    }
  };
}
function create_if_block_1$3(ctx) {
  let switch_1;
  let current;
  switch_1 = new Switch({ props: { checked: ctx[0] } });
  switch_1.$on("check", ctx[6]);
  return {
    c() {
      create_component(switch_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(switch_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const switch_1_changes = {};
      if (dirty & 1)
        switch_1_changes.checked = ctx2[0];
      switch_1.$set(switch_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(switch_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(switch_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(switch_1, detaching);
    }
  };
}
function create_if_block$6(ctx) {
  let div;
  let useIcon_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "menu-item-icon");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(useIcon_action = useIcon.call(null, div, ctx[2]));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (useIcon_action && is_function(useIcon_action.update) && dirty & 4)
        useIcon_action.update.call(null, ctx2[2]);
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$8(ctx) {
  let div1;
  let t0;
  let t1;
  let div0;
  let t2;
  let current;
  let mounted;
  let dispose;
  let if_block0 = ctx[0] !== void 0 && create_if_block_1$3(ctx);
  let if_block1 = ctx[2] && create_if_block$6(ctx);
  return {
    c() {
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      div0 = element("div");
      t2 = text(ctx[1]);
      attr(div0, "class", "menu-item-title");
      attr(div1, "class", "menu-item");
      toggle_class(div1, "selected", ctx[3]);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      if (if_block0)
        if_block0.m(div1, null);
      append(div1, t0);
      if (if_block1)
        if_block1.m(div1, null);
      append(div1, t1);
      append(div1, div0);
      append(div0, t2);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div1, "mouseenter", ctx[7]),
          listen(div1, "mouseleave", ctx[8]),
          listen(div1, "click", ctx[4]),
          listen(div1, "keypress", ctx[5])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (ctx2[0] !== void 0) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & 1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$3(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (ctx2[2]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$6(ctx2);
          if_block1.c();
          if_block1.m(div1, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & 2)
        set_data(t2, ctx2[1]);
      if (dirty & 8) {
        toggle_class(div1, "selected", ctx2[3]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$8($$self, $$props, $$invalidate) {
  let { label } = $$props;
  let selected = false;
  let { icon = "" } = $$props;
  let { checked = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function keypress_handler(event) {
    bubble.call(this, $$self, event);
  }
  const check_handler = ({ detail: enabled }) => $$invalidate(0, checked = enabled);
  const mouseenter_handler = () => $$invalidate(3, selected = true);
  const mouseleave_handler = () => $$invalidate(3, selected = false);
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("icon" in $$props2)
      $$invalidate(2, icon = $$props2.icon);
    if ("checked" in $$props2)
      $$invalidate(0, checked = $$props2.checked);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      dispatch("check", checked);
    }
  };
  return [
    checked,
    label,
    icon,
    selected,
    click_handler,
    keypress_handler,
    check_handler,
    mouseenter_handler,
    mouseleave_handler
  ];
}
class MenuItem extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8, create_fragment$8, safe_not_equal, { label: 1, icon: 2, checked: 0 });
  }
}
const Input_svelte_svelte_type_style_lang = "";
const Button_svelte_svelte_type_style_lang = "";
const Card_svelte_svelte_type_style_lang = "";
const DateInput_svelte_svelte_type_style_lang = "";
const InternalLink_svelte_svelte_type_style_lang = "";
const SettingItem_svelte_svelte_type_style_lang = "";
const Tag_svelte_svelte_type_style_lang = "";
const TextArea_svelte_svelte_type_style_lang = "";
const Typography_svelte_svelte_type_style_lang = "";
const formatDateRelativeToNow = (date) => {
  if (isBefore(date, addDays(startOfYesterday(), -7)))
    return formatDistanceToNow(date, { locale: enUS, addSuffix: true });
  if (isWithinInterval(date, { start: addDays(startOfYesterday(), -7), end: startOfYesterday() }))
    return format$1(date, "'Last' eee");
  if (isYesterday(date))
    return "Yesterday";
  if (isToday(date))
    return "Today";
  if (isTomorrow(date))
    return "Tomorrow";
  if (isWithinInterval(date, { start: endOfTomorrow(), end: addDays(endOfToday(), 6) }))
    return format$1(date, "eeee");
  if (isWithinInterval(date, { start: addDays(endOfToday(), 6), end: addDays(endOfToday(), 10) }))
    return format$1(date, "'Next' eeee");
  if (isWithinInterval(date, { start: addDays(endOfToday(), 10), end: addYears(endOfToday(), 1) }))
    return format$1(date, "MMM dd");
  return format$1(date, "MM/dd/yy");
};
const DateChip_svelte_svelte_type_style_lang = "";
function get_each_context$4(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i2];
  return child_ctx;
}
function create_else_block$5(ctx) {
  let t2;
  return {
    c() {
      t2 = text("\xA0-\xA0");
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(t2);
    }
  };
}
function create_if_block$5(ctx) {
  let t_value = formatDateRelativeToNow(ctx[0]) + "";
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t_value !== (t_value = formatDateRelativeToNow(ctx2[0]) + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(t2);
    }
  };
}
function create_each_block$4(key_1, ctx) {
  let first;
  let menuitem;
  let current;
  function click_handler() {
    return ctx[14](ctx[20]);
  }
  menuitem = new MenuItem({ props: { label: ctx[20].label } });
  menuitem.$on("click", click_handler);
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(menuitem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(menuitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(menuitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(menuitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(first);
      destroy_component(menuitem, detaching);
    }
  };
}
function create_default_slot$2(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let t0;
  let menuitem0;
  let t1;
  let menuitem1;
  let current;
  let each_value = ctx[7];
  const get_key = (ctx2) => ctx2[20].label;
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$4(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$4(key, child_ctx));
  }
  menuitem0 = new MenuItem({ props: { label: "Other Date" } });
  menuitem0.$on("click", ctx[15]);
  menuitem1 = new MenuItem({ props: { label: "Remove" } });
  menuitem1.$on("click", ctx[16]);
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      t0 = space();
      create_component(menuitem0.$$.fragment);
      t1 = space();
      create_component(menuitem1.$$.fragment);
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].m(target, anchor);
      }
      insert(target, t0, anchor);
      mount_component(menuitem0, target, anchor);
      insert(target, t1, anchor);
      mount_component(menuitem1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 1154) {
        each_value = ctx2[7];
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, t0.parentNode, outro_and_destroy_block, create_each_block$4, t0, get_each_context$4);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      transition_in(menuitem0.$$.fragment, local);
      transition_in(menuitem1.$$.fragment, local);
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      transition_out(menuitem0.$$.fragment, local);
      transition_out(menuitem1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
      if (detaching)
        detach(t0);
      destroy_component(menuitem0, detaching);
      if (detaching)
        detach(t1);
      destroy_component(menuitem1, detaching);
    }
  };
}
function create_fragment$7(ctx) {
  let div1;
  let div0;
  let t0;
  let t1;
  let span;
  let t2;
  let input;
  let t3;
  let menu;
  let div1_class_value;
  let div1_style_value;
  let current;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (ctx2[0])
      return create_if_block$5;
    return create_else_block$5;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  menu = new Menu({
    props: {
      anchorEl: ctx[4],
      open: ctx[6],
      onClose: ctx[17],
      $$slots: { default: [create_default_slot$2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = text(ctx[2]);
      t1 = space();
      span = element("span");
      if_block.c();
      t2 = space();
      input = element("input");
      t3 = space();
      create_component(menu.$$.fragment);
      set_style(div0, "margin-right", "8px");
      attr(input, "type", "date");
      set_style(input, "visibility", "hidden");
      set_style(input, "min-width", "0");
      set_style(input, "max-width", "0");
      set_style(input, "padding", "0");
      set_style(input, "border", "0");
      attr(input, "min", format$1(new Date(), "yyyy-MM-dd"));
      attr(div1, "class", div1_class_value = null_to_empty(`chip-container ${ctx[3]}`) + " svelte-plqkdc");
      attr(div1, "style", div1_style_value = `color:${ctx[8](ctx[0])}`);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, t0);
      append(div1, t1);
      append(div1, span);
      if_block.m(span, null);
      append(div1, t2);
      append(div1, input);
      ctx[12](input);
      append(div1, t3);
      mount_component(menu, div1, null);
      ctx[18](div1);
      current = true;
      if (!mounted) {
        dispose = [
          listen(input, "change", ctx[13]),
          listen(div1, "click", ctx[19])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & 4)
        set_data(t0, ctx2[2]);
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(span, null);
        }
      }
      const menu_changes = {};
      if (dirty & 16)
        menu_changes.anchorEl = ctx2[4];
      if (dirty & 64)
        menu_changes.open = ctx2[6];
      if (dirty & 8388642) {
        menu_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menu.$set(menu_changes);
      if (!current || dirty & 8 && div1_class_value !== (div1_class_value = null_to_empty(`chip-container ${ctx2[3]}`) + " svelte-plqkdc")) {
        attr(div1, "class", div1_class_value);
      }
      if (!current || dirty & 1 && div1_style_value !== (div1_style_value = `color:${ctx2[8](ctx2[0])}`)) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(menu.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(menu.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if_block.d();
      ctx[12](null);
      destroy_component(menu);
      ctx[18](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$7($$self, $$props, $$invalidate) {
  let { date } = $$props;
  let { setDate } = $$props;
  let { emoji } = $$props;
  let { complete = false } = $$props;
  let { size = "small" } = $$props;
  let container;
  let datePickerInputEl;
  let open = false;
  let dateOptions = [
    { label: "Today", value: () => new Date() },
    {
      label: "Tomorrow",
      value: () => addDays(new Date(), 1)
    },
    {
      label: "+2 Days",
      value: () => addDays(new Date(), 2)
    },
    {
      label: "+3 Days",
      value: () => addDays(new Date(), 2)
    },
    {
      label: "+1 week",
      value: () => addDays(new Date(), 7)
    },
    {
      label: "+1 month",
      value: () => addDays(new Date(), 30)
    }
  ];
  const getColor2 = (dt) => {
    if (!dt)
      return "grey";
    if (complete)
      return "rgb(60,250,60)";
    if (startOfDay(new Date()) > dt)
      return "rgb(250,45,45)";
    if (isToday(dt))
      return "rgb(60,250,60)";
    if (isTomorrow(dt))
      return "rgb(30,250,250)";
    return "rgb(230,230,230)";
  };
  function openMenu() {
    $$invalidate(6, open = true);
  }
  function closeMenu() {
    $$invalidate(6, open = false);
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      datePickerInputEl = $$value;
      $$invalidate(5, datePickerInputEl);
    });
  }
  const change_handler = (e2) => {
    var _a;
    let tempDateStr = (_a = e2.currentTarget) == null ? void 0 : _a.value;
    let dt = tempDateStr ? parse(tempDateStr, "yyyy-MM-dd", new Date()) : void 0;
    setDate(dt);
    closeMenu();
  };
  const click_handler = (opt) => {
    setDate(opt.value());
    closeMenu();
  };
  const click_handler_1 = () => {
    datePickerInputEl.showPicker();
  };
  const click_handler_2 = () => {
    setDate(void 0);
    closeMenu();
  };
  const func = () => closeMenu();
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(4, container);
    });
  }
  const click_handler_3 = () => openMenu();
  $$self.$$set = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(0, date = $$props2.date);
    if ("setDate" in $$props2)
      $$invalidate(1, setDate = $$props2.setDate);
    if ("emoji" in $$props2)
      $$invalidate(2, emoji = $$props2.emoji);
    if ("complete" in $$props2)
      $$invalidate(11, complete = $$props2.complete);
    if ("size" in $$props2)
      $$invalidate(3, size = $$props2.size);
  };
  return [
    date,
    setDate,
    emoji,
    size,
    container,
    datePickerInputEl,
    open,
    dateOptions,
    getColor2,
    openMenu,
    closeMenu,
    complete,
    input_binding,
    change_handler,
    click_handler,
    click_handler_1,
    click_handler_2,
    func,
    div1_binding,
    click_handler_3
  ];
}
class DateChip extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$7, create_fragment$7, safe_not_equal, {
      date: 0,
      setDate: 1,
      emoji: 2,
      complete: 11,
      size: 3
    });
  }
}
const sortTasksByDate = (tasks, reverse = false) => {
  const ts = tasks.sort((a3, b2) => {
    const a_m = a3.completed_date || a3.scheduled_date || a3.due_date;
    const b_m = b2.completed_date || b2.scheduled_date || b2.due_date;
    if (a_m === b_m)
      return 0;
    if (a_m === void 0)
      return 1;
    if (b_m === void 0)
      return -1;
    return (a_m || new Date()).getTime() - (b_m || new Date()).getTime();
  });
  if (reverse)
    ts.reverse();
  return ts;
};
const allProjects = () => {
  return [
    { label: "\u{1F60A} Personal" },
    { label: "\u{1F4B0} Career" },
    { label: "\u2764\uFE0F Health" },
    { label: "\u26F7\uFE0F Fitness" },
    { label: "\u{1F3E0} Apartment" },
    { label: "\u{1F46B} Social" },
    { label: "\u{1F30A} Music" }
  ];
};
const allEfforts = () => {
  return [
    { icon: "10m", value: 10, label: "Up to 10 mins", autoSuggestTerm: "trivial" },
    { icon: "30m", value: 30, label: "Up to 30 mins", autoSuggestTerm: "easy" },
    { icon: "1h", value: 60, label: "Up to 1 hour", autoSuggestTerm: "medium" },
    { icon: "2h", value: 120, label: "Up to 2 hours", autoSuggestTerm: "hard" },
    { icon: "4h", value: 240, label: "Up to 4 hours", autoSuggestTerm: "vhard" },
    { icon: "?", value: void 0, label: "Remove", autoSuggestTerm: void 0 }
  ];
};
const LOE_Chip_svelte_svelte_type_style_lang = "";
function get_each_context$3(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i2];
  return child_ctx;
}
function create_else_block$4(ctx) {
  let em;
  return {
    c() {
      em = element("em");
      em.textContent = "LOE";
    },
    m(target, anchor) {
      insert(target, em, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(em);
    }
  };
}
function create_if_block$4(ctx) {
  let t_value = ctx[5].icon + "";
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 32 && t_value !== (t_value = ctx2[5].icon + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(t2);
    }
  };
}
function create_each_block$3(key_1, ctx) {
  let first;
  let menuitem;
  let current;
  function click_handler() {
    return ctx[10](ctx[14]);
  }
  menuitem = new MenuItem({ props: { label: ctx[14].label } });
  menuitem.$on("click", click_handler);
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(menuitem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(menuitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(menuitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(menuitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(first);
      destroy_component(menuitem, detaching);
    }
  };
}
function create_default_slot$1(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ctx[6];
  const get_key = (ctx2) => ctx2[14].label;
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$3(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$3(key, child_ctx));
  }
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 578) {
        each_value = ctx2[6];
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$3, each_1_anchor, get_each_context$3);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_fragment$6(ctx) {
  let div1;
  let div0;
  let t2;
  let menu;
  let div1_class_value;
  let div1_style_value;
  let current;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (ctx2[5])
      return create_if_block$4;
    return create_else_block$4;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  menu = new Menu({
    props: {
      anchorEl: ctx[3],
      open: ctx[4],
      onClose: ctx[11],
      $$slots: { default: [create_default_slot$1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if_block.c();
      t2 = space();
      create_component(menu.$$.fragment);
      set_style(div0, "font-weight", "bold");
      attr(div1, "class", div1_class_value = null_to_empty(`chip-container ${ctx[2]}`) + " svelte-b652in");
      attr(div1, "style", div1_style_value = `color:${ctx[7](ctx[0])}`);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if_block.m(div0, null);
      append(div1, t2);
      mount_component(menu, div1, null);
      ctx[12](div1);
      current = true;
      if (!mounted) {
        dispose = listen(div1, "click", ctx[13]);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div0, null);
        }
      }
      const menu_changes = {};
      if (dirty & 8)
        menu_changes.anchorEl = ctx2[3];
      if (dirty & 16)
        menu_changes.open = ctx2[4];
      if (dirty & 131074) {
        menu_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menu.$set(menu_changes);
      if (!current || dirty & 4 && div1_class_value !== (div1_class_value = null_to_empty(`chip-container ${ctx2[2]}`) + " svelte-b652in")) {
        attr(div1, "class", div1_class_value);
      }
      if (!current || dirty & 1 && div1_style_value !== (div1_style_value = `color:${ctx2[7](ctx2[0])}`)) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(menu.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(menu.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if_block.d();
      destroy_component(menu);
      ctx[12](null);
      mounted = false;
      dispose();
    }
  };
}
function instance$6($$self, $$props, $$invalidate) {
  let { effort } = $$props;
  let { setEffort } = $$props;
  let { size = "small" } = $$props;
  let container;
  let open = false;
  let options = allEfforts();
  let selectedOption = void 0;
  const getColor2 = (eff) => {
    if (eff === 10)
      return "rgb(60,250,60)";
    if (eff === 30)
      return "rgb(30,235,250)";
    if (eff === 60)
      return "rgb(255, 255, 20)";
    if (eff === 120)
      return "rgb(255,87,51)";
    if (eff === 240)
      return "rgb(255,20,255)";
    return "grey";
  };
  function openMenu() {
    $$invalidate(4, open = true);
  }
  function closeMenu() {
    $$invalidate(4, open = false);
  }
  const click_handler = (opt) => {
    setEffort(opt.value);
    closeMenu();
  };
  const func = () => closeMenu();
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(3, container);
    });
  }
  const click_handler_1 = () => openMenu();
  $$self.$$set = ($$props2) => {
    if ("effort" in $$props2)
      $$invalidate(0, effort = $$props2.effort);
    if ("setEffort" in $$props2)
      $$invalidate(1, setEffort = $$props2.setEffort);
    if ("size" in $$props2)
      $$invalidate(2, size = $$props2.size);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      {
        $$invalidate(5, selectedOption = effort ? options.find((opt) => opt.value === effort) : void 0);
      }
    }
  };
  return [
    effort,
    setEffort,
    size,
    container,
    open,
    selectedOption,
    options,
    getColor2,
    openMenu,
    closeMenu,
    click_handler,
    func,
    div1_binding,
    click_handler_1
  ];
}
class LOE_Chip extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6, create_fragment$6, safe_not_equal, { effort: 0, setEffort: 1, size: 2 });
  }
}
const ProjectSelector_svelte_svelte_type_style_lang = "";
function get_each_context$2(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i2];
  return child_ctx;
}
function create_else_block$3(ctx) {
  let em;
  return {
    c() {
      em = element("em");
      em.textContent = "Project";
    },
    m(target, anchor) {
      insert(target, em, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(em);
    }
  };
}
function create_if_block$3(ctx) {
  let t_value = ctx[5].label + "";
  let t2;
  return {
    c() {
      t2 = text(t_value);
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 32 && t_value !== (t_value = ctx2[5].label + ""))
        set_data(t2, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(t2);
    }
  };
}
function create_each_block$2(key_1, ctx) {
  let first;
  let menuitem;
  let current;
  function click_handler() {
    return ctx[9](ctx[13]);
  }
  menuitem = new MenuItem({ props: { label: ctx[13].label } });
  menuitem.$on("click", click_handler);
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(menuitem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(menuitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(menuitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(menuitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(first);
      destroy_component(menuitem, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ctx[6];
  const get_key = (ctx2) => ctx2[13].label;
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$2(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$2(key, child_ctx));
  }
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 322) {
        each_value = ctx2[6];
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$2, each_1_anchor, get_each_context$2);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d(detaching);
      }
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_fragment$5(ctx) {
  let div1;
  let div0;
  let t2;
  let menu;
  let div1_class_value;
  let div1_style_value;
  let current;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (ctx2[5])
      return create_if_block$3;
    return create_else_block$3;
  }
  let current_block_type = select_block_type(ctx);
  let if_block = current_block_type(ctx);
  menu = new Menu({
    props: {
      anchorEl: ctx[3],
      open: ctx[4],
      onClose: ctx[10],
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if_block.c();
      t2 = space();
      create_component(menu.$$.fragment);
      attr(div1, "class", div1_class_value = null_to_empty(`chip-container ${ctx[2]}`) + " svelte-b652in");
      attr(div1, "style", div1_style_value = `color:${getColor(ctx[0])}`);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if_block.m(div0, null);
      append(div1, t2);
      mount_component(menu, div1, null);
      ctx[11](div1);
      current = true;
      if (!mounted) {
        dispose = listen(div1, "click", ctx[12]);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div0, null);
        }
      }
      const menu_changes = {};
      if (dirty & 8)
        menu_changes.anchorEl = ctx2[3];
      if (dirty & 16)
        menu_changes.open = ctx2[4];
      if (dirty & 65538) {
        menu_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menu.$set(menu_changes);
      if (!current || dirty & 4 && div1_class_value !== (div1_class_value = null_to_empty(`chip-container ${ctx2[2]}`) + " svelte-b652in")) {
        attr(div1, "class", div1_class_value);
      }
      if (!current || dirty & 1 && div1_style_value !== (div1_style_value = `color:${getColor(ctx2[0])}`)) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(menu.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(menu.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if_block.d();
      destroy_component(menu);
      ctx[11](null);
      mounted = false;
      dispose();
    }
  };
}
function getColor(proj) {
  if (!proj)
    return "grey";
  return "white";
}
function instance$5($$self, $$props, $$invalidate) {
  let { project } = $$props;
  let { setProject } = $$props;
  let { size = "small" } = $$props;
  let container;
  let open = false;
  let options = allProjects();
  let selectedOption = void 0;
  function openMenu() {
    $$invalidate(4, open = true);
  }
  function closeMenu() {
    $$invalidate(4, open = false);
  }
  const click_handler = (opt) => {
    setProject(opt.label);
    closeMenu();
  };
  const func = () => closeMenu();
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(3, container);
    });
  }
  const click_handler_1 = () => openMenu();
  $$self.$$set = ($$props2) => {
    if ("project" in $$props2)
      $$invalidate(0, project = $$props2.project);
    if ("setProject" in $$props2)
      $$invalidate(1, setProject = $$props2.setProject);
    if ("size" in $$props2)
      $$invalidate(2, size = $$props2.size);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      {
        $$invalidate(5, selectedOption = project ? options.find((opt) => opt.label === project) : void 0);
      }
    }
  };
  return [
    project,
    setProject,
    size,
    container,
    open,
    selectedOption,
    options,
    openMenu,
    closeMenu,
    click_handler,
    func,
    div1_binding,
    click_handler_1
  ];
}
class ProjectSelector extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$5, safe_not_equal, { project: 0, setProject: 1, size: 2 });
  }
}
const CreateTask_svelte_svelte_type_style_lang = "";
function create_fragment$4(ctx) {
  let div1;
  let div0;
  let t0;
  let div4;
  let div2;
  let span;
  let t1;
  let t2;
  let div3;
  let datechip0;
  let t3;
  let datechip1;
  let t4;
  let loechip;
  let t5;
  let projectselector;
  let t6;
  let div5;
  let button;
  let current;
  let mounted;
  let dispose;
  datechip0 = new DateChip({
    props: {
      date: ctx[4],
      setDate: ctx[9],
      emoji: "\u{1F5D3}\uFE0F",
      size: "large"
    }
  });
  datechip1 = new DateChip({
    props: {
      date: ctx[3],
      setDate: ctx[8],
      emoji: "\u{1F552}",
      size: "large"
    }
  });
  loechip = new LOE_Chip({
    props: {
      effort: ctx[5],
      setEffort: ctx[10],
      size: "large"
    }
  });
  projectselector = new ProjectSelector({
    props: {
      project: ctx[6],
      setProject: ctx[11],
      size: "large"
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      div4 = element("div");
      div2 = element("div");
      span = element("span");
      t1 = text(ctx[2]);
      t2 = space();
      div3 = element("div");
      create_component(datechip0.$$.fragment);
      t3 = space();
      create_component(datechip1.$$.fragment);
      t4 = space();
      create_component(loechip.$$.fragment);
      t5 = space();
      create_component(projectselector.$$.fragment);
      t6 = space();
      div5 = element("div");
      button = element("button");
      button.textContent = "Save";
      attr(div0, "contenteditable", "true");
      attr(div0, "class", "task-input svelte-17ij7jk");
      if (ctx[0] === void 0)
        add_render_callback(() => ctx[16].call(div0));
      set_style(div1, "width", "100%");
      set_style(div3, "display", "flex");
      set_style(div3, "alignItems", "center");
      set_style(div3, "margin-top", "5px");
      set_style(div4, "width", "100%");
      set_style(div4, "margin-top", "10px");
      set_style(button, "width", "100%");
      set_style(button, "height", "40px");
      set_style(div5, "width", "100%");
      set_style(div5, "margin-top", "10px");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (ctx[0] !== void 0) {
        div0.innerHTML = ctx[0];
      }
      ctx[17](div0);
      insert(target, t0, anchor);
      insert(target, div4, anchor);
      append(div4, div2);
      append(div2, span);
      append(span, t1);
      append(div4, t2);
      append(div4, div3);
      mount_component(datechip0, div3, null);
      append(div3, t3);
      mount_component(datechip1, div3, null);
      append(div3, t4);
      mount_component(loechip, div3, null);
      append(div3, t5);
      mount_component(projectselector, div3, null);
      insert(target, t6, anchor);
      insert(target, div5, anchor);
      append(div5, button);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div0, "input", ctx[16]),
          listen(div0, "keypress", ctx[12]),
          listen(button, "click", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && ctx2[0] !== div0.innerHTML) {
        div0.innerHTML = ctx2[0];
      }
      if (!current || dirty & 4)
        set_data(t1, ctx2[2]);
      const datechip0_changes = {};
      if (dirty & 16)
        datechip0_changes.date = ctx2[4];
      datechip0.$set(datechip0_changes);
      const datechip1_changes = {};
      if (dirty & 8)
        datechip1_changes.date = ctx2[3];
      datechip1.$set(datechip1_changes);
      const loechip_changes = {};
      if (dirty & 32)
        loechip_changes.effort = ctx2[5];
      loechip.$set(loechip_changes);
      const projectselector_changes = {};
      if (dirty & 64)
        projectselector_changes.project = ctx2[6];
      projectselector.$set(projectselector_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(datechip0.$$.fragment, local);
      transition_in(datechip1.$$.fragment, local);
      transition_in(loechip.$$.fragment, local);
      transition_in(projectselector.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(datechip0.$$.fragment, local);
      transition_out(datechip1.$$.fragment, local);
      transition_out(loechip.$$.fragment, local);
      transition_out(projectselector.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      ctx[17](null);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div4);
      destroy_component(datechip0);
      destroy_component(datechip1);
      destroy_component(loechip);
      destroy_component(projectselector);
      if (detaching)
        detach(t6);
      if (detaching)
        detach(div5);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { close } = $$props;
  let { store } = $$props;
  let { app } = $$props;
  let inputText = "";
  let title = "";
  let due;
  let scheduled;
  let effort;
  let project;
  let inputEl;
  const save = () => {
    const newTask = new Task(void 0, title, due, false, project, scheduled, void 0, void 0, effort);
    store(newTask);
    close();
  };
  function onSetDueDate(dt) {
    $$invalidate(3, due = dt);
  }
  function onSetScheduledDate(dt) {
    $$invalidate(4, scheduled = dt);
  }
  function onSetEffort(eff) {
    $$invalidate(5, effort = eff);
  }
  function onSetProject(pj) {
    $$invalidate(6, project = pj);
  }
  function handleKeyPress(e2) {
    if (e2.key === "Enter") {
      save();
    }
  }
  function div0_input_handler() {
    inputText = this.innerHTML;
    $$invalidate(0, inputText);
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputEl = $$value;
      $$invalidate(1, inputEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("close" in $$props2)
      $$invalidate(13, close = $$props2.close);
    if ("store" in $$props2)
      $$invalidate(14, store = $$props2.store);
    if ("app" in $$props2)
      $$invalidate(15, app = $$props2.app);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 3) {
      {
        let text2 = inputEl ? inputEl.textContent || inputEl.innerText || "" : inputText;
        const parsedDates = distExports.parse(text2);
        if (parsedDates.length > 0) {
          const parsedDate = parsedDates[0].start.date();
          $$invalidate(3, due = parsedDate);
        }
        parsedDates.forEach((parsedDate) => {
          text2 = text2.replace(parsedDate.text, "");
        });
        const projects = allProjects();
        const tags = text2.split(" ").filter((term) => term.startsWith("#"));
        tags.map((tag) => {
          const matchingProject = projects.find((proj) => proj.label.toLowerCase().replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g, "").trim() === tag.toLowerCase().replace("#", "").trim());
          if (matchingProject) {
            $$invalidate(6, project = matchingProject.label);
            text2 = text2.replace(tag, "");
          }
        });
        text2.split(" ").map((term) => {
          const matchingEffort = allEfforts().find((t2) => {
            var _a;
            return ((_a = t2.autoSuggestTerm) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === term.toLowerCase().trim();
          });
          if (matchingEffort) {
            $$invalidate(5, effort = matchingEffort.value);
            text2 = text2.replace(term, "");
          }
        });
        $$invalidate(2, title = text2.trim());
      }
    }
  };
  return [
    inputText,
    inputEl,
    title,
    due,
    scheduled,
    effort,
    project,
    save,
    onSetDueDate,
    onSetScheduledDate,
    onSetEffort,
    onSetProject,
    handleKeyPress,
    close,
    store,
    app,
    div0_input_handler,
    div0_binding
  ];
}
class CreateTask extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, { close: 13, store: 14, app: 15 });
  }
}
class TaskModal extends obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.onOpen = () => {
      const { titleEl, contentEl } = this;
      titleEl.setText("Create New Task");
      new CreateTask({
        target: contentEl,
        props: {
          close: () => this.close(),
          store: this.onSave,
          app: this.app
        }
      });
    };
    this.onClose = () => {
      const { contentEl } = this;
      contentEl.empty();
    };
    this.onSave = (task) => {
      var _a;
      (_a = this.plugin.fileInterface) == null ? void 0 : _a.createUpdateTask(task);
      const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
      if (view) {
        const cursor = view.editor.getCursor();
        if (cursor.line) {
          view.editor.replaceRange(`\`\`\`taskr
id: ${task.id}
\`\`\`
`, cursor);
        }
      }
    };
    this.plugin = plugin;
  }
}
class FileInterface {
  constructor(plugin, app) {
    this.getAllTaskFiles = () => {
      const tasksDir = this.plugin.settings.TasksDir;
      const taskFiles = this.plugin.app.vault.getMarkdownFiles().filter((f) => f.parent.name === tasksDir);
      return taskFiles;
    };
    this.getTaskFromFile = async (f) => {
      const fileContent = await this.plugin.app.vault.cachedRead(f);
      return Task.fromFileContent(fileContent);
    };
    this.getAllTasks = async () => {
      const taskFiles = this.getAllTaskFiles();
      const tasks = [];
      for await (const tf of taskFiles) {
        const task = await this.getTaskFromFile(tf);
        tasks.push(task);
      }
      return tasks;
    };
    this.createUpdateTask = async (task) => {
      const tasksDir = this.plugin.settings.TasksDir;
      const fileName = `${tasksDir}/${task.id}.md`;
      if (!await this.app.vault.adapter.exists(tasksDir)) {
        await this.app.vault.createFolder(tasksDir);
      }
      const existingFile = await this.app.vault.getAbstractFileByPath(fileName);
      if (existingFile && existingFile instanceof obsidian.TFile) {
        let existingContent = await this.app.vault.read(existingFile);
        const content = task.toFileContent();
        existingContent = existingContent.slice(existingContent.split("---", 3).join("---").length + 3);
        existingContent = content + existingContent;
        await this.app.vault.modify(existingFile, existingContent);
      } else {
        task.created_date = new Date();
        const content = task.toFileContent();
        await this.app.vault.create(fileName, content);
      }
    };
    this.getTaskById = async (id) => {
      const allTasks = await this.getAllTasks();
      const matches = allTasks.filter((t2) => t2.id === id);
      return matches[0];
    };
    this.getTaskFileById = (id) => {
      const allTaskFiles = this.getAllTaskFiles();
      const matches = allTaskFiles.filter((t2) => t2.basename === id);
      return matches[0];
    };
    this.deleteTask = async (task) => {
      const fullPath = `${this.plugin.settings.TasksDir}/${task.id}.md`;
      const tf = this.plugin.app.vault.getAbstractFileByPath(fullPath);
      if (tf) {
        this.plugin.app.vault.delete(tf);
      }
    };
    this.plugin = plugin;
    this.app = app;
  }
}
const defaultSettings = {
  TasksDir: "tasks",
  DailyBandwidth: 2,
  PeopleDir: "people"
};
const settingsWithDefaults = (settings) => ({ ...defaultSettings, ...settings });
class SettingsTab extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "TASKR Settings" });
    new obsidian.Setting(containerEl).setName("Tasks Directory").setDesc("The vault directory in which to store task files").addText((text2) => {
      text2.setPlaceholder("$").setValue(this.plugin.settings.TasksDir);
      text2.inputEl.onblur = (e2) => {
        this.plugin.settings.TasksDir = e2.target.value;
        this.plugin.saveData(this.plugin.settings);
      };
    });
    new obsidian.Setting(containerEl).setName("People Directory").setDesc("The vault directory in which to store people (to link tasks to)").addText((text2) => {
      text2.setPlaceholder("$").setValue(this.plugin.settings.PeopleDir);
      text2.inputEl.onblur = (e2) => {
        this.plugin.settings.PeopleDir = e2.target.value;
        this.plugin.saveData(this.plugin.settings);
      };
    });
    new obsidian.Setting(containerEl).setName("Daily Bandwidth").setDesc("The amount of hours per day you can dedicate to tasks").addSlider((slider) => {
      slider.setLimits(1, 12, 1);
      slider.setValue(this.plugin.settings.DailyBandwidth);
      slider.setDynamicTooltip();
      slider.onChange((value) => {
        this.plugin.settings.DailyBandwidth = value;
        this.plugin.saveData(this.plugin.settings);
      });
    });
  }
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
const Checkbox_svelte_svelte_type_style_lang = "";
function create_fragment$3(ctx) {
  let div1;
  let div0;
  let input;
  let t2;
  let label;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      input = element("input");
      t2 = space();
      label = element("label");
      attr(input, "id", ctx[2]);
      attr(input, "type", "checkbox");
      input.checked = ctx[0];
      attr(input, "class", "svelte-1k1h27x");
      attr(label, "for", ctx[2]);
      attr(label, "class", "svelte-1k1h27x");
      attr(div0, "class", "round svelte-1k1h27x");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, input);
      append(div0, t2);
      append(div0, label);
      if (!mounted) {
        dispose = listen(input, "change", ctx[3]);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1) {
        input.checked = ctx2[0];
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      dispose();
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let { checked = false } = $$props;
  let { onChange } = $$props;
  let random = (Math.random() * 1e10).toString();
  const change_handler = () => onChange(!checked);
  $$self.$$set = ($$props2) => {
    if ("checked" in $$props2)
      $$invalidate(0, checked = $$props2.checked);
    if ("onChange" in $$props2)
      $$invalidate(1, onChange = $$props2.onChange);
  };
  return [checked, onChange, random, change_handler];
}
class Checkbox extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$3, create_fragment$3, safe_not_equal, { checked: 0, onChange: 1 });
  }
}
const TaskListItem_svelte_svelte_type_style_lang = "";
function create_else_block$2(ctx) {
  let datechip;
  let t2;
  let if_block_anchor;
  let current;
  datechip = new DateChip({
    props: {
      date: ctx[0].scheduled_date,
      setDate: ctx[5],
      emoji: "\u{1F5D3}\uFE0F"
    }
  });
  let if_block = !ctx[1] && create_if_block_1$2(ctx);
  return {
    c() {
      create_component(datechip.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(datechip, target, anchor);
      insert(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const datechip_changes = {};
      if (dirty & 1)
        datechip_changes.date = ctx2[0].scheduled_date;
      datechip.$set(datechip_changes);
      if (!ctx2[1]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(datechip.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(datechip.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(datechip, detaching);
      if (detaching)
        detach(t2);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block$2(ctx) {
  let datechip;
  let current;
  datechip = new DateChip({
    props: {
      date: ctx[0].completed_date,
      setDate: onSetCompletedDate,
      emoji: "\u2705",
      complete: ctx[0].complete
    }
  });
  return {
    c() {
      create_component(datechip.$$.fragment);
    },
    m(target, anchor) {
      mount_component(datechip, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const datechip_changes = {};
      if (dirty & 1)
        datechip_changes.date = ctx2[0].completed_date;
      if (dirty & 1)
        datechip_changes.complete = ctx2[0].complete;
      datechip.$set(datechip_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(datechip.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(datechip.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(datechip, detaching);
    }
  };
}
function create_if_block_1$2(ctx) {
  let datechip;
  let current;
  datechip = new DateChip({
    props: {
      date: ctx[0].due_date,
      setDate: ctx[4],
      emoji: "\u{1F552}"
    }
  });
  return {
    c() {
      create_component(datechip.$$.fragment);
    },
    m(target, anchor) {
      mount_component(datechip, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const datechip_changes = {};
      if (dirty & 1)
        datechip_changes.date = ctx2[0].due_date;
      datechip.$set(datechip_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(datechip.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(datechip.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(datechip, detaching);
    }
  };
}
function create_fragment$2(ctx) {
  let li;
  let div5;
  let div0;
  let checkbox;
  let t0;
  let div4;
  let div3;
  let div1;
  let div1_class_value;
  let t1;
  let div2;
  let current_block_type_index;
  let if_block;
  let t2;
  let loechip;
  let t3;
  let projectselector;
  let current;
  let mounted;
  let dispose;
  checkbox = new Checkbox({
    props: {
      checked: ctx[0].complete,
      onChange: ctx[10]
    }
  });
  const if_block_creators = [create_if_block$2, create_else_block$2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[0].completed_date)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  loechip = new LOE_Chip({
    props: {
      effort: ctx[0].effort,
      setEffort: ctx[7]
    }
  });
  projectselector = new ProjectSelector({
    props: {
      project: ctx[0].project,
      setProject: ctx[6]
    }
  });
  return {
    c() {
      li = element("li");
      div5 = element("div");
      div0 = element("div");
      create_component(checkbox.$$.fragment);
      t0 = space();
      div4 = element("div");
      div3 = element("div");
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      if_block.c();
      t2 = space();
      create_component(loechip.$$.fragment);
      t3 = space();
      create_component(projectselector.$$.fragment);
      set_style(div0, "margin-right", "12px");
      set_style(div0, "display", "flex");
      set_style(div0, "align-items", "center");
      attr(div1, "class", div1_class_value = null_to_empty(ctx[0].complete ? "containerLi completed" : "containerLi") + " svelte-es3auy");
      set_style(div1, "margin-right", "15px");
      set_style(div2, "display", "flex");
      set_style(div2, "align-items", "center");
      set_style(div3, "display", "flex");
      set_style(div3, "alignItems", "center");
      set_style(div3, "flex-wrap", "wrap");
      set_style(div4, "display", "block");
      set_style(div4, "flex-grow", "1");
      attr(div5, "class", "containerDiv svelte-es3auy");
      set_style(li, "margin-bottom", "5px");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, div5);
      append(div5, div0);
      mount_component(checkbox, div0, null);
      append(div5, t0);
      append(div5, div4);
      append(div4, div3);
      append(div3, div1);
      ctx[11](div1);
      append(div3, t1);
      append(div3, div2);
      if_blocks[current_block_type_index].m(div2, null);
      append(div2, t2);
      mount_component(loechip, div2, null);
      append(div2, t3);
      mount_component(projectselector, div2, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div1, "click", ctx[12]),
          listen(li, "contextmenu", onClickTaskContainer)
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const checkbox_changes = {};
      if (dirty & 1)
        checkbox_changes.checked = ctx2[0].complete;
      checkbox.$set(checkbox_changes);
      if (!current || dirty & 1 && div1_class_value !== (div1_class_value = null_to_empty(ctx2[0].complete ? "containerLi completed" : "containerLi") + " svelte-es3auy")) {
        attr(div1, "class", div1_class_value);
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div2, t2);
      }
      const loechip_changes = {};
      if (dirty & 1)
        loechip_changes.effort = ctx2[0].effort;
      loechip.$set(loechip_changes);
      const projectselector_changes = {};
      if (dirty & 1)
        projectselector_changes.project = ctx2[0].project;
      projectselector.$set(projectselector_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(checkbox.$$.fragment, local);
      transition_in(if_block);
      transition_in(loechip.$$.fragment, local);
      transition_in(projectselector.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(checkbox.$$.fragment, local);
      transition_out(if_block);
      transition_out(loechip.$$.fragment, local);
      transition_out(projectselector.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(li);
      destroy_component(checkbox);
      ctx[11](null);
      if_blocks[current_block_type_index].d();
      destroy_component(loechip);
      destroy_component(projectselector);
      mounted = false;
      run_all(dispose);
    }
  };
}
function onSetCompletedDate(dt) {
  return;
}
function onClickTaskContainer(evt) {
  evt.stopPropagation();
  evt.preventDefault();
}
function instance$2($$self, $$props, $$invalidate) {
  let { plugin } = $$props;
  let { task } = $$props;
  let { hideDueDate = false } = $$props;
  let taskContentEl;
  onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    yield renderMarkdown(task.title);
  }));
  function renderMarkdown(content) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      if (content.startsWith("#") || content.startsWith("-")) {
        content = `\\${content}`;
      }
      yield obsidian.MarkdownRenderer.renderMarkdown(content, taskContentEl, "", null);
      const markdownContent = taskContentEl.querySelector("p");
      if (markdownContent) {
        (_a = markdownContent.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(markdownContent);
        $$invalidate(2, taskContentEl.innerHTML += markdownContent.innerHTML, taskContentEl);
      }
    });
  }
  function onToggleTaskComplete() {
    $$invalidate(0, task.complete = !task.complete, task);
    if (task.complete) {
      $$invalidate(0, task.completed_date = new Date(), task);
    } else {
      $$invalidate(0, task.completed_date = void 0, task);
    }
    plugin.fileInterface.createUpdateTask(task);
  }
  function onSetDueDate(dt) {
    $$invalidate(0, task.due_date = dt, task);
    plugin.fileInterface.createUpdateTask(task);
  }
  function onSetScheduledDate(dt) {
    $$invalidate(0, task.scheduled_date = dt, task);
    plugin.fileInterface.createUpdateTask(task);
  }
  function onSetProject(project) {
    $$invalidate(0, task.project = project, task);
    plugin.fileInterface.createUpdateTask(task);
  }
  function onSetEffort(effort) {
    $$invalidate(0, task.effort = effort, task);
    plugin.fileInterface.createUpdateTask(task);
  }
  function navigateToTask() {
    const file = plugin.fileInterface.getTaskFileById(task.id);
    let existingLeaf = void 0;
    plugin.app.workspace.iterateAllLeaves((leaf2) => {
      const vs = leaf2.getViewState();
      if (vs.type === "markdown") {
        if (vs.state.file === task.filepath()) {
          existingLeaf = leaf2;
          return;
        }
      }
    });
    if (existingLeaf) {
      plugin.app.workspace.setActiveLeaf(existingLeaf);
      return;
    }
    let leaf = plugin.app.workspace.getLeaf(true);
    leaf.openFile(file);
  }
  const func = () => onToggleTaskComplete();
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      taskContentEl = $$value;
      $$invalidate(2, taskContentEl);
    });
  }
  const click_handler = () => navigateToTask();
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(9, plugin = $$props2.plugin);
    if ("task" in $$props2)
      $$invalidate(0, task = $$props2.task);
    if ("hideDueDate" in $$props2)
      $$invalidate(1, hideDueDate = $$props2.hideDueDate);
  };
  return [
    task,
    hideDueDate,
    taskContentEl,
    onToggleTaskComplete,
    onSetDueDate,
    onSetScheduledDate,
    onSetProject,
    onSetEffort,
    navigateToTask,
    plugin,
    func,
    div1_binding,
    click_handler
  ];
}
class TaskListItem extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$2, create_fragment$2, safe_not_equal, { plugin: 9, task: 0, hideDueDate: 1 });
  }
}
const DayView_svelte_svelte_type_style_lang = "";
function get_each_context$1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i2];
  return child_ctx;
}
function create_if_block_2(ctx) {
  let t2;
  return {
    c() {
      t2 = text("?");
    },
    m(target, anchor) {
      insert(target, t2, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t2);
    }
  };
}
function create_else_block$1(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "v";
      set_style(span, "color", "rgb(100,100,100)");
      set_style(span, "font-size", "12px");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_1$1(ctx) {
  let span;
  let t0_value = ctx[2].length + "";
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = text("\xA0\xA0>");
      set_style(span, "color", "rgb(100,100,100)");
      set_style(span, "font-size", "12px");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 4 && t0_value !== (t0_value = ctx2[2].length + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block$1(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let current;
  let each_value = ctx[2];
  const get_key = (ctx2) => ctx2[8].id;
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    let child_ctx = get_each_context$1(ctx, each_value, i2);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i2] = create_each_block$1(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      set_style(div, "margin-left", "14px");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 5) {
        each_value = ctx2[2];
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$1, null, get_each_context$1);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].d();
      }
    }
  };
}
function create_each_block$1(key_1, ctx) {
  let div1;
  let tasklistitem;
  let t0;
  let div0;
  let t1;
  let div1_style_value;
  let current;
  tasklistitem = new TaskListItem({
    props: {
      task: ctx[8],
      plugin: ctx[0],
      hideDueDate: true
    }
  });
  return {
    key: key_1,
    first: null,
    c() {
      div1 = element("div");
      create_component(tasklistitem.$$.fragment);
      t0 = space();
      div0 = element("div");
      t1 = space();
      set_style(div0, "height", "14px");
      attr(div1, "style", div1_style_value = !ctx[8].scheduled_date ? "color:grey !important" : "");
      this.first = div1;
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(tasklistitem, div1, null);
      append(div1, t0);
      append(div1, div0);
      append(div1, t1);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const tasklistitem_changes = {};
      if (dirty & 4)
        tasklistitem_changes.task = ctx[8];
      if (dirty & 1)
        tasklistitem_changes.plugin = ctx[0];
      tasklistitem.$set(tasklistitem_changes);
      if (!current || dirty & 4 && div1_style_value !== (div1_style_value = !ctx[8].scheduled_date ? "color:grey !important" : "")) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(tasklistitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tasklistitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(tasklistitem);
    }
  };
}
function create_fragment$1(ctx) {
  let div3;
  let div2;
  let div0;
  let span0;
  let t0;
  let span0_class_value;
  let t1;
  let span1;
  let t2;
  let t3_value = ctx[3].toString() + "";
  let t3;
  let t4;
  let span1_style_value;
  let t5;
  let div1;
  let t6;
  let current;
  let mounted;
  let dispose;
  let if_block0 = ctx[4] && create_if_block_2();
  function select_block_type(ctx2, dirty) {
    if (!ctx2[5])
      return create_if_block_1$1;
    return create_else_block$1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block1 = current_block_type(ctx);
  let if_block2 = ctx[5] && create_if_block$1(ctx);
  return {
    c() {
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      span0 = element("span");
      t0 = text(ctx[1]);
      t1 = space();
      span1 = element("span");
      t2 = text("\xA0");
      t3 = text(t3_value);
      if (if_block0)
        if_block0.c();
      t4 = text("m");
      t5 = space();
      div1 = element("div");
      if_block1.c();
      t6 = space();
      if (if_block2)
        if_block2.c();
      attr(span0, "class", span0_class_value = null_to_empty(ctx[1] !== "Unscheduled" ? ctx[1] !== "Overdue" ? "header" : "header headerOverdue" : "header headerUnscheduled") + " svelte-1n2qv94");
      attr(span1, "style", span1_style_value = "font-size:13px;color:" + ctx[6](ctx[3]));
      set_style(div0, "flex-grow", "1");
      attr(div2, "class", "headerContainer svelte-1n2qv94");
      attr(div3, "class", "card2 svelte-1n2qv94");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div2, div0);
      append(div0, span0);
      append(span0, t0);
      append(div0, t1);
      append(div0, span1);
      append(span1, t2);
      append(span1, t3);
      if (if_block0)
        if_block0.m(span1, null);
      append(span1, t4);
      append(div2, t5);
      append(div2, div1);
      if_block1.m(div1, null);
      append(div3, t6);
      if (if_block2)
        if_block2.m(div3, null);
      current = true;
      if (!mounted) {
        dispose = listen(div2, "click", ctx[7]);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & 2)
        set_data(t0, ctx2[1]);
      if (!current || dirty & 2 && span0_class_value !== (span0_class_value = null_to_empty(ctx2[1] !== "Unscheduled" ? ctx2[1] !== "Overdue" ? "header" : "header headerOverdue" : "header headerUnscheduled") + " svelte-1n2qv94")) {
        attr(span0, "class", span0_class_value);
      }
      if ((!current || dirty & 8) && t3_value !== (t3_value = ctx2[3].toString() + ""))
        set_data(t3, t3_value);
      if (ctx2[4]) {
        if (if_block0)
          ;
        else {
          if_block0 = create_if_block_2();
          if_block0.c();
          if_block0.m(span1, t4);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (!current || dirty & 8 && span1_style_value !== (span1_style_value = "font-size:13px;color:" + ctx2[6](ctx2[3]))) {
        attr(span1, "style", span1_style_value);
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div1, null);
        }
      }
      if (ctx2[5]) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & 32) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$1(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div3, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if (if_block0)
        if_block0.d();
      if_block1.d();
      if (if_block2)
        if_block2.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let { plugin } = $$props;
  let { dayLabel } = $$props;
  let { tasks = [] } = $$props;
  let totalEffort = 0;
  let hasUnknownEfforts = false;
  let showing = true;
  const getColor2 = (eff) => {
    if (!eff)
      return "grey";
    if (eff <= 10)
      return "rgb(60,250,60)";
    if (eff <= 30)
      return "rgb(30,235,250)";
    if (eff <= 60)
      return "rgb(255, 255, 20)";
    if (eff <= 120)
      return "rgb(255,87,51)";
    if (eff <= 240)
      return "rgb(255,20,255)";
    if (eff > 240)
      return "red";
  };
  const click_handler = () => {
    $$invalidate(5, showing = !showing);
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
    if ("dayLabel" in $$props2)
      $$invalidate(1, dayLabel = $$props2.dayLabel);
    if ("tasks" in $$props2)
      $$invalidate(2, tasks = $$props2.tasks);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 4) {
      {
        $$invalidate(3, totalEffort = tasks.reduce(
          (summer, task) => {
            return summer + (task.effort || 0);
          },
          0
        ));
        $$invalidate(4, hasUnknownEfforts = tasks.find((task) => task.effort === void 0) ? true : false);
      }
    }
  };
  return [
    plugin,
    dayLabel,
    tasks,
    totalEffort,
    hasUnknownEfforts,
    showing,
    getColor2,
    click_handler
  ];
}
class DayView extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, { plugin: 0, dayLabel: 1, tasks: 2 });
  }
}
const TaskList_svelte_svelte_type_style_lang = "";
function get_each_context(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i2];
  child_ctx[6] = i2;
  return child_ctx;
}
function create_else_block_1(ctx) {
  let each_1_anchor;
  let current;
  let each_value = Object.keys(ctx[3]);
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block(get_each_context(ctx, each_value, i2));
  }
  const out = (i2) => transition_out(each_blocks[i2], 1, 1, () => {
    each_blocks[i2] = null;
  });
  return {
    c() {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 9) {
        each_value = Object.keys(ctx2[3]);
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
            transition_in(each_blocks[i2], 1);
          } else {
            each_blocks[i2] = create_each_block(child_ctx);
            each_blocks[i2].c();
            transition_in(each_blocks[i2], 1);
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i2 = each_value.length; i2 < each_blocks.length; i2 += 1) {
          out(i2);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i2 = 0; i2 < each_value.length; i2 += 1) {
        transition_in(each_blocks[i2]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        transition_out(each_blocks[i2]);
      }
      current = false;
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_if_block(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1, create_else_block];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (ctx2[2])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_each_block(ctx) {
  let dayview;
  let current;
  dayview = new DayView({
    props: {
      plugin: ctx[0],
      dayLabel: ctx[4],
      tasks: ctx[3][ctx[4]]
    }
  });
  return {
    c() {
      create_component(dayview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dayview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dayview_changes = {};
      if (dirty & 1)
        dayview_changes.plugin = ctx2[0];
      if (dirty & 8)
        dayview_changes.dayLabel = ctx2[4];
      if (dirty & 8)
        dayview_changes.tasks = ctx2[3][ctx2[4]];
      dayview.$set(dayview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dayview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dayview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dayview, detaching);
    }
  };
}
function create_else_block(ctx) {
  let em;
  let t0;
  let t1_value = ctx[1].id + "";
  let t1;
  return {
    c() {
      em = element("em");
      t0 = text("Deleted task: ");
      t1 = text(t1_value);
      set_style(em, "font-size", "12px");
      set_style(em, "color", "grey");
      set_style(em, "text-align", "center");
    },
    m(target, anchor) {
      insert(target, em, anchor);
      append(em, t0);
      append(em, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t1_value !== (t1_value = ctx2[1].id + ""))
        set_data(t1, t1_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(em);
    }
  };
}
function create_if_block_1(ctx) {
  let tasklistitem;
  let current;
  tasklistitem = new TaskListItem({
    props: {
      task: ctx[2],
      plugin: ctx[0]
    }
  });
  return {
    c() {
      create_component(tasklistitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tasklistitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tasklistitem_changes = {};
      if (dirty & 4)
        tasklistitem_changes.task = ctx2[2];
      if (dirty & 1)
        tasklistitem_changes.plugin = ctx2[0];
      tasklistitem.$set(tasklistitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(tasklistitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tasklistitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tasklistitem, detaching);
    }
  };
}
function create_fragment(ctx) {
  let div;
  let ul;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block, create_else_block_1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[1].id)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      ul = element("ul");
      if_block.c();
      attr(ul, "class", "contains-task-list todoist-task-list svelte-axrjfy");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, ul);
      if_blocks[current_block_type_index].m(ul, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(ul, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { plugin } = $$props;
  let { filterParams } = $$props;
  let displayTask = void 0;
  let groupings = {};
  allTasksCache.subscribe((tasks) => {
    if (filterParams.id) {
      const task = tasks.find((task2) => task2.id === filterParams.id);
      $$invalidate(2, displayTask = task);
      return;
    }
    let reverse = false;
    if (filterParams.completed) {
      reverse = true;
      tasks = tasks.slice().filter((task) => task.complete);
    } else {
      tasks = tasks.filter((task) => !task.complete || task.scheduled_date && task.scheduled_date >= startOfDay(new Date()));
    }
    $$invalidate(3, groupings = sortTasksByDate(tasks, reverse).reduce(
      (accum, task) => {
        const dt = task.completed_date || task.scheduled_date || task.due_date;
        let relativeDateStr = dt ? formatDateRelativeToNow(dt) : "Unscheduled";
        if (!filterParams.completed && task.isOverdue()) {
          relativeDateStr = "Overdue";
        }
        accum[relativeDateStr] = (accum[relativeDateStr] || []).concat([task]);
        return accum;
      },
      {}
    ));
  });
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
    if ("filterParams" in $$props2)
      $$invalidate(1, filterParams = $$props2.filterParams);
  };
  return [plugin, filterParams, displayTask, groupings];
}
class TaskList extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { plugin: 0, filterParams: 1 });
  }
}
class TaskrPlugin extends obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.renderTaskBlockInMarkdown = (source, el, ctx) => {
      const params = {};
      const lines = source.split("\n");
      const parseLine = (line) => {
        if (!line.includes(":"))
          return null;
        const field = line.split(":")[0].trim();
        const value = line.split(":")[1].trim();
        return [field, value];
      };
      lines.map((line) => {
        const parsed = parseLine(line);
        if (parsed) {
          params[parsed[0]] = parsed[1];
        }
      });
      new TaskList({
        target: el,
        props: {
          plugin: this,
          filterParams: params
        }
      });
    };
  }
  async onload() {
    this.fileInterface = new FileInterface(this, this.app);
    await this.loadSettings();
    this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
    this.addRibbonIcon("checkbox-glyph", "New Task (TASKR)", () => {
      new TaskModal(this.app, this).open();
    });
    this.addCommand({
      id: "taskr-add-task",
      name: "Add Task (Taskr)",
      hotkeys: [{ modifiers: ["Mod"], key: "t" }],
      callback: () => {
        new TaskModal(this.app, this).open();
      }
    });
    this.addSettingTab(new SettingsTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor(
      "taskr",
      this.renderTaskBlockInMarkdown
    );
    this.registerEvent(this.app.vault.on("modify", async (file) => {
      if (file instanceof obsidian.TFile && file.parent.name == this.settings.TasksDir) {
        const task = await this.fileInterface.getTaskFromFile(file);
        allTasksCache.update((tasks) => [...tasks.filter((t2) => t2.id !== task.id), task]);
      }
    }));
    this.registerEvent(this.app.vault.on("delete", async (file) => {
      if (file instanceof obsidian.TFile && file.path.contains(this.settings.TasksDir)) {
        const task = await this.fileInterface.getTaskFromFile(file);
        allTasksCache.update((tasks) => tasks.filter((t2) => t2.id !== task.id));
      }
    }));
    this.registerEvent(this.app.vault.on("create", async (file) => {
      if (file instanceof obsidian.TFile && file.parent.name == this.settings.TasksDir) {
        const task = await this.fileInterface.getTaskFromFile(file);
        allTasksCache.update((tasks) => [...tasks, task]);
      }
    }));
    this.registerEvent(this.app.vault.on("rename", async (file, oldPath) => {
      if (file instanceof obsidian.TFile && file.parent.name == this.settings.TasksDir) {
        const tasks = await this.fileInterface.getAllTasks();
        allTasksCache.set(tasks);
      }
    }));
  }
  async onLayoutReady() {
    await this.fileInterface.getAllTasks();
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = settingsWithDefaults(await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
}
module.exports = TaskrPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
